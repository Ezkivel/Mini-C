package minic;
import java_cup.runtime.*;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }
:};


/* Terminals Tokens */

terminal Token tipoVariable, nombreVariable, IF, ELSE, WHILE, FOR, TRUE, FALSE,
MAIN, RETURN, VOID, corcheteIzquierdo, corcheteDerecho, llaveIzquierda, llaveDerecha,
constChar, constStr, parentesisIzquierdo, parentesisDerecho, igual, printf, scanf,
operadorAritmeticoIgual, operadorSuma, operadorResta, operadorMultiplicacion, operadorDivision, operadorIncrementoDecremento,
operadorRelacional, operadorLogico , puntoYComa, coma, parametroScanf, and;

terminal Integer
entero;

/* noterminals */

non terminal S;
non terminal Main;
non terminal Codigo;
non terminal Variable;
non terminal DeclaracionVariables;
non terminal ListaVariables;
non terminal ListaVariablesComa;
non terminal AsignacionVariable;
non terminal AsignacionVariableComa;
non terminal Scanf;
non terminal Printf;
non terminal InicializacionArreglo;
non terminal InicializacionArregloComa;
non terminal IncrementarDecrementarVariable;
non terminal ElementoDeUnArreglo;
non terminal OperacionAritmetica;
non terminal OperacionAritmetica2;
non terminal OperacionAritmetica3;
non terminal If;
non terminal Else;
non terminal While;
non terminal For;
non terminal ForInicializacion;
non terminal ForInicializacion2;
non terminal ForInicializacionComa;
non terminal ForActualizacion;
non terminal ForActualizacionComa; 
non terminal Condicion;
non terminal CondicionOperadorLogico;
non terminal DeclaracionFuncion;
non terminal DeclaracionFuncionParametros;
non terminal DeclaracionFuncionParametrosComa;
non terminal Funciones;
non terminal FuncionesParametros;
non terminal FuncionesParametrosComa;
non terminal LlamadoAFuncion;
non terminal LlamadoAFuncionParametros;
non terminal LlamadoAFuncionParametrosComa;
non terminal Return;


start with S;

S ::= DeclaracionFuncion S
     | Main;

DeclaracionFuncion ::= tipoVariable nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa
                     | VOID nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa;
                     
DeclaracionFuncionParametros ::= tipoVariable DeclaracionFuncionParametrosComa
                               | tipoVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               | tipoVariable nombreVariable DeclaracionFuncionParametrosComa
                               | tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               |;

DeclaracionFuncionParametrosComa ::= coma DeclaracionFuncionParametros
                                   |;


Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda Codigo llaveDerecha Funciones;


Funciones ::= tipoVariable nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda Codigo llaveDerecha Funciones
            | VOID nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda Codigo llaveDerecha Funciones
            |;

FuncionesParametros ::= tipoVariable nombreVariable FuncionesParametrosComa
                      | tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho FuncionesParametrosComa
                      |;

FuncionesParametrosComa ::= coma FuncionesParametros
                         |;

Codigo ::= DeclaracionVariables Codigo
         | AsignacionVariable Codigo
         | IncrementarDecrementarVariable Codigo
         | Printf Codigo
         | Scanf Codigo
         | While Codigo
         | If Codigo
         | For Codigo
         | LlamadoAFuncion puntoYComa Codigo
         | RETURN OperacionAritmetica puntoYComa Codigo
         | RETURN constChar puntoYComa Codigo
         | RETURN constStr puntoYComa Codigo
         | error Codigo
         |;

LlamadoAFuncion ::= nombreVariable parentesisIzquierdo LlamadoAFuncionParametros parentesisDerecho;

LlamadoAFuncionParametros ::= OperacionAritmetica LlamadoAFuncionParametrosComa
                            | constChar LlamadoAFuncionParametrosComa
                            | constStr LlamadoAFuncionParametrosComa
                            |;

LlamadoAFuncionParametrosComa ::= coma LlamadoAFuncionParametros
                                |;

Scanf ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa
        | scanf parentesisIzquierdo parametroScanf coma ElementoDeUnArreglo parentesisDerecho puntoYComa;

Printf ::= printf parentesisIzquierdo constStr:c parentesisDerecho puntoYComa {: System.out.println(c.getContenido() );  :}
         | printf parentesisIzquierdo constStr coma OperacionAritmetica parentesisDerecho puntoYComa;

If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else;

Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else
       | ELSE llaveIzquierda Codigo llaveDerecha
       |;

While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha;

For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha
      | FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha;

ForInicializacion ::= tipoVariable Variable ForInicializacionComa
                    | tipoVariable nombreVariable igual OperacionAritmetica ForInicializacionComa
                    | tipoVariable nombreVariable igual constChar ForInicializacionComa
                    | tipoVariable nombreVariable igual constStr ForInicializacionComa
                    | Variable igual OperacionAritmetica ForInicializacionComa
                    | Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa
                    | Variable igual constChar ForInicializacionComa
                    | Variable igual constStr ForInicializacionComa;

ForInicializacion2 ::= Variable igual OperacionAritmetica ForInicializacionComa
                     | Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa
                     | Variable igual constChar ForInicializacionComa
                     | Variable igual constStr ForInicializacionComa;
ForInicializacionComa ::= coma ForInicializacion2
                        |;

ForActualizacion ::= Variable igual OperacionAritmetica ForActualizacionComa
                   | Variable operadorAritmeticoIgual OperacionAritmetica ForActualizacionComa
                   | Variable igual constChar ForActualizacionComa
                   | Variable igual constStr ForActualizacionComa
                   | Variable operadorIncrementoDecremento ForActualizacionComa
                   | operadorIncrementoDecremento Variable ForActualizacionComa;
ForActualizacionComa ::= coma ForActualizacion
                       |;

Condicion ::= OperacionAritmetica operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | OperacionAritmetica operadorRelacional constChar CondicionOperadorLogico
            | OperacionAritmetica operadorRelacional constStr CondicionOperadorLogico
            | constChar operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | constStr operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico;

CondicionOperadorLogico ::= operadorLogico Condicion
                      |;

DeclaracionVariables ::= tipoVariable ListaVariables puntoYComa;

ListaVariables ::= Variable ListaVariablesComa
                 | nombreVariable igual OperacionAritmetica ListaVariablesComa
                 | nombreVariable igual constChar ListaVariablesComa
                 | nombreVariable igual constStr ListaVariablesComa
                 | nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa
                 | nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa;
ListaVariablesComa ::= coma ListaVariables
                     |;

AsignacionVariable ::= Variable igual OperacionAritmetica AsignacionVariableComa
                     | Variable operadorAritmeticoIgual OperacionAritmetica AsignacionVariableComa
                     | Variable igual constChar AsignacionVariableComa
                     | Variable igual constStr AsignacionVariableComa;

AsignacionVariableComa ::= coma AsignacionVariable
                        | puntoYComa;

IncrementarDecrementarVariable ::= Variable operadorIncrementoDecremento puntoYComa
                                 | operadorIncrementoDecremento Variable puntoYComa;

Variable ::= nombreVariable
           | ElementoDeUnArreglo;

ElementoDeUnArreglo ::= nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho;

InicializacionArreglo ::= OperacionAritmetica InicializacionArregloComa
                        | constChar InicializacionArregloComa
                        | constStr InicializacionArregloComa;

InicializacionArregloComa ::= coma InicializacionArreglo
                            |;


OperacionAritmetica ::= OperacionAritmetica operadorSuma OperacionAritmetica2
                      | OperacionAritmetica operadorResta OperacionAritmetica2
                      | OperacionAritmetica2;

OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3
                       | OperacionAritmetica2 operadorDivision OperacionAritmetica3
                       | OperacionAritmetica3;

OperacionAritmetica3 ::= entero
                       | Variable
                       | LlamadoAFuncion
                       | parentesisIzquierdo OperacionAritmetica parentesisDerecho;