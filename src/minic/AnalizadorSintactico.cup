package minic;

import java_cup.runtime.*;
import ast.*;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};


/* Terminals Tokens */



terminal INTEGER, CHAR, STRING;

terminal nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar; 
terminal constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico;
terminal puntoYComa;
terminal coma;
terminal parametroScanf;
terminal entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal MainClass main;
non terminal Codigo codigo;

non terminal DeclaracionFuncion declaracion_funcion;
non terminal OperacionAritmetica operacion_aritmetica;
non terminal OperacionAritmetica2 operacion_aritmetica2;
non terminal OperacionAritmetica3 operacion_aritmetica3;

non terminal DeclaracionVariables declaracion_variables;
non terminal Tipo tipo;
non terminal Variable variable;
non terminal ElementoDeUnArreglo elemento_array;
non terminal AsignacionVariableComa asignacion_variable_coma;

non terminal AsignacionVariable;
non terminal IncrementarDecrementarVariable;
non terminal Scanf;
non terminal Printf;
non terminal If;
non terminal Else;
non terminal While;
non terminal For;

non terminal ForInicializacion;
non terminal ForInicializacion2;



non terminal ListaVariables lista_variables;
non terminal ListaVariablesComa lista_variablesComa;

non terminal ForInicializacionComa;
non terminal ForActualizacion;
non terminal ForActualizacionComa; 
non terminal Condicion;
non terminal CondicionOperadorLogico;
non terminal InicializacionArreglo;
non terminal InicializacionArregloComa;
non terminal DeclaracionFuncionParametros;
non terminal DeclaracionFuncionParametrosComa;
non terminal Funciones;
non terminal FuncionesParametros;
non terminal FuncionesParametrosComa;
non terminal LlamadoAFuncion;
non terminal LlamadoAFuncionParametros;
non terminal LlamadoAFuncionParametrosComa;
non terminal Return;

start with programa;

programa ::= declaracion_funcion:df  programa:p {: RESULT = new Programa(df, p);   :}
     | main:m  {:   RESULT = new Programa(m); :};

main ::= tipo:t MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigo:c llaveDerecha Funciones {: RESULT = new MainClass(c,t);    :};

codigo ::= declaracion_variables:dv codigo:c {: RESULT = new Codigo(dv, c); :} 
         | AsignacionVariable codigo  
         | IncrementarDecrementarVariable codigo
         | Printf codigo
         | Scanf codigo
         | While codigo
         | If codigo
         | For codigo
         | LlamadoAFuncion puntoYComa codigo
         | RETURN operacion_aritmetica puntoYComa codigo
         | RETURN constChar puntoYComa codigo
         | RETURN constStr puntoYComa codigo
         | error codigo
         |;

declaracion_variables ::= tipo:t lista_variables:lv puntoYComa {: RESULT = new DeclaracionVariables(t,lv);   :};

tipo ::= INTEGER {: RESULT = new IntegerTipo(); :}
       | STRING  {: RESULT = new StringTipo();  :}  
       | CHAR    {: RESULT = new CharTipo();   :};

lista_variables ::= variable lista_variablesComa
                 | nombreVariable igual operacion_aritmetica lista_variablesComa
                 | nombreVariable igual constChar lista_variablesComa
                 | nombreVariable igual constStr lista_variablesComa
                 | nombreVariable corcheteIzquierdo operacion_aritmetica corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha lista_variablesComa
                 | nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha lista_variablesComa;

lista_variablesComa ::= coma lista_variables:lv {: RESULT = new ListaVariablesComa(lv); :}
                     |;



declaracion_funcion ::= tipo:t nombreVariable:nv parentesisIzquierdo DeclaracionFuncionParametros:dfp parentesisDerecho puntoYComa 
                     | VOID nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa
                     | error puntoYComa;

DeclaracionFuncionParametros ::= tipo DeclaracionFuncionParametrosComa 
                               | tipo corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               | tipo nombreVariable DeclaracionFuncionParametrosComa
                               | tipo nombreVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               |;
DeclaracionFuncionParametrosComa ::= coma DeclaracionFuncionParametros
                                   |;

Funciones ::= tipo nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigo llaveDerecha Funciones
            | VOID nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigo llaveDerecha Funciones
            | tipo error parentesisDerecho llaveIzquierda codigo llaveDerecha Funciones
            | VOID error parentesisDerecho llaveIzquierda codigo llaveDerecha Funciones
            |;

FuncionesParametros ::= tipo nombreVariable FuncionesParametrosComa
                      | tipo nombreVariable corcheteIzquierdo corcheteDerecho FuncionesParametrosComa
                      |;

FuncionesParametrosComa ::= coma FuncionesParametros
                         |;

LlamadoAFuncion ::= nombreVariable parentesisIzquierdo LlamadoAFuncionParametros parentesisDerecho
                  | nombreVariable error parentesisDerecho;

LlamadoAFuncionParametros ::= operacion_aritmetica LlamadoAFuncionParametrosComa
                            | constChar LlamadoAFuncionParametrosComa
                            | constStr LlamadoAFuncionParametrosComa
                            |;

LlamadoAFuncionParametrosComa ::= coma LlamadoAFuncionParametros
                                |;

Scanf ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa
        | scanf parentesisIzquierdo parametroScanf coma elemento_array parentesisDerecho puntoYComa;

Printf ::= printf parentesisIzquierdo constStr:c parentesisDerecho puntoYComa
         | printf parentesisIzquierdo constStr coma operacion_aritmetica parentesisDerecho puntoYComa;

If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha Else
     | IF error parentesisDerecho llaveIzquierda codigo llaveDerecha Else;

Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha Else
       | ELSE llaveIzquierda codigo llaveDerecha
       | ELSE IF error parentesisDerecho llaveIzquierda codigo llaveDerecha Else
       |;

While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha
        | WHILE error parentesisDerecho llaveIzquierda codigo llaveDerecha;

For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR error parentesisDerecho llaveIzquierda codigo llaveDerecha;

ForInicializacion ::= tipo variable ForInicializacionComa
                    | tipo nombreVariable igual operacion_aritmetica ForInicializacionComa
                    | tipo nombreVariable igual constChar ForInicializacionComa
                    | tipo nombreVariable igual constStr ForInicializacionComa
                    | variable igual operacion_aritmetica ForInicializacionComa
                    | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                    | variable igual constChar ForInicializacionComa
                    | variable igual constStr ForInicializacionComa;

ForInicializacion2 ::= variable igual operacion_aritmetica ForInicializacionComa
                     | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                     | variable igual constChar ForInicializacionComa
                     | variable igual constStr ForInicializacionComa;

ForInicializacionComa ::= coma ForInicializacion2
                        |;

ForActualizacion ::= variable igual operacion_aritmetica ForActualizacionComa
                   | variable operadorAritmeticoIgual operacion_aritmetica ForActualizacionComa
                   | variable igual constChar ForActualizacionComa
                   | variable igual constStr ForActualizacionComa
                   | variable operadorIncrementoDecremento ForActualizacionComa
                   | operadorIncrementoDecremento variable ForActualizacionComa;

ForActualizacionComa ::= coma ForActualizacion
                       |;

Condicion ::= operacion_aritmetica operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constChar CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constStr CondicionOperadorLogico
            | constChar operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | constStr operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico;

CondicionOperadorLogico ::= operadorLogico Condicion
                      |;

AsignacionVariable ::= variable igual operacion_aritmetica asignacion_variable_coma
                     | variable operadorAritmeticoIgual operacion_aritmetica asignacion_variable_coma
                     | variable igual constChar asignacion_variable_coma
                     | variable igual constStr asignacion_variable_coma
                     | error puntoYComa;

asignacion_variable_coma ::= coma AsignacionVariable
                        | puntoYComa;

IncrementarDecrementarVariable ::= variable operadorIncrementoDecremento puntoYComa
                                 | operadorIncrementoDecremento variable puntoYComa;

variable ::= nombreVariable    {: RESULT = new Variable(new nombreVariable());   :}
           | elemento_array:array    {: RESULT = new Variable(array);   :};

elemento_array ::= nombreVariable corcheteIzquierdo operacion_aritmetica:o corcheteDerecho  {: RESULT = new ElementoDeUnArreglo(new nombreVariable(), o); :};

InicializacionArreglo ::= operacion_aritmetica InicializacionArregloComa
                        | constChar InicializacionArregloComa
                        | constStr InicializacionArregloComa;

InicializacionArregloComa ::= coma InicializacionArreglo
                            |;


operacion_aritmetica ::= operacion_aritmetica operadorSuma operacion_aritmetica2
                      | operacion_aritmetica operadorResta operacion_aritmetica2
                      | operacion_aritmetica2;

operacion_aritmetica2 ::= operacion_aritmetica2 operadorMultiplicacion operacion_aritmetica3
                       | operacion_aritmetica2 operadorDivision operacion_aritmetica3
                       | operacion_aritmetica3;

operacion_aritmetica3 ::= entero
                       | variable
                       | LlamadoAFuncion
                       | parentesisIzquierdo operacion_aritmetica parentesisDerecho;