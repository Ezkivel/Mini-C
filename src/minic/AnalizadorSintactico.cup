package minic;

import java_cup.runtime.*;
import ast.*;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};


/* Terminals Tokens */



terminal INTEGER, CHAR, STRING;

terminal nombreVariable nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar constChar; 
terminal constStr constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico;
terminal puntoYComa;
terminal coma;
terminal parametroScanf;
terminal entero entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal MainClass main;
non terminal Codigo codigo;

non terminal DeclaracionFuncion declaracion_funcion;
non terminal OperacionAritmetica operacion_aritmetica;
non terminal OperacionAritmetica2 operacion_aritmetica2;
non terminal OperacionAritmetica3 operacion_aritmetica3;

non terminal DeclaracionVariables declaracion_variables;
non terminal Tipo tipo;
non terminal Variable variable;
non terminal ElementoDeUnArreglo elemento_array;
non terminal AsignacionVariableComa asignacion_variable_coma;

non terminal AsignacionVariable asignacion_variable;
non terminal IncrementarDecrementarVariable;
non terminal Scanf scans;
non terminal Printf print;
non terminal If _if;
non terminal Else;
non terminal While whil;
non terminal For _for;

non terminal ForInicializacion;
non terminal ForInicializacion2;



non terminal ListaVariables lista_variables;
non terminal ListaVariablesComa lista_variablesComa;

non terminal ForInicializacionComa;
non terminal ForActualizacion;
non terminal ForActualizacionComa; 
non terminal Condicion;
non terminal CondicionOperadorLogico;
non terminal InicializacionArreglo inicializacion_arreglo;
non terminal InicializacionArregloComa;
non terminal DeclaracionFuncionParametros;
non terminal DeclaracionFuncionParametrosComa;
non terminal Funciones funciones;
non terminal FuncionesParametros;
non terminal FuncionesParametrosComa;
non terminal LlamadoAFuncion llamado_funcion;
non terminal LlamadoAFuncionParametros;
non terminal LlamadoAFuncionParametrosComa;
non terminal Return;

start with programa;

programa ::= declaracion_funcion:df  programa:p {: RESULT = new Programa(df, p); :}
     | main:m  {:   RESULT = new Programa(m); :};

main ::= tipo:t MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f 
{: RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); :};

codigo ::= declaracion_variables:dv codigo:c {: RESULT = new Codigo(dv, c); :} 
         | asignacion_variable:av codigo:c   {: RESULT = new Codigo(av,c);  :}
         | IncrementarDecrementarVariable codigo
         | print:p codigo:c {:  RESULT = new Codigo(p,c); /*System.out.print( RESULT.p.cs.constStr);*/ :}
         | scans:s codigo:c {:  RESULT = new Codigo(s,c);  :}
         | whil:w codigo:c  {:  RESULT = new Codigo(w,c);  :}
         | _if:i codigo:c   {:  RESULT = new Codigo(i,c);  :}
         | _for:f codigo:c  {:  RESULT = new Codigo(f,c);  :}
         | llamado_funcion:lf puntoYComa codigo:c {:  RESULT = new Codigo(lf,new puntoYComa(), c);  :}   
         | RETURN operacion_aritmetica:o puntoYComa codigo:c  {: RESULT = new Codigo(new RETURN(), o, new puntoYComa(),   c); :}           
         | RETURN constChar:csc puntoYComa codigo:c   {: RESULT = new Codigo(new RETURN(), new constChar(csc.c), new puntoYComa(), c); :}
         | RETURN constStr:cst puntoYComa codigo:c    {: RESULT = new Codigo(new RETURN(), new constStr(cst.constStr), new puntoYComa(),  c); :}
         | error codigo:c {:System.out.println("ERROR"); RESULT = new Codigo(c); :}
         |;

declaracion_variables ::= tipo:t lista_variables:lv puntoYComa {: RESULT = new DeclaracionVariables(t,lv, new puntoYComa() );   :};

tipo ::= INTEGER {: RESULT = new IntegerTipo(); :}
       | STRING  {: RESULT = new StringTipo();  :}  
       | CHAR    {: RESULT = new CharTipo();   :};

lista_variables ::= variable:v lista_variablesComa:lc                                       {: RESULT = new ListaVariables(v,lc);  :}
                 | nombreVariable:id igual operacion_aritmetica:o lista_variablesComa:lc    {: RESULT = new ListaVariables(new nombreVariable(id.id), new igual(), o, lc);  :}
                 | nombreVariable:id igual constChar:csc lista_variablesComa:lc             {: RESULT = new ListaVariables(new nombreVariable(id.id), new igual(), new constChar(csc.c), lc);   :}
                 | nombreVariable:id igual constStr:css lista_variablesComa:lc              {: RESULT = new ListaVariables(new nombreVariable(id.id), new igual(), new constStr(css.constStr), lc);   :}
                 | nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho igual llaveIzquierda inicializacion_arreglo:ia llaveDerecha lista_variablesComa:lv
                    {:  RESULT = new ListaVariables(new nombreVariable(id.id), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha(), lv);  :}
                 | nombreVariable:id corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo:iA llaveDerecha lista_variablesComa:lv
                    {:  RESULT = new ListaVariables(new nombreVariable(id.id), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha(), lv);  :};

lista_variablesComa ::= coma lista_variables:lv {: RESULT = new ListaVariablesComa(lv, new coma()); :}
                     |;



declaracion_funcion ::= tipo:t nombreVariable:nv parentesisIzquierdo DeclaracionFuncionParametros:dfp parentesisDerecho puntoYComa 
                     | VOID nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa
                     | error puntoYComa;

DeclaracionFuncionParametros ::= tipo DeclaracionFuncionParametrosComa 
                               | tipo corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               | tipo nombreVariable DeclaracionFuncionParametrosComa
                               | tipo nombreVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               |;
DeclaracionFuncionParametrosComa ::= coma DeclaracionFuncionParametros
                                   |;

funciones ::= tipo nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigo llaveDerecha funciones
            | VOID nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigo llaveDerecha funciones
            | tipo error parentesisDerecho llaveIzquierda codigo llaveDerecha funciones
            | VOID error parentesisDerecho llaveIzquierda codigo llaveDerecha funciones
            |;

FuncionesParametros ::= tipo nombreVariable FuncionesParametrosComa
                      | tipo nombreVariable corcheteIzquierdo corcheteDerecho FuncionesParametrosComa
                      |;

FuncionesParametrosComa ::= coma FuncionesParametros
                         |;

llamado_funcion ::= nombreVariable parentesisIzquierdo LlamadoAFuncionParametros parentesisDerecho
                  | nombreVariable error parentesisDerecho;

LlamadoAFuncionParametros ::= operacion_aritmetica LlamadoAFuncionParametrosComa
                            | constChar LlamadoAFuncionParametrosComa
                            | constStr LlamadoAFuncionParametrosComa
                            |;

LlamadoAFuncionParametrosComa ::= coma LlamadoAFuncionParametros
                                |;

scans ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa
        | scanf parentesisIzquierdo parametroScanf coma elemento_array parentesisDerecho puntoYComa;

print ::= printf parentesisIzquierdo constStr:csts parentesisDerecho puntoYComa    {: RESULT = new Printf( new constStr(csts.constStr) ); :}
         | printf parentesisIzquierdo constStr coma operacion_aritmetica:o parentesisDerecho puntoYComa   {: RESULT = new Printf(new constStr() ,o); :}
        ;

_if ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha Else
     | IF error parentesisDerecho llaveIzquierda codigo llaveDerecha Else;

Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha Else
       | ELSE llaveIzquierda codigo llaveDerecha
       | ELSE IF error parentesisDerecho llaveIzquierda codigo llaveDerecha Else
       |;

whil ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigo llaveDerecha
        | WHILE error parentesisDerecho llaveIzquierda codigo llaveDerecha;

_for ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR error parentesisDerecho llaveIzquierda codigo llaveDerecha;

ForInicializacion ::= tipo variable ForInicializacionComa
                    | tipo nombreVariable igual operacion_aritmetica ForInicializacionComa
                    | tipo nombreVariable igual constChar ForInicializacionComa
                    | tipo nombreVariable igual constStr ForInicializacionComa
                    | variable igual operacion_aritmetica ForInicializacionComa
                    | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                    | variable igual constChar ForInicializacionComa
                    | variable igual constStr ForInicializacionComa;

ForInicializacion2 ::= variable igual operacion_aritmetica ForInicializacionComa
                     | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                     | variable igual constChar ForInicializacionComa
                     | variable igual constStr ForInicializacionComa;

ForInicializacionComa ::= coma ForInicializacion2
                        |;

ForActualizacion ::= variable igual operacion_aritmetica ForActualizacionComa
                   | variable operadorAritmeticoIgual operacion_aritmetica ForActualizacionComa
                   | variable igual constChar ForActualizacionComa
                   | variable igual constStr ForActualizacionComa
                   | variable operadorIncrementoDecremento ForActualizacionComa
                   | operadorIncrementoDecremento variable ForActualizacionComa;

ForActualizacionComa ::= coma ForActualizacion
                       |;

Condicion ::= operacion_aritmetica operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constChar CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constStr CondicionOperadorLogico
            | constChar operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | constStr operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico;

CondicionOperadorLogico ::= operadorLogico Condicion
                      |;

asignacion_variable ::= variable:v igual operacion_aritmetica:oa asignacion_variable_coma:av {: RESULT = new AsignacionVariable(v,oa,av);  :}
                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o asignacion_variable_coma:av {:  RESULT = new AsignacionVariable(v,o,av, new operadorAritmeticoIgual());  :}
                     | variable:v igual constChar asignacion_variable_coma:ac {: RESULT = new AsignacionVariable(v,ac,new constChar()); :}
                     | variable:v igual constStr asignacion_variable_coma:ac {:  RESULT = new AsignacionVariable(v,ac, new constStr());:}
                     | error puntoYComa;

asignacion_variable_coma ::= coma asignacion_variable:av   {: RESULT = new AsignacionVariableComa(av);  :}
                        | puntoYComa;

IncrementarDecrementarVariable ::= variable operadorIncrementoDecremento puntoYComa
                                 | operadorIncrementoDecremento variable puntoYComa;

variable ::= nombreVariable    {: RESULT = new Variable(new nombreVariable());   :}
           | elemento_array:array    {: RESULT = new Variable(array);   :};

elemento_array ::= nombreVariable corcheteIzquierdo operacion_aritmetica:o corcheteDerecho  {: RESULT = new ElementoDeUnArreglo(new nombreVariable(), o); :};

inicializacion_arreglo ::= operacion_aritmetica InicializacionArregloComa
                        | constChar InicializacionArregloComa
                        | constStr InicializacionArregloComa;

InicializacionArregloComa ::= coma inicializacion_arreglo
                            |;


operacion_aritmetica ::= operacion_aritmetica operadorSuma operacion_aritmetica2
                      | operacion_aritmetica operadorResta operacion_aritmetica2
                      | operacion_aritmetica2;

operacion_aritmetica2 ::= operacion_aritmetica2 operadorMultiplicacion operacion_aritmetica3
                       | operacion_aritmetica2 operadorDivision operacion_aritmetica3
                       | operacion_aritmetica3;

operacion_aritmetica3 ::= entero
                       | variable
                       | llamado_funcion
                       | parentesisIzquierdo operacion_aritmetica parentesisDerecho;