
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 02:51:32 CST 2015
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java.io.*;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 02:51:32 CST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\051\004\000\002\051\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\011\005\000\002\052\005\000\002\052\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\012\000\002\032\011\000\002\037\004" +
    "\000\002\037\002\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\005\010\000\002\005\010\000\002" +
    "\005\004\000\002\040\004\000\002\040\006\000\002\040" +
    "\005\000\002\040\007\000\002\040\002\000\002\041\004" +
    "\000\002\041\002\000\002\042\013\000\002\042\013\000" +
    "\002\042\011\000\002\042\011\000\002\042\002\000\002" +
    "\043\005\000\002\043\007\000\002\043\002\000\002\044" +
    "\004\000\002\044\002\000\002\045\006\000\002\045\005" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\002\000\002\047\004\000\002\047\002\000\002" +
    "\020\011\000\002\020\011\000\002\021\007\000\002\021" +
    "\011\000\002\022\012\000\002\022\011\000\002\023\013" +
    "\000\002\023\006\000\002\023\012\000\002\023\002\000" +
    "\002\024\011\000\002\024\010\000\002\025\015\000\002" +
    "\025\014\000\002\025\014\000\002\025\013\000\002\025" +
    "\012\000\002\025\010\000\002\026\005\000\002\026\007" +
    "\000\002\026\007\000\002\026\007\000\002\026\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\033\004\000\002\033\002\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\005\000\002\030\005\000\002\031\004\000\002" +
    "\031\002\000\002\034\006\000\002\034\006\000\002\034" +
    "\006\000\002\034\006\000\002\034\006\000\002\034\006" +
    "\000\002\035\004\000\002\035\002\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\004\000\002\015\004\000\002\015\003\000\002\017" +
    "\005\000\002\017\005\000\002\013\003\000\002\013\003" +
    "\000\002\014\006\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\014\003\012\004\005\005\014\006\011\020" +
    "\007\001\002\000\004\002\u0170\001\002\000\016\003\uffee" +
    "\007\uffee\016\uffee\021\uffee\030\uffee\045\uffee\001\002\000" +
    "\004\002\uffff\001\002\000\004\007\u016b\001\002\000\014" +
    "\003\012\004\005\005\014\006\011\020\007\001\002\000" +
    "\016\003\uffed\007\uffed\016\uffed\021\uffed\030\uffed\045\uffed" +
    "\001\002\000\004\044\u0169\001\002\000\006\007\015\016" +
    "\016\001\002\000\016\003\uffec\007\uffec\016\uffec\021\uffec" +
    "\030\uffec\045\uffec\001\002\000\004\027\u0159\001\002\000" +
    "\004\027\017\001\002\000\004\030\020\001\002\000\004" +
    "\023\021\001\002\000\034\003\043\004\005\005\014\006" +
    "\011\007\040\010\035\012\030\013\046\017\032\024\ufffc" +
    "\032\047\033\042\041\022\001\002\000\004\007\107\001" +
    "\002\000\036\022\uff87\024\uff87\030\uff87\031\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\001\002\000\004\007\u0139\001\002" +
    "\000\034\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\017\ufff5\024\ufff5\032\ufff5\033\ufff5" +
    "\041\ufff5\001\002\000\034\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\017\ufff8\024\ufff8" +
    "\032\ufff8\033\ufff8\041\ufff8\001\002\000\034\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6" +
    "\017\ufff6\024\ufff6\032\ufff6\033\ufff6\041\ufff6\001\002\000" +
    "\006\003\u012d\027\u012e\001\002\000\034\003\043\004\005" +
    "\005\014\006\011\007\040\010\035\012\030\013\046\017" +
    "\032\024\ufffc\032\047\033\042\041\022\001\002\000\014" +
    "\007\040\025\u0126\026\u0128\027\063\047\060\001\002\000" +
    "\034\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\013\ufff7\017\ufff7\024\ufff7\032\ufff7\033\ufff7\041" +
    "\ufff7\001\002\000\004\044\u0125\001\002\000\006\003\u0106" +
    "\027\u0107\001\002\000\004\024\336\001\002\000\034\003" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa" +
    "\013\ufffa\017\ufffa\024\ufffa\032\ufffa\033\ufffa\041\ufffa\001" +
    "\002\000\044\003\321\021\110\022\uff88\024\uff88\027\322" +
    "\030\uff88\031\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\001\002" +
    "\000\034\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\012\ufff9\013\ufff9\017\ufff9\024\ufff9\032\ufff9\033\ufff9" +
    "\041\ufff9\001\002\000\004\027\310\001\002\000\034\003" +
    "\043\004\005\005\014\006\011\007\040\010\035\012\030" +
    "\013\046\017\032\032\047\033\042\041\022\044\301\001" +
    "\002\000\010\031\267\034\265\041\266\001\002\000\034" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012" +
    "\ufffb\013\ufffb\017\ufffb\024\ufffb\032\ufffb\033\ufffb\041\ufffb" +
    "\001\002\000\006\003\101\027\102\001\002\000\004\027" +
    "\051\001\002\000\034\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\013\ufff4\017\ufff4\024\ufff4\032" +
    "\ufff4\033\ufff4\041\ufff4\001\002\000\004\026\052\001\002" +
    "\000\006\030\054\045\053\001\002\000\010\007\040\027" +
    "\063\047\060\001\002\000\004\044\055\001\002\000\034" +
    "\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\017\uffbf\024\uffbf\032\uffbf\033\uffbf\041\uffbf" +
    "\001\002\000\030\022\uff7e\024\uff7e\030\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\001\002\000\010\030\077\035\072\036\073\001\002\000" +
    "\030\022\uff7f\024\uff7f\030\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\001\002\000" +
    "\030\022\uff80\024\uff80\030\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\042\uff80\043\uff80\044\uff80\045\uff80\001\002\000" +
    "\030\022\uff7d\024\uff7d\030\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\001\002\000" +
    "\010\007\040\027\063\047\060\001\002\000\030\022\uff83" +
    "\024\uff83\030\uff83\035\uff83\036\uff83\037\065\040\066\042" +
    "\uff83\043\uff83\044\uff83\045\uff83\001\002\000\010\007\040" +
    "\027\063\047\060\001\002\000\010\007\040\027\063\047" +
    "\060\001\002\000\030\022\uff81\024\uff81\030\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\001\002\000\030\022\uff82\024\uff82\030\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\001\002\000\010\030\074\035\072\036\073\001\002" +
    "\000\010\007\040\027\063\047\060\001\002\000\010\007" +
    "\040\027\063\047\060\001\002\000\030\022\uff7c\024\uff7c" +
    "\030\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\001\002\000\030\022\uff84\024\uff84" +
    "\030\uff84\035\uff84\036\uff84\037\065\040\066\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\001\002\000\030\022\uff85\024\uff85" +
    "\030\uff85\035\uff85\036\uff85\037\065\040\066\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\001\002\000\004\044\100\001\002" +
    "\000\034\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\012\uffbe\013\uffbe\017\uffbe\024\uffbe\032\uffbe\033\uffbe" +
    "\041\uffbe\001\002\000\004\030\261\001\002\000\014\004" +
    "\005\005\014\006\011\007\107\044\106\001\002\000\004" +
    "\044\245\001\002\000\006\031\234\034\233\001\002\000" +
    "\004\007\204\001\002\000\016\007\040\025\113\026\115" +
    "\027\117\044\120\047\060\001\002\000\020\021\110\030" +
    "\uff88\031\uff88\034\uff88\041\uff88\044\uff88\045\uff88\001\002" +
    "\000\010\007\040\027\063\047\060\001\002\000\010\022" +
    "\112\035\072\036\073\001\002\000\036\022\uff86\024\uff86" +
    "\030\uff86\031\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\001\002" +
    "\000\004\042\201\001\002\000\010\035\072\036\073\042" +
    "\133\001\002\000\004\042\176\001\002\000\004\044\142" +
    "\001\002\000\014\007\040\025\113\026\115\027\117\047" +
    "\060\001\002\000\004\030\121\001\002\000\004\023\122" +
    "\001\002\000\034\003\043\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\046\017\032\024\ufffc\032\047" +
    "\033\042\041\022\001\002\000\004\024\124\001\002\000" +
    "\034\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\012\uffb1\013\uffb1\017\uffb1\024\uffb1\032\uffb1\033\uffb1\041" +
    "\uffb1\001\002\000\012\030\074\035\072\036\073\042\133" +
    "\001\002\000\004\030\127\001\002\000\010\030\uff92\043" +
    "\131\044\uff92\001\002\000\006\030\uff94\044\uff94\001\002" +
    "\000\014\007\040\025\113\026\115\027\117\047\060\001" +
    "\002\000\006\030\uff93\044\uff93\001\002\000\014\007\040" +
    "\025\134\026\136\027\063\047\060\001\002\000\010\030" +
    "\uff92\043\131\044\uff92\001\002\000\014\030\uff92\035\072" +
    "\036\073\043\131\044\uff92\001\002\000\010\030\uff92\043" +
    "\131\044\uff92\001\002\000\006\030\uff97\044\uff97\001\002" +
    "\000\006\030\uff99\044\uff99\001\002\000\006\030\uff98\044" +
    "\uff98\001\002\000\010\007\107\030\146\041\144\001\002" +
    "\000\004\030\172\001\002\000\004\007\107\001\002\000" +
    "\010\031\154\034\152\041\153\001\002\000\004\023\147" +
    "\001\002\000\034\003\043\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\046\017\032\024\ufffc\032\047" +
    "\033\042\041\022\001\002\000\004\024\151\001\002\000" +
    "\034\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\012\uffb2\013\uffb2\017\uffb2\024\uffb2\032\uffb2\033\uffb2\041" +
    "\uffb2\001\002\000\010\007\040\027\063\047\060\001\002" +
    "\000\006\030\uff9a\045\160\001\002\000\014\007\040\025" +
    "\155\026\157\027\063\047\060\001\002\000\006\030\uff9a" +
    "\045\160\001\002\000\012\030\uff9a\035\072\036\073\045" +
    "\160\001\002\000\006\030\uff9a\045\160\001\002\000\006" +
    "\007\107\041\144\001\002\000\004\030\uff9e\001\002\000" +
    "\004\030\uff9b\001\002\000\004\030\uffa1\001\002\000\004" +
    "\030\uff9f\001\002\000\004\030\uff9d\001\002\000\012\030" +
    "\uff9a\035\072\036\073\045\160\001\002\000\004\030\uffa0" +
    "\001\002\000\006\030\uff9a\045\160\001\002\000\004\030" +
    "\uff9c\001\002\000\004\023\173\001\002\000\034\003\043" +
    "\004\005\005\014\006\011\007\040\010\035\012\030\013" +
    "\046\017\032\024\ufffc\032\047\033\042\041\022\001\002" +
    "\000\004\024\175\001\002\000\034\003\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\017\uffb4" +
    "\024\uffb4\032\uffb4\033\uffb4\041\uffb4\001\002\000\010\007" +
    "\040\027\063\047\060\001\002\000\014\030\uff92\035\072" +
    "\036\073\043\131\044\uff92\001\002\000\006\030\uff95\044" +
    "\uff95\001\002\000\010\007\040\027\063\047\060\001\002" +
    "\000\014\030\uff92\035\072\036\073\043\131\044\uff92\001" +
    "\002\000\006\030\uff96\044\uff96\001\002\000\012\021\110" +
    "\031\224\044\uff88\045\uff88\001\002\000\006\044\uffa2\045" +
    "\206\001\002\000\004\007\107\001\002\000\004\044\uffaf" +
    "\001\002\000\004\044\uffa3\001\002\000\006\031\213\034" +
    "\212\001\002\000\010\007\040\027\063\047\060\001\002" +
    "\000\014\007\040\025\214\026\216\027\063\047\060\001" +
    "\002\000\006\044\uffa2\045\206\001\002\000\012\035\072" +
    "\036\073\044\uffa2\045\206\001\002\000\006\044\uffa2\045" +
    "\206\001\002\000\004\044\uffa4\001\002\000\004\044\uffa7" +
    "\001\002\000\004\044\uffa5\001\002\000\012\035\072\036" +
    "\073\044\uffa2\045\206\001\002\000\004\044\uffa6\001\002" +
    "\000\014\007\040\025\225\026\227\027\063\047\060\001" +
    "\002\000\006\044\uffa2\045\206\001\002\000\012\035\072" +
    "\036\073\044\uffa2\045\206\001\002\000\006\044\uffa2\045" +
    "\206\001\002\000\004\044\uffac\001\002\000\004\044\uffae" +
    "\001\002\000\004\044\uffad\001\002\000\010\007\040\027" +
    "\063\047\060\001\002\000\014\007\040\025\235\026\237" +
    "\027\063\047\060\001\002\000\006\044\uffa2\045\206\001" +
    "\002\000\012\035\072\036\073\044\uffa2\045\206\001\002" +
    "\000\006\044\uffa2\045\206\001\002\000\004\044\uffa8\001" +
    "\002\000\004\044\uffab\001\002\000\004\044\uffa9\001\002" +
    "\000\012\035\072\036\073\044\uffa2\045\206\001\002\000" +
    "\004\044\uffaa\001\002\000\014\007\040\025\113\026\115" +
    "\027\117\047\060\001\002\000\004\044\247\001\002\000" +
    "\010\007\107\030\251\041\144\001\002\000\004\030\255" +
    "\001\002\000\004\023\252\001\002\000\034\003\043\004" +
    "\005\005\014\006\011\007\040\010\035\012\030\013\046" +
    "\017\032\024\ufffc\032\047\033\042\041\022\001\002\000" +
    "\004\024\254\001\002\000\034\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\017\uffb3\024" +
    "\uffb3\032\uffb3\033\uffb3\041\uffb3\001\002\000\004\023\256" +
    "\001\002\000\034\003\043\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\046\017\032\024\ufffc\032\047" +
    "\033\042\041\022\001\002\000\004\024\260\001\002\000" +
    "\034\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\012\uffb5\013\uffb5\017\uffb5\024\uffb5\032\uffb5\033\uffb5\041" +
    "\uffb5\001\002\000\004\023\262\001\002\000\034\003\043" +
    "\004\005\005\014\006\011\007\040\010\035\012\030\013" +
    "\046\017\032\024\ufffc\032\047\033\042\041\022\001\002" +
    "\000\004\024\264\001\002\000\034\003\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0\017\uffb0" +
    "\024\uffb0\032\uffb0\033\uffb0\041\uffb0\001\002\000\010\007" +
    "\040\027\063\047\060\001\002\000\004\044\304\001\002" +
    "\000\014\007\040\025\270\026\272\027\063\047\060\001" +
    "\002\000\006\044\273\045\275\001\002\000\012\035\072" +
    "\036\073\044\273\045\275\001\002\000\006\044\273\045" +
    "\275\001\002\000\034\003\uff8b\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\012\uff8b\013\uff8b\017\uff8b\024\uff8b\032" +
    "\uff8b\033\uff8b\041\uff8b\001\002\000\034\003\uff8e\004\uff8e" +
    "\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\013\uff8e\017" +
    "\uff8e\024\uff8e\032\uff8e\033\uff8e\041\uff8e\001\002\000\006" +
    "\003\276\007\107\001\002\000\004\044\301\001\002\000" +
    "\006\031\267\034\265\001\002\000\034\003\uff8c\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c\017" +
    "\uff8c\024\uff8c\032\uff8c\033\uff8c\041\uff8c\001\002\000\034" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\012" +
    "\uff8d\013\uff8d\017\uff8d\024\uff8d\032\uff8d\033\uff8d\041\uff8d" +
    "\001\002\000\034\003\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\012\uff91\013\uff91\017\uff91\024\uff91\032\uff91" +
    "\033\uff91\041\uff91\001\002\000\034\003\uff8f\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f\017\uff8f" +
    "\024\uff8f\032\uff8f\033\uff8f\041\uff8f\001\002\000\034\003" +
    "\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a" +
    "\013\uff8a\017\uff8a\024\uff8a\032\uff8a\033\uff8a\041\uff8a\001" +
    "\002\000\012\035\072\036\073\044\273\045\275\001\002" +
    "\000\034\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\012\uff90\013\uff90\017\uff90\024\uff90\032\uff90\033\uff90" +
    "\041\uff90\001\002\000\034\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\017\uffef\024\uffef" +
    "\032\uffef\033\uffef\041\uffef\001\002\000\004\046\311\001" +
    "\002\000\004\045\312\001\002\000\004\007\314\001\002" +
    "\000\004\030\317\001\002\000\006\021\110\030\315\001" +
    "\002\000\004\044\316\001\002\000\034\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\017" +
    "\uffc1\024\uffc1\032\uffc1\033\uffc1\041\uffc1\001\002\000\004" +
    "\044\320\001\002\000\034\003\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\017\uffc0\024\uffc0" +
    "\032\uffc0\033\uffc0\041\uffc0\001\002\000\004\030\335\001" +
    "\002\000\016\007\040\025\323\026\326\027\063\030\uffc4" +
    "\047\060\001\002\000\006\030\uffc2\045\327\001\002\000" +
    "\012\030\uffc2\035\072\036\073\045\327\001\002\000\004" +
    "\030\332\001\002\000\006\030\uffc2\045\327\001\002\000" +
    "\016\007\040\025\323\026\326\027\063\030\uffc4\047\060" +
    "\001\002\000\004\030\uffc5\001\002\000\004\030\uffc3\001" +
    "\002\000\030\022\uffc9\024\uffc9\030\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\001" +
    "\002\000\004\030\uffc7\001\002\000\004\030\uffc6\001\002" +
    "\000\030\022\uffc8\024\uffc8\030\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\001\002" +
    "\000\014\002\uffcf\004\005\005\014\006\011\020\341\001" +
    "\002\000\006\003\371\007\370\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\343\007\342\001\002\000\004\027" +
    "\351\001\002\000\004\030\344\001\002\000\004\023\345" +
    "\001\002\000\034\003\043\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\046\017\032\024\ufffc\032\047" +
    "\033\042\041\022\001\002\000\004\024\347\001\002\000" +
    "\014\002\uffcf\004\005\005\014\006\011\020\341\001\002" +
    "\000\004\002\uffd0\001\002\000\012\004\005\005\014\006" +
    "\011\030\uffcc\001\002\000\004\030\363\001\002\000\004" +
    "\007\354\001\002\000\010\021\355\030\uffca\045\356\001" +
    "\002\000\004\022\361\001\002\000\012\004\005\005\014" +
    "\006\011\030\uffcc\001\002\000\004\030\uffce\001\002\000" +
    "\004\030\uffcb\001\002\000\006\030\uffca\045\356\001\002" +
    "\000\004\030\uffcd\001\002\000\004\023\364\001\002\000" +
    "\034\003\043\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\046\017\032\024\ufffc\032\047\033\042\041" +
    "\022\001\002\000\004\024\366\001\002\000\014\002\uffcf" +
    "\004\005\005\014\006\011\020\341\001\002\000\004\002" +
    "\uffd2\001\002\000\004\027\377\001\002\000\004\030\372" +
    "\001\002\000\004\023\373\001\002\000\034\003\043\004" +
    "\005\005\014\006\011\007\040\010\035\012\030\013\046" +
    "\017\032\024\ufffc\032\047\033\042\041\022\001\002\000" +
    "\004\024\375\001\002\000\014\002\uffcf\004\005\005\014" +
    "\006\011\020\341\001\002\000\004\002\uffd1\001\002\000" +
    "\012\004\005\005\014\006\011\030\uffcc\001\002\000\004" +
    "\030\u0101\001\002\000\004\023\u0102\001\002\000\034\003" +
    "\043\004\005\005\014\006\011\007\040\010\035\012\030" +
    "\013\046\017\032\024\ufffc\032\047\033\042\041\022\001" +
    "\002\000\004\024\u0104\001\002\000\014\002\uffcf\004\005" +
    "\005\014\006\011\020\341\001\002\000\004\002\uffd3\001" +
    "\002\000\004\030\u0120\001\002\000\014\007\040\025\113" +
    "\026\115\027\117\047\060\001\002\000\004\030\u0109\001" +
    "\002\000\004\023\u010a\001\002\000\034\003\043\004\005" +
    "\005\014\006\011\007\040\010\035\012\030\013\046\017" +
    "\032\024\ufffc\032\047\033\042\041\022\001\002\000\004" +
    "\024\u010c\001\002\000\036\003\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\u010d\012\uffb8\013\uffb8\017\uffb8" +
    "\024\uffb8\032\uffb8\033\uffb8\041\uffb8\001\002\000\006\010" +
    "\u0110\023\u010f\001\002\000\034\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\017\uffbd\024" +
    "\uffbd\032\uffbd\033\uffbd\041\uffbd\001\002\000\034\003\043" +
    "\004\005\005\014\006\011\007\040\010\035\012\030\013" +
    "\046\017\032\024\ufffc\032\047\033\042\041\022\001\002" +
    "\000\006\003\u0111\027\u0112\001\002\000\004\030\u0119\001" +
    "\002\000\014\007\040\025\113\026\115\027\117\047\060" +
    "\001\002\000\004\030\u0114\001\002\000\004\023\u0115\001" +
    "\002\000\034\003\043\004\005\005\014\006\011\007\040" +
    "\010\035\012\030\013\046\017\032\024\ufffc\032\047\033" +
    "\042\041\022\001\002\000\004\024\u0117\001\002\000\036" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\u010d\012\uffb8\013\uffb8\017\uffb8\024\uffb8\032\uffb8\033\uffb8" +
    "\041\uffb8\001\002\000\034\003\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\017\uffbb\024\uffbb" +
    "\032\uffbb\033\uffbb\041\uffbb\001\002\000\004\023\u011a\001" +
    "\002\000\034\003\043\004\005\005\014\006\011\007\040" +
    "\010\035\012\030\013\046\017\032\024\ufffc\032\047\033" +
    "\042\041\022\001\002\000\004\024\u011c\001\002\000\036" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\u010d\012\uffb8\013\uffb8\017\uffb8\024\uffb8\032\uffb8\033\uffb8" +
    "\041\uffb8\001\002\000\034\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\017\uffb9\024\uffb9" +
    "\032\uffb9\033\uffb9\041\uffb9\001\002\000\004\024\u011f\001" +
    "\002\000\034\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\012\uffba\013\uffba\017\uffba\024\uffba\032\uffba\033" +
    "\uffba\041\uffba\001\002\000\004\023\u0121\001\002\000\034" +
    "\003\043\004\005\005\014\006\011\007\040\010\035\012" +
    "\030\013\046\017\032\024\ufffc\032\047\033\042\041\022" +
    "\001\002\000\004\024\u0123\001\002\000\036\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\u010d\012\uffb8" +
    "\013\uffb8\017\uffb8\024\uffb8\032\uffb8\033\uffb8\041\uffb8\001" +
    "\002\000\034\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\017\uffbc\024\uffbc\032\uffbc\033" +
    "\uffbc\041\uffbc\001\002\000\034\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\017\ufff3\024" +
    "\ufff3\032\ufff3\033\ufff3\041\ufff3\001\002\000\004\044\u012b" +
    "\001\002\000\010\035\072\036\073\044\u012a\001\002\000" +
    "\004\044\u0129\001\002\000\034\003\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\017\ufff0\024" +
    "\ufff0\032\ufff0\033\ufff0\041\ufff0\001\002\000\034\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\017\ufff2\024\ufff2\032\ufff2\033\ufff2\041\ufff2\001\002" +
    "\000\034\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\017\ufff1\024\ufff1\032\ufff1\033\ufff1" +
    "\041\ufff1\001\002\000\004\024\ufffd\001\002\000\004\030" +
    "\u0134\001\002\000\014\007\040\025\113\026\115\027\117" +
    "\047\060\001\002\000\004\030\u0130\001\002\000\004\023" +
    "\u0131\001\002\000\034\003\043\004\005\005\014\006\011" +
    "\007\040\010\035\012\030\013\046\017\032\024\ufffc\032" +
    "\047\033\042\041\022\001\002\000\004\024\u0133\001\002" +
    "\000\034\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\012\uffb7\013\uffb7\017\uffb7\024\uffb7\032\uffb7\033\uffb7" +
    "\041\uffb7\001\002\000\004\023\u0135\001\002\000\034\003" +
    "\043\004\005\005\014\006\011\007\040\010\035\012\030" +
    "\013\046\017\032\024\ufffc\032\047\033\042\041\022\001" +
    "\002\000\004\024\u0137\001\002\000\034\003\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\017" +
    "\uffb6\024\uffb6\032\uffb6\033\uffb6\041\uffb6\001\002\000\004" +
    "\044\u0156\001\002\000\012\021\u013e\031\u013f\044\uff88\045" +
    "\uff88\001\002\000\006\044\uffe8\045\uffe8\001\002\000\006" +
    "\044\uffe9\045\u013c\001\002\000\004\007\u0139\001\002\000" +
    "\004\044\uffea\001\002\000\012\007\040\022\u0144\027\063" +
    "\047\060\001\002\000\014\007\040\025\u0140\026\u0142\027" +
    "\063\047\060\001\002\000\006\044\uffe6\045\uffe6\001\002" +
    "\000\012\035\072\036\073\044\uffe7\045\uffe7\001\002\000" +
    "\006\044\uffe5\045\uffe5\001\002\000\010\022\u0151\035\072" +
    "\036\073\001\002\000\004\031\u0145\001\002\000\004\023" +
    "\u0146\001\002\000\014\007\040\025\u0147\026\u0149\027\063" +
    "\047\060\001\002\000\006\024\uffe1\045\u014d\001\002\000" +
    "\012\024\uffe1\035\072\036\073\045\u014d\001\002\000\006" +
    "\024\uffe1\045\u014d\001\002\000\004\024\u014b\001\002\000" +
    "\006\044\uffe3\045\uffe3\001\002\000\004\024\uffde\001\002" +
    "\000\014\007\040\025\u0147\026\u0149\027\063\047\060\001" +
    "\002\000\004\024\uffe2\001\002\000\004\024\uffe0\001\002" +
    "\000\004\024\uffdf\001\002\000\010\031\u0152\044\uff86\045" +
    "\uff86\001\002\000\004\023\u0153\001\002\000\014\007\040" +
    "\025\u0147\026\u0149\027\063\047\060\001\002\000\004\024" +
    "\u0155\001\002\000\006\044\uffe4\045\uffe4\001\002\000\034" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\017\uffeb\024\uffeb\032\uffeb\033\uffeb\041\uffeb" +
    "\001\002\000\004\044\u0158\001\002\000\034\003\uff89\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89" +
    "\017\uff89\024\uff89\032\uff89\033\uff89\041\uff89\001\002\000" +
    "\012\004\005\005\014\006\011\030\uffd6\001\002\000\012" +
    "\007\u015f\021\u0160\030\uffd4\045\u0161\001\002\000\004\030" +
    "\u015c\001\002\000\004\044\u015d\001\002\000\014\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\020\uffdd\001\002\000\004\030" +
    "\uffda\001\002\000\010\021\u0166\030\uffd4\045\u0161\001\002" +
    "\000\004\022\u0163\001\002\000\012\004\005\005\014\006" +
    "\011\030\uffd6\001\002\000\004\030\uffd5\001\002\000\006" +
    "\030\uffd4\045\u0161\001\002\000\004\030\uffd9\001\002\000" +
    "\004\030\uffd8\001\002\000\004\022\u0167\001\002\000\006" +
    "\030\uffd4\045\u0161\001\002\000\004\030\uffd7\001\002\000" +
    "\014\003\uffdb\004\uffdb\005\uffdb\006\uffdb\020\uffdb\001\002" +
    "\000\004\002\001\001\002\000\004\027\u016c\001\002\000" +
    "\012\004\005\005\014\006\011\030\uffd6\001\002\000\004" +
    "\030\u016e\001\002\000\004\044\u016f\001\002\000\014\003" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\020\uffdc\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\012\002\003\003\005\005\007\012\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\u0169\003\005\005\007\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\030" +
    "\011\044\012\023\013\043\014\022\016\036\017\040\020" +
    "\032\021\025\022\024\024\026\025\047\045\033\051\035" +
    "\001\001\000\006\013\u0156\014\022\001\001\000\002\001" +
    "\001\000\012\013\u0139\014\022\032\u013a\052\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\030\011\044\012\023\013\043" +
    "\014\022\016\036\017\040\020\032\021\025\022\024\024" +
    "\026\025\047\045\033\051\u012b\001\001\000\016\006\u0126" +
    "\007\063\010\060\013\055\014\022\045\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\306\011\044\012\023" +
    "\013\043\014\022\016\036\017\040\020\032\021\025\022" +
    "\024\024\026\025\047\045\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\056\007\063\010\060\013\055\014\022\045\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\070\007\063\010\060\013\055" +
    "\014\022\045\061\001\001\000\002\001\001\000\012\010" +
    "\067\013\055\014\022\045\061\001\001\000\012\010\066" +
    "\013\055\014\022\045\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\075\010\060" +
    "\013\055\014\022\045\061\001\001\000\014\007\074\010" +
    "\060\013\055\014\022\045\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\104\013\103" +
    "\014\022\026\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\204\014\022\001\001\000\020\006\113" +
    "\007\063\010\060\013\055\014\022\034\115\045\061\001" +
    "\001\000\002\001\001\000\016\006\110\007\063\010\060" +
    "\013\055\014\022\045\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\124\007\063\010" +
    "\060\013\055\014\022\034\125\045\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\011\044\012" +
    "\023\013\043\014\022\016\036\017\040\020\032\021\025" +
    "\022\024\024\026\025\047\045\033\051\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\127\001\001\000\002\001\001\000" +
    "\020\006\113\007\063\010\060\013\055\014\022\034\131" +
    "\045\061\001\001\000\002\001\001\000\016\006\134\007" +
    "\063\010\060\013\055\014\022\045\061\001\001\000\004" +
    "\035\140\001\001\000\004\035\137\001\001\000\004\035" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\144\014\022\030\142\001\001\000" +
    "\002\001\001\000\006\013\167\014\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\011\044\012" +
    "\023\013\043\014\022\016\036\017\040\020\032\021\025" +
    "\022\024\024\026\025\047\045\033\051\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\165\007\063" +
    "\010\060\013\055\014\022\045\061\001\001\000\004\031" +
    "\164\001\001\000\016\006\155\007\063\010\060\013\055" +
    "\014\022\045\061\001\001\000\004\031\163\001\001\000" +
    "\004\031\162\001\001\000\004\031\160\001\001\000\010" +
    "\013\144\014\022\030\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\166\001\001\000\002\001\001\000" +
    "\004\031\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\030\011\044\012\023\013\043\014\022\016" +
    "\036\017\040\020\032\021\025\022\024\024\026\025\047" +
    "\045\033\051\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\176\007\063\010\060\013\055\014\022" +
    "\045\061\001\001\000\004\035\177\001\001\000\002\001" +
    "\001\000\016\006\201\007\063\010\060\013\055\014\022" +
    "\045\061\001\001\000\004\035\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\206\001\001\000\010" +
    "\013\210\014\022\027\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\221\007\063" +
    "\010\060\013\055\014\022\045\061\001\001\000\016\006" +
    "\214\007\063\010\060\013\055\014\022\045\061\001\001" +
    "\000\004\033\220\001\001\000\004\033\217\001\001\000" +
    "\004\033\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\222\001\001\000\002\001" +
    "\001\000\016\006\225\007\063\010\060\013\055\014\022" +
    "\045\061\001\001\000\004\033\231\001\001\000\004\033" +
    "\230\001\001\000\004\033\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\242\007" +
    "\063\010\060\013\055\014\022\045\061\001\001\000\016" +
    "\006\235\007\063\010\060\013\055\014\022\045\061\001" +
    "\001\000\004\033\241\001\001\000\004\033\240\001\001" +
    "\000\004\033\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\243\001\001\000\002" +
    "\001\001\000\020\006\113\007\063\010\060\013\055\014" +
    "\022\034\245\045\061\001\001\000\002\001\001\000\010" +
    "\013\144\014\022\030\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\030\011\044\012\023\013\043" +
    "\014\022\016\036\017\040\020\032\021\025\022\024\024" +
    "\026\025\047\045\033\051\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\030\011" +
    "\044\012\023\013\043\014\022\016\036\017\040\020\032" +
    "\021\025\022\024\024\026\025\047\045\033\051\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\030\011\044\012\023\013\043\014\022\016" +
    "\036\017\040\020\032\021\025\022\024\024\026\025\047" +
    "\045\033\051\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\304\007\063\010\060\013\055\014\022" +
    "\045\061\001\001\000\002\001\001\000\016\006\270\007" +
    "\063\010\060\013\055\014\022\045\061\001\001\000\004" +
    "\015\302\001\001\000\004\015\301\001\001\000\004\015" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\276\014\022\016\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\323\007\063\010\060\013\055\014\022" +
    "\045\061\046\324\001\001\000\004\047\333\001\001\000" +
    "\004\047\332\001\001\000\002\001\001\000\004\047\327" +
    "\001\001\000\020\006\323\007\063\010\060\013\055\014" +
    "\022\045\061\046\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\336\042\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\030\011\044\012\023\013\043\014\022\016\036\017" +
    "\040\020\032\021\025\022\024\024\026\025\047\045\033" +
    "\051\345\001\001\000\002\001\001\000\006\012\336\042" +
    "\347\001\001\000\002\001\001\000\006\012\352\043\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\356\001\001\000\002\001\001\000\006\012\352\043\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\030\011\044\012\023\013\043\014\022\016\036\017" +
    "\040\020\032\021\025\022\024\024\026\025\047\045\033" +
    "\051\364\001\001\000\002\001\001\000\006\012\336\042" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\011\044\012" +
    "\023\013\043\014\022\016\036\017\040\020\032\021\025" +
    "\022\024\024\026\025\047\045\033\051\373\001\001\000" +
    "\002\001\001\000\006\012\336\042\375\001\001\000\002" +
    "\001\001\000\006\012\352\043\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\030\011\044\012\023" +
    "\013\043\014\022\016\036\017\040\020\032\021\025\022" +
    "\024\024\026\025\047\045\033\051\u0102\001\001\000\002" +
    "\001\001\000\006\012\336\042\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\113\007\063\010\060" +
    "\013\055\014\022\034\u0107\045\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\030\011\044\012\023" +
    "\013\043\014\022\016\036\017\040\020\032\021\025\022" +
    "\024\024\026\025\047\045\033\051\u010a\001\001\000\002" +
    "\001\001\000\004\023\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\030\011\044\012\023\013\043" +
    "\014\022\016\036\017\040\020\032\021\025\022\024\024" +
    "\026\025\047\045\033\051\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\113\007\063\010\060\013" +
    "\055\014\022\034\u0112\045\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\030\011\044\012\023\013" +
    "\043\014\022\016\036\017\040\020\032\021\025\022\024" +
    "\024\026\025\047\045\033\051\u0115\001\001\000\002\001" +
    "\001\000\004\023\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\030\011\044\012\023\013\043\014" +
    "\022\016\036\017\040\020\032\021\025\022\024\024\026" +
    "\025\047\045\033\051\u011a\001\001\000\002\001\001\000" +
    "\004\023\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\030\011" +
    "\044\012\023\013\043\014\022\016\036\017\040\020\032" +
    "\021\025\022\024\024\026\025\047\045\033\051\u0121\001" +
    "\001\000\002\001\001\000\004\023\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\113\007\063\010\060\013\055\014\022\034\u012e" +
    "\045\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\030\011\044\012\023\013\043\014\022\016\036" +
    "\017\040\020\032\021\025\022\024\024\026\025\047\045" +
    "\033\051\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\030\011\044\012\023\013" +
    "\043\014\022\016\036\017\040\020\032\021\025\022\024" +
    "\024\026\025\047\045\033\051\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\u0139\014" +
    "\022\032\u013a\052\u013c\001\001\000\002\001\001\000\016" +
    "\006\u0142\007\063\010\060\013\055\014\022\045\061\001" +
    "\001\000\016\006\u0140\007\063\010\060\013\055\014\022" +
    "\045\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\u0147\007\063\010\060\013\055\014" +
    "\022\036\u0149\045\061\001\001\000\004\037\u014f\001\001" +
    "\000\004\037\u014e\001\001\000\004\037\u014b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\u0147\007\063\010\060\013\055\014\022\036\u014d\045" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\u0147\007\063\010\060\013\055\014\022\036\u0153\045\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0159" +
    "\040\u015a\001\001\000\004\041\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u0164\001\001\000\002\001\001\000\006\012" +
    "\u0159\040\u0161\001\001\000\002\001\001\000\004\041\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0159\040\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    AnalizadorLexico lexer;
    
    public Programa generarPrograma;
    public  ListaTipos lista = new ListaTipos();

    public Programa getGenerarPrograma() {
        return this.generarPrograma;
    }
    
    public ListaTipos getListaVariables(){
        return this.lista;
    }

    
    public AnalizadorSintactico(AnalizadorLexico lex) {
      super(lex);
      lexer = lex;
    }

    public void syntax_error(Symbol s)
    {
     

        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operacion_aritmetica3 ::= parentesisIzquierdo operacion_aritmetica parentesisDerecho 
            {
              OperacionAritmetica3 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new OperacionAritmetica3(new parentesisIzquierdo(), o, new parentesisDerecho());    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operacion_aritmetica3 ::= llamado_funcion 
            {
              OperacionAritmetica3 RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncion lf = (LlamadoAFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica3(lf);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacion_aritmetica3 ::= variable 
            {
              OperacionAritmetica3 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica3(v);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacion_aritmetica3 ::= entero 
            {
              OperacionAritmetica3 RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		entero e = (entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica3(new entero(e._entero, e.linea, e.columna));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacion_aritmetica2 ::= operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;
		int o3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica3 o3 = (OperacionAritmetica3)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica2(o3); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacion_aritmetica2 ::= operacion_aritmetica2 operadorDivision operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica2 o2 = (OperacionAritmetica2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int o3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica3 o3 = (OperacionAritmetica3)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica2(o2, new operadorDivision(), o3); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion_aritmetica2 ::= operacion_aritmetica2 operadorMultiplicacion operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica2 o2 = (OperacionAritmetica2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int o3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica3 o3 = (OperacionAritmetica3)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica2(o2, new operadorMultiplicacion(), o3); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion_aritmetica ::= operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica2 o2 = (OperacionAritmetica2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica(o2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacion_aritmetica ::= operacion_aritmetica operadorResta operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica2 o2 = (OperacionAritmetica2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica(o1, new operadorResta(), o2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_aritmetica ::= operacion_aritmetica operadorSuma operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica2 o2 = (OperacionAritmetica2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OperacionAritmetica(o1, new operadorSuma(), o2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // elemento_array ::= nombreVariable corcheteIzquierdo operacion_aritmetica corcheteDerecho 
            {
              ElementoDeUnArreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new ElementoDeUnArreglo(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elemento_array",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variable ::= elemento_array 
            {
              Variable RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ElementoDeUnArreglo array = (ElementoDeUnArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(array);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable ::= nombreVariable 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new nombreVariable(id._nombreVariable, id.linea, id.columna));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // incrementarDecrementarVariable ::= operadorIncrementoDecremento variable puntoYComa 
            {
              IncrementarDecrementarVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  RESULT = new IncrementarDecrementarVariable(new operadorIncrementoDecremento(), v, new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incrementarDecrementarVariable",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // incrementarDecrementarVariable ::= variable operadorIncrementoDecremento puntoYComa 
            {
              IncrementarDecrementarVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new IncrementarDecrementarVariable(v, new operadorIncrementoDecremento(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incrementarDecrementarVariable",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion_variable_coma ::= puntoYComa 
            {
              AsignacionVariableComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asignacion_variable_coma ::= coma asignacion_variable 
            {
              AsignacionVariableComa RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariable av = (AsignacionVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariableComa( new coma(), av);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignacion_variable ::= error puntoYComa 
            {
              AsignacionVariable RESULT =null;
		 RESULT = new AsignacionVariable(new puntoYComa()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion_variable ::= variable igual constStr asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa ac = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariable(v, new igual(), new constStr(css._constStr, css.linea, css.columna) , ac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion_variable ::= variable igual constChar asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa ac = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariable(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna) , ac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion_variable ::= variable operadorAritmeticoIgual operacion_aritmetica asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa av = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariable(v, new operadorAritmeticoIgual(), o, av);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion_variable ::= variable igual operacion_aritmetica asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica oa = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa av = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariable(v, new igual(), oa,av);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion_operador_logico ::= 
            {
              CondicionOperadorLogico RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_operador_logico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion_operador_logico ::= operadorLogico condicion 
            {
              CondicionOperadorLogico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new CondicionOperadorLogico( new operadorLogico(), c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_operador_logico",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= parentesisIzquierdo condicion parentesisDerecho condicion_operador_logico 
            {
              Condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(new parentesisIzquierdo(), c, new parentesisDerecho(), col); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= constStr operadorRelacional operacion_aritmetica condicion_operador_logico 
            {
              Condicion RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(new constStr(css._constStr, css.linea, css.columna), new operadorRelacional(), o1, col); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion ::= constChar operadorRelacional operacion_aritmetica condicion_operador_logico 
            {
              Condicion RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(new constChar(csc._constChar, csc.linea, csc.columna), new operadorRelacional(), o1, col); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicion ::= operacion_aritmetica operadorRelacional constStr condicion_operador_logico 
            {
              Condicion RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(o1, new operadorRelacional(), new constStr(css._constStr, css.linea, css.columna), col); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion ::= operacion_aritmetica operadorRelacional constChar condicion_operador_logico 
            {
              Condicion RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(o1, new operadorRelacional(), new constChar(csc._constChar, csc.linea, csc.columna), col); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= operacion_aritmetica operadorRelacional operacion_aritmetica condicion_operador_logico 
            {
              Condicion RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		OperacionAritmetica o1 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o2 = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		CondicionOperadorLogico col = (CondicionOperadorLogico)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Condicion(o1, new operadorRelacional(), o2, col);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_actualizacion_coma ::= 
            {
              ForActualizacionComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_actualizacion_coma ::= coma for_actualizacion 
            {
              ForActualizacionComa RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ForActualizacionComa(new coma(), fa ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_actualizacion ::= operadorIncrementoDecremento variable for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(new operadorIncrementoDecremento(), v, fac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_actualizacion ::= variable operadorIncrementoDecremento for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new operadorIncrementoDecremento(), fac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_actualizacion ::= variable igual constStr for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_actualizacion ::= variable igual constChar for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_actualizacion ::= variable operadorAritmeticoIgual operacion_aritmetica for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new operadorAritmeticoIgual(), o, fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_actualizacion ::= variable igual operacion_aritmetica for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), o, fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_inicializacion_coma ::= 
            {
              ForInicializacionComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_inicializacion_coma ::= coma for_inicializacion2 
            {
              ForInicializacionComa RESULT =null;
		int fic2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fic2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacion2 fic2 = (ForInicializacion2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT= new ForInicializacionComa(new coma(), fic2);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_inicializacion2 ::= variable igual constStr for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_inicializacion2 ::= variable igual constChar for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_inicializacion2 ::= variable operadorAritmeticoIgual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new operadorAritmeticoIgual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_inicializacion2 ::= variable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), o, fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_inicializacion ::= variable igual constStr for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_inicializacion ::= variable igual constChar for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_inicializacion ::= variable operadorAritmeticoIgual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new operadorAritmeticoIgual(), o, fic);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_inicializacion ::= variable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_inicializacion ::= tipo nombreVariable igual constStr for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_inicializacion ::= tipo nombreVariable igual constChar for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_inicializacion ::= tipo nombreVariable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_inicializacion ::= tipo variable for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fi = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t,v,fi);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _for ::= FOR error parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   System.out.println("ERROR");RESULT = new For(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _for ::= FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _for ::= FOR parentesisIzquierdo puntoYComa condicion puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _for ::= FOR parentesisIzquierdo for_inicializacion puntoYComa condicion puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		ForInicializacion fi = (ForInicializacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _for ::= FOR parentesisIzquierdo puntoYComa condicion puntoYComa for_actualizacion parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   RESULT = new For( new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _for ::= FOR parentesisIzquierdo for_inicializacion puntoYComa condicion puntoYComa for_actualizacion parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              For RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		ForInicializacion fi = (ForInicializacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		   RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha() ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _while ::= WHILE error parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              While RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 System.out.println("ERROR");RESULT = new While(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _while ::= WHILE parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigos llaveDerecha 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new While(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else ::= 
            {
              Else RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else ::= ELSE IF error parentesisDerecho llaveIzquierda codigos llaveDerecha else 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("ERROR"); RESULT = new Else( new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else ::= ELSE llaveIzquierda codigos llaveDerecha 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Else(new llaveIzquierda(), c, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else ::= ELSE IF parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigos llaveDerecha else 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Else(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _if ::= IF error parentesisDerecho llaveIzquierda codigos llaveDerecha else 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new If(new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _if ::= IF parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigos llaveDerecha else 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos cg = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new If(new parentesisIzquierdo() , c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print ::= printf parentesisIzquierdo constStr coma operacion_aritmetica parentesisDerecho puntoYComa 
            {
              Printf RESULT =null;
		int cstsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cstsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		constStr csts = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new coma(), o, new parentesisDerecho(), new puntoYComa()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print ::= printf parentesisIzquierdo constStr parentesisDerecho puntoYComa 
            {
              Printf RESULT =null;
		int cstsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cstsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		constStr csts = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // scans ::= scanf parentesisIzquierdo parametroScanf coma elemento_array parentesisDerecho puntoYComa 
            {
              Scanf RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		parametroScanf p = (parametroScanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		ElementoDeUnArreglo e = (ElementoDeUnArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), e, new parentesisDerecho(), new puntoYComa());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // scans ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa 
            {
              Scanf RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		parametroScanf p = (parametroScanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho(), new puntoYComa());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamado_funcion_parametros_coma ::= 
            {
              LlamadoAFuncionParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamado_funcion_parametros_coma ::= coma llamado_funcion_parametros 
            {
              LlamadoAFuncionParametrosComa RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametros lp = (LlamadoAFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new LlamadoAFuncionParametrosComa(new coma(), lp);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamado_funcion_parametros ::= 
            {
              LlamadoAFuncionParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamado_funcion_parametros ::= constStr llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(new constStr(css._constStr, css.linea, css.columna),fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamado_funcion_parametros ::= constChar llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(new constChar(csc._constChar, csc.linea, csc.columna),fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamado_funcion_parametros ::= operacion_aritmetica llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(o,fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamado_funcion ::= nombreVariable error parentesisDerecho 
            {
              LlamadoAFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  System.out.println("ERROR");  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho());    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamado_funcion ::= nombreVariable parentesisIzquierdo llamado_funcion_parametros parentesisDerecho 
            {
              LlamadoAFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int llfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int llfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		LlamadoAFuncionParametros llfp = (LlamadoAFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), llfp, new parentesisDerecho()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones_parametros_coma ::= 
            {
              FuncionesParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros_coma",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funciones_parametros_coma ::= coma funciones_parametros 
            {
              FuncionesParametrosComa RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new FuncionesParametrosComa(new coma(), fp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros_coma",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funciones_parametros ::= 
            {
              FuncionesParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones_parametros ::= tipo nombreVariable corcheteIzquierdo corcheteDerecho funciones_parametros_coma 
            {
              FuncionesParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametrosComa fpc = (FuncionesParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funciones_parametros ::= tipo nombreVariable funciones_parametros_coma 
            {
              FuncionesParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametrosComa fpc = (FuncionesParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funciones ::= 
            {
              Funciones RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funciones ::= VOID error parentesisDerecho llaveIzquierda codigos llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  System.out.println("ERROR"); RESULT = new Funciones(new VOID(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funciones ::= tipo error parentesisDerecho llaveIzquierda codigos llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  System.out.println("ERROR"); RESULT = new Funciones(t, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funciones ::= VOID nombreVariable parentesisIzquierdo funciones_parametros parentesisDerecho llaveIzquierda codigos llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Funciones(new VOID(),new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones ::= tipo nombreVariable parentesisIzquierdo funciones_parametros parentesisDerecho llaveIzquierda codigos llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Funciones(t,new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_funcion_parametros_coma ::= 
            {
              DeclaracionFuncionParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros_coma",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_funcion_parametros_coma ::= coma declaracion_funcion_parametros 
            {
              DeclaracionFuncionParametrosComa RESULT =null;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametros dfp = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new DeclaracionFuncionParametrosComa(new coma(), dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros_coma",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_funcion_parametros ::= 
            {
              DeclaracionFuncionParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_funcion_parametros ::= tipo nombreVariable corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_funcion_parametros ::= tipo nombreVariable declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), dfp);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_funcion_parametros ::= tipo corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t,new corcheteIzquierdo(), new corcheteDerecho(), dfp);         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_funcion_parametros ::= tipo declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t,dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_funcion ::= error puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		  System.out.println("ERROR");  RESULT = new DeclaracionFuncion(new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_funcion ::= VOID nombreVariable parentesisIzquierdo declaracion_funcion_parametros parentesisDerecho puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dfsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dfsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		DeclaracionFuncionParametros dfs = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new DeclaracionFuncion(new VOID(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfs, new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_funcion ::= tipo nombreVariable parentesisIzquierdo declaracion_funcion_parametros parentesisDerecho puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		DeclaracionFuncionParametros dfp = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new DeclaracionFuncion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfp, new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicializacion_arreglo ::= constStr inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		InicializacionArregloComa i = (InicializacionArregloComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new InicializacionArreglo(new constStr(css._constStr, css.linea, css.columna),i);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicializacion_arreglo ::= constChar inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		InicializacionArregloComa i = (InicializacionArregloComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new InicializacionArreglo(new constChar(csc._constChar, csc.linea, csc.columna),i);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicializacion_arreglo ::= operacion_aritmetica inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		InicializacionArregloComa i = (InicializacionArregloComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new InicializacionArreglo(o,i);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicializacion_arreglo_coma ::= 
            {
              InicializacionArregloComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicializacion_arreglo_coma ::= coma inicializacion_arreglo 
            {
              InicializacionArregloComa RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		InicializacionArreglo i = (InicializacionArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new InicializacionArregloComa( new coma(), i); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_variables ::= nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo llaveDerecha 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int iAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		InicializacionArreglo iA = (InicializacionArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_variables ::= nombreVariable corcheteIzquierdo operacion_aritmetica corcheteDerecho igual llaveIzquierda inicializacion_arreglo llaveDerecha 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		InicializacionArreglo ia = (InicializacionArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_variables ::= nombreVariable igual constStr 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_variables ::= nombreVariable igual constChar 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_variables ::= nombreVariable igual operacion_aritmetica 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_variables ::= variable 
            {
              ListaVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(v);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_variables ::= lista_variables 
            {
              DeclaracionVariables RESULT =null;
		int lvsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariables lvs = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new DeclaracionVariables(); RESULT.add( lvs); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variables",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_variables ::= lista_variables coma declaracion_variables 
            {
              DeclaracionVariables RESULT =null;
		int lvsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lvsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		ListaVariables lvs = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dvsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionVariables dvs = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 dvs.add(lvs); RESULT = dvs; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variables",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_variable ::= tipo declaracion_variables puntoYComa 
            {
              DeclaracionVariable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		DeclaracionVariables dv = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DeclaracionVariable(t,dv, new puntoYComa() );   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new CharTipo();   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new StringTipo();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new IntegerTipo(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= error codigo 
            {
              Codigo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("ERROR"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= RETURN constStr puntoYComa 
            {
              Codigo RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr cst = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Codigo( new RETURN(), new constStr(cst._constStr, cst.linea, cst.columna), new puntoYComa() ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= RETURN constChar puntoYComa 
            {
              Codigo RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Codigo(new RETURN(), new constChar(csc._constChar, csc.linea, csc.columna), new puntoYComa()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= RETURN operacion_aritmetica puntoYComa 
            {
              Codigo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Codigo(new RETURN(), o, new puntoYComa()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= llamado_funcion puntoYComa 
            {
              Codigo RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		LlamadoAFuncion lf = (LlamadoAFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Codigo(lf,new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= _for 
            {
              Codigo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = f;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= _if 
            {
              Codigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = i;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= _while 
            {
              Codigo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = w;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= scans 
            {
              Codigo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Scanf s = (Scanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= print 
            {
              Codigo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Printf p = (Printf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = p; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= incrementarDecrementarVariable 
            {
              Codigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		IncrementarDecrementarVariable i = (IncrementarDecrementarVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = i;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= asignacion_variable 
            {
              Codigo RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariable av = (AsignacionVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = av;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= declaracion_variable 
            {
              Codigo RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = dv;  parser.lista.add(dv); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigos ::= 
            {
              Codigos RESULT =null;
		   RESULT = new Codigos();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigos",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigos ::= codigo codigos 
            {
              Codigos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigos cs = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  cs.add(c); RESULT = cs; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigos",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= tipo MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigos llaveDerecha funciones 
            {
              MainClass RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigos c = (Codigos)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Programa RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new Programa(m);  parser.generarPrograma = RESULT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= declaracion_funcion programa 
            {
              Programa RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new Programa(df, p);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

