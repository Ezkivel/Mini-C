
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 03 12:13:12 CST 2015
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 03 12:13:12 CST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\003" +
    "\014\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\002\000\002\005\005\000\002\006\004\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\007" +
    "\004\000\002\007\002\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\015\012" +
    "\000\002\016\013\000\002\016\006\000\002\016\002\000" +
    "\002\017\011\000\002\020\015\000\002\020\014\000\002" +
    "\020\014\000\002\020\013\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\022\004\000\002\022\002\000" +
    "\002\023\006\000\002\023\006\000\002\023\004\000\002" +
    "\024\004\000\002\024\002\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\004\006\001\002\000\004\002\266\001" +
    "\002\000\004\002\000\001\002\000\004\014\007\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\004\020\012\001\002\000\020\004\020\005\027\006\024" +
    "\010\013\011\016\015\ufff8\036\023\001\002\000\004\024" +
    "\260\001\002\000\022\004\020\005\027\006\024\010\013" +
    "\011\016\015\ufff8\021\ufff8\036\023\001\002\000\022\004" +
    "\020\005\027\006\024\010\013\011\016\015\ufff8\021\ufff8" +
    "\036\023\001\002\000\004\024\166\001\002\000\022\004" +
    "\020\005\027\006\024\010\013\011\016\015\ufff8\021\ufff8" +
    "\036\023\001\002\000\004\005\150\001\002\000\022\004" +
    "\020\005\027\006\024\010\013\011\016\015\ufff8\021\ufff8" +
    "\036\023\001\002\000\022\004\020\005\027\006\024\010" +
    "\013\011\016\015\ufff8\021\ufff8\036\023\001\002\000\004" +
    "\042\145\001\002\000\004\024\066\001\002\000\022\004" +
    "\020\005\027\006\024\010\013\011\016\015\ufff8\021\ufff8" +
    "\036\023\001\002\000\004\015\061\001\002\000\006\026" +
    "\031\031\030\001\002\000\010\005\034\024\037\041\035" +
    "\001\002\000\014\005\034\022\036\023\040\024\037\041" +
    "\035\001\002\000\020\025\uffe9\032\uffe9\033\uffe9\034\050" +
    "\035\051\042\uffe9\043\uffe9\001\002\000\010\032\044\033" +
    "\045\042\056\001\002\000\020\025\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\042\uffe4\043\uffe4\001\002\000\020\025" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\042\uffe5\043\uffe5" +
    "\001\002\000\004\042\055\001\002\000\010\005\034\024" +
    "\037\041\035\001\002\000\004\042\042\001\002\000\020" +
    "\025\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\042\uffe6\043" +
    "\uffe6\001\002\000\022\004\uffed\005\uffed\006\uffed\010\uffed" +
    "\011\uffed\015\uffed\021\uffed\036\uffed\001\002\000\010\025" +
    "\046\032\044\033\045\001\002\000\010\005\034\024\037" +
    "\041\035\001\002\000\010\005\034\024\037\041\035\001" +
    "\002\000\020\025\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\042\uffe3\043\uffe3\001\002\000\020\025\uffea\032\uffea\033" +
    "\uffea\034\050\035\051\042\uffea\043\uffea\001\002\000\010" +
    "\005\034\024\037\041\035\001\002\000\010\005\034\024" +
    "\037\041\035\001\002\000\020\025\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\042\uffe7\043\uffe7\001\002\000\020\025" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\042\uffe8\043\uffe8" +
    "\001\002\000\020\025\uffeb\032\uffeb\033\uffeb\034\050\035" +
    "\051\042\uffeb\043\uffeb\001\002\000\022\004\uffee\005\uffee" +
    "\006\uffee\010\uffee\011\uffee\015\uffee\021\uffee\036\uffee\001" +
    "\002\000\022\004\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0" +
    "\015\ufff0\021\ufff0\036\ufff0\001\002\000\010\032\044\033" +
    "\045\042\060\001\002\000\022\004\uffef\005\uffef\006\uffef" +
    "\010\uffef\011\uffef\015\uffef\021\uffef\036\uffef\001\002\000" +
    "\004\041\062\001\002\000\004\042\063\001\002\000\004" +
    "\021\064\001\002\000\004\002\uffff\001\002\000\006\015" +
    "\ufff9\021\ufff9\001\002\000\014\005\067\022\071\023\074" +
    "\024\072\041\070\001\002\000\004\037\134\001\002\000" +
    "\004\037\131\001\002\000\004\037\126\001\002\000\014" +
    "\005\067\022\071\023\074\024\072\041\070\001\002\000" +
    "\004\025\102\001\002\000\004\037\075\001\002\000\004" +
    "\005\076\001\002\000\010\025\uffc3\040\100\042\uffc3\001" +
    "\002\000\006\025\uffc6\042\uffc6\001\002\000\014\005\067" +
    "\022\071\023\074\024\072\041\070\001\002\000\006\025" +
    "\uffc4\042\uffc4\001\002\000\004\020\103\001\002\000\020" +
    "\004\020\005\027\006\024\010\013\011\016\021\ufff8\036" +
    "\023\001\002\000\004\021\105\001\002\000\024\004\uffdf" +
    "\005\uffdf\006\uffdf\007\106\010\uffdf\011\uffdf\015\uffdf\021" +
    "\uffdf\036\uffdf\001\002\000\006\006\111\020\110\001\002" +
    "\000\022\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\015" +
    "\uffe2\021\uffe2\036\uffe2\001\002\000\020\004\020\005\027" +
    "\006\024\010\013\011\016\021\ufff8\036\023\001\002\000" +
    "\004\024\112\001\002\000\014\005\067\022\071\023\074" +
    "\024\072\041\070\001\002\000\004\025\114\001\002\000" +
    "\004\020\115\001\002\000\020\004\020\005\027\006\024" +
    "\010\013\011\016\021\ufff8\036\023\001\002\000\004\021" +
    "\117\001\002\000\024\004\uffdf\005\uffdf\006\uffdf\007\106" +
    "\010\uffdf\011\uffdf\015\uffdf\021\uffdf\036\uffdf\001\002\000" +
    "\022\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\015\uffe1" +
    "\021\uffe1\036\uffe1\001\002\000\004\021\122\001\002\000" +
    "\022\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\015\uffe0" +
    "\021\uffe0\036\uffe0\001\002\000\004\025\124\001\002\000" +
    "\010\025\uffc3\040\100\042\uffc3\001\002\000\006\025\uffc5" +
    "\042\uffc5\001\002\000\004\005\127\001\002\000\010\025" +
    "\uffc3\040\100\042\uffc3\001\002\000\006\025\uffc7\042\uffc7" +
    "\001\002\000\004\005\132\001\002\000\010\025\uffc3\040" +
    "\100\042\uffc3\001\002\000\006\025\uffc8\042\uffc8\001\002" +
    "\000\012\005\135\022\137\023\140\041\136\001\002\000" +
    "\010\025\uffc3\040\100\042\uffc3\001\002\000\010\025\uffc3" +
    "\040\100\042\uffc3\001\002\000\010\025\uffc3\040\100\042" +
    "\uffc3\001\002\000\010\025\uffc3\040\100\042\uffc3\001\002" +
    "\000\006\025\uffc9\042\uffc9\001\002\000\006\025\uffca\042" +
    "\uffca\001\002\000\006\025\uffcb\042\uffcb\001\002\000\006" +
    "\025\uffcc\042\uffcc\001\002\000\022\004\uffec\005\uffec\006" +
    "\uffec\010\uffec\011\uffec\015\uffec\021\uffec\036\uffec\001\002" +
    "\000\006\015\ufffe\021\ufffe\001\002\000\006\015\ufffd\021" +
    "\ufffd\001\002\000\010\026\153\042\ufff1\043\154\001\002" +
    "\000\004\042\152\001\002\000\022\004\ufff7\005\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\015\ufff7\021\ufff7\036\ufff7\001\002" +
    "\000\014\005\034\022\160\023\161\024\037\041\035\001" +
    "\002\000\004\005\150\001\002\000\004\042\ufff6\001\002" +
    "\000\004\042\ufff2\001\002\000\012\032\044\033\045\042" +
    "\ufff1\043\154\001\002\000\006\042\ufff1\043\154\001\002" +
    "\000\006\042\ufff1\043\154\001\002\000\004\042\ufff3\001" +
    "\002\000\004\042\ufff4\001\002\000\004\042\ufff5\001\002" +
    "\000\006\015\ufffb\021\ufffb\001\002\000\010\004\172\005" +
    "\171\042\167\001\002\000\014\005\067\022\071\023\074" +
    "\024\072\041\070\001\002\000\004\042\214\001\002\000" +
    "\004\026\205\001\002\000\004\005\173\001\002\000\004" +
    "\026\174\001\002\000\014\005\034\022\176\023\177\024" +
    "\037\041\035\001\002\000\012\032\044\033\045\042\uffd2" +
    "\043\201\001\002\000\006\042\uffd2\043\201\001\002\000" +
    "\006\042\uffd2\043\201\001\002\000\004\042\uffd7\001\002" +
    "\000\006\004\172\005\171\001\002\000\004\042\uffd3\001" +
    "\002\000\004\042\uffd8\001\002\000\004\042\uffd9\001\002" +
    "\000\014\005\034\022\207\023\210\024\037\041\035\001" +
    "\002\000\012\032\044\033\045\042\uffd2\043\201\001\002" +
    "\000\006\042\uffd2\043\201\001\002\000\006\042\uffd2\043" +
    "\201\001\002\000\004\042\uffd4\001\002\000\004\042\uffd5" +
    "\001\002\000\004\042\uffd6\001\002\000\014\005\067\022" +
    "\071\023\074\024\072\041\070\001\002\000\004\042\216" +
    "\001\002\000\010\005\220\025\222\036\221\001\002\000" +
    "\004\025\237\001\002\000\006\026\232\031\231\001\002" +
    "\000\006\025\uffcd\043\227\001\002\000\004\020\223\001" +
    "\002\000\020\004\020\005\027\006\024\010\013\011\016" +
    "\021\ufff8\036\023\001\002\000\004\021\225\001\002\000" +
    "\022\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\015\uffdb" +
    "\021\uffdb\036\uffdb\001\002\000\004\025\uffcf\001\002\000" +
    "\006\005\220\036\221\001\002\000\004\025\uffce\001\002" +
    "\000\010\005\034\024\037\041\035\001\002\000\010\005" +
    "\034\024\037\041\035\001\002\000\012\025\uffcd\032\044" +
    "\033\045\043\227\001\002\000\004\025\uffd1\001\002\000" +
    "\012\025\uffcd\032\044\033\045\043\227\001\002\000\004" +
    "\025\uffd0\001\002\000\004\020\240\001\002\000\020\004" +
    "\020\005\027\006\024\010\013\011\016\021\ufff8\036\023" +
    "\001\002\000\004\021\242\001\002\000\022\004\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\011\uffdd\015\uffdd\021\uffdd\036\uffdd" +
    "\001\002\000\004\042\244\001\002\000\010\005\220\025" +
    "\246\036\221\001\002\000\004\025\252\001\002\000\004" +
    "\020\247\001\002\000\020\004\020\005\027\006\024\010" +
    "\013\011\016\021\ufff8\036\023\001\002\000\004\021\251" +
    "\001\002\000\022\004\uffda\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\015\uffda\021\uffda\036\uffda\001\002\000\004\020\253" +
    "\001\002\000\020\004\020\005\027\006\024\010\013\011" +
    "\016\021\ufff8\036\023\001\002\000\004\021\255\001\002" +
    "\000\022\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\015" +
    "\uffdc\021\uffdc\036\uffdc\001\002\000\006\015\ufffa\021\ufffa" +
    "\001\002\000\006\015\ufffc\021\ufffc\001\002\000\014\005" +
    "\067\022\071\023\074\024\072\041\070\001\002\000\004" +
    "\025\262\001\002\000\004\020\263\001\002\000\020\004" +
    "\020\005\027\006\024\010\013\011\016\021\ufff8\036\023" +
    "\001\002\000\004\021\265\001\002\000\022\004\uffde\005" +
    "\uffde\006\uffde\010\uffde\011\uffde\015\uffde\021\uffde\036\uffde" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\025\005" +
    "\021\010\020\011\013\015\014\017\016\020\024\001\001" +
    "\000\002\001\001\000\020\004\256\005\021\010\020\011" +
    "\013\015\014\017\016\020\024\001\001\000\020\004\255" +
    "\005\021\010\020\011\013\015\014\017\016\020\024\001" +
    "\001\000\002\001\001\000\020\004\164\005\021\010\020" +
    "\011\013\015\014\017\016\020\024\001\001\000\004\006" +
    "\150\001\001\000\020\004\146\005\021\010\020\011\013" +
    "\015\014\017\016\020\024\001\001\000\020\004\145\005" +
    "\021\010\020\011\013\015\014\017\016\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\064\005" +
    "\021\010\020\011\013\015\014\017\016\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\056\013" +
    "\031\014\040\001\001\000\010\012\032\013\031\014\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\042" +
    "\013\031\014\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\053" +
    "\014\040\001\001\000\006\013\046\014\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\052\001\001" +
    "\000\004\014\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\076\001\001\000\002\001\001\000\004\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\103\005\021\010\020\011\013\015\014\017\016\020\024" +
    "\001\001\000\002\001\001\000\004\016\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\120\005\021" +
    "\010\020\011\013\015\014\017\016\020\024\001\001\000" +
    "\002\001\001\000\004\025\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\115\005\021\010\020\011" +
    "\013\015\014\017\016\020\024\001\001\000\002\001\001" +
    "\000\004\016\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\143\001\001\000\004\026\142\001\001\000\004" +
    "\026\141\001\001\000\004\026\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\156\013\031\014\040\001\001\000\004\006" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\163\001\001\000\004\007\162\001\001\000\004\007" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\167\001\001\000" +
    "\004\025\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\174\013" +
    "\031\014\040\001\001\000\004\022\203\001\001\000\004" +
    "\022\202\001\001\000\004\022\177\001\001\000\002\001" +
    "\001\000\004\021\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\205\013\031\014" +
    "\040\001\001\000\004\022\212\001\001\000\004\022\211" +
    "\001\001\000\004\022\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\214\001\001" +
    "\000\002\001\001\000\004\023\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\225\001\001\000\002" +
    "\001\001\000\020\004\223\005\021\010\020\011\013\015" +
    "\014\017\016\020\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\227\001\001\000" +
    "\002\001\001\000\010\012\234\013\031\014\040\001\001" +
    "\000\010\012\232\013\031\014\040\001\001\000\004\024" +
    "\233\001\001\000\002\001\001\000\004\024\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\240\005" +
    "\021\010\020\011\013\015\014\017\016\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\247\005\021\010\020\011\013\015\014\017" +
    "\016\020\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\253\005\021\010\020\011" +
    "\013\015\014\017\016\020\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\263\005\021\010\020\011\013\015\014\017" +
    "\016\020\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Error Sintactico cerca de < " + t.getContenido() + " > linea " + t.getLinea() + ", columna " + t.getColumna(), null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CondicionOperadorLogico ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CondicionOperadorLogico ::= operadorLogico Condicion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condicion ::= parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condicion ::= constStr operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicion ::= constChar operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicion ::= entero operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condicion ::= nombreVariable operadorRelacional constStr CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Condicion ::= nombreVariable operadorRelacional constChar CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Condicion ::= nombreVariable operadorRelacional entero CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Condicion ::= nombreVariable operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ForActualizacionComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacionComa",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ForActualizacionComa ::= coma ForActualizacion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacionComa",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ForActualizacion ::= incrementoDecrementoVariable ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForActualizacion ::= nombreVariable operadorAritmeticoIgual OperacionAritmetica1 ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForActualizacion ::= nombreVariable igual OperacionAritmetica1 ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForInicializacionComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacionComa",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForInicializacionComa ::= coma ForInicializacion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacionComa",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ForInicializacion ::= nombreVariable igual constStr ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ForInicializacion ::= nombreVariable igual constChar ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ForInicializacion ::= nombreVariable igual OperacionAritmetica1 ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ForInicializacion ::= tipoVariable nombreVariable igual constStr ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ForInicializacion ::= tipoVariable nombreVariable igual constChar ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ForInicializacion ::= tipoVariable nombreVariable igual OperacionAritmetica1 ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // For ::= FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // For ::= FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("While",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Else ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Else ::= ELSE llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("If",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OperacionAritmetica3 ::= parentesisIzquierdo OperacionAritmetica1 parentesisDerecho 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OperacionAritmetica3 ::= nombreVariable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OperacionAritmetica3 ::= entero 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OperacionAritmetica2 ::= OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorDivision OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OperacionAritmetica1 ::= OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OperacionAritmetica1 ::= OperacionAritmetica1 operadorResta OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OperacionAritmetica1 ::= OperacionAritmetica1 operadorSuma OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IncrementarDecrementarVariable ::= incrementoDecrementoVariable puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncrementarDecrementarVariable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsignacionVariable ::= nombreVariable igual constStr puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AsignacionVariable ::= nombreVariable igual constChar puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AsignacionVariable ::= nombreVariable operadorAritmeticoIgual OperacionAritmetica1 puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AsignacionVariable ::= nombreVariable igual OperacionAritmetica1 puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListaVariablesComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariablesComa",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListaVariablesComa ::= coma ListaVariables 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariablesComa",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListaVariables ::= nombreVariable igual constStr ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListaVariables ::= nombreVariable igual constChar ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListaVariables ::= nombreVariable igual OperacionAritmetica1 ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListaVariables ::= nombreVariable ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionVariables ::= tipoVariable ListaVariables puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionVariables",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Codigo ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Codigo ::= For Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Codigo ::= If Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Codigo ::= While Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Codigo ::= IncrementarDecrementarVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Codigo ::= AsignacionVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Codigo ::= DeclaracionVariables Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda Codigo RETURN entero puntoYComa llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= Main 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

