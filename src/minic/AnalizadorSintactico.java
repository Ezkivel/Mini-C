
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 29 01:08:21 CST 2015
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 29 01:08:21 CST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\004\000\002\004\002\000\002\011\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\032\004\000\002\032\006\000\002\032\006\000\002" +
    "\032\006\000\002\032\013\000\002\032\012\000\002\033" +
    "\004\000\002\033\002\000\002\005\010\000\002\005\010" +
    "\000\002\005\004\000\002\041\004\000\002\041\006\000" +
    "\002\041\005\000\002\041\007\000\002\041\002\000\002" +
    "\042\004\000\002\042\002\000\002\043\013\000\002\043" +
    "\013\000\002\043\011\000\002\043\011\000\002\043\002" +
    "\000\002\044\005\000\002\044\007\000\002\044\002\000" +
    "\002\045\004\000\002\045\002\000\002\046\006\000\002" +
    "\046\005\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\002\000\002\050\004\000\002\050\002" +
    "\000\002\020\011\000\002\020\011\000\002\021\007\000" +
    "\002\021\011\000\002\022\012\000\002\022\011\000\002" +
    "\023\013\000\002\023\006\000\002\023\012\000\002\023" +
    "\002\000\002\024\011\000\002\024\010\000\002\025\015" +
    "\000\002\025\014\000\002\025\014\000\002\025\013\000" +
    "\002\025\012\000\002\025\010\000\002\026\005\000\002" +
    "\026\007\000\002\026\007\000\002\026\007\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\034\004\000\002\034\002\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\005\000\002\030\005\000\002\031\004" +
    "\000\002\031\002\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\036\004\000\002\036\002\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\004\000\002\015\004\000\002\015\003\000" +
    "\002\017\005\000\002\017\005\000\002\013\003\000\002" +
    "\013\003\000\002\014\006\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\040\004\000\002\040\002" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\014\003\012\004\005\005\014\006\011\020" +
    "\007\001\002\000\004\002\u017f\001\002\000\016\003\uffee" +
    "\007\uffee\016\uffee\021\uffee\030\uffee\045\uffee\001\002\000" +
    "\004\002\uffff\001\002\000\004\007\u017a\001\002\000\014" +
    "\003\012\004\005\005\014\006\011\020\007\001\002\000" +
    "\016\003\uffed\007\uffed\016\uffed\021\uffed\030\uffed\045\uffed" +
    "\001\002\000\004\044\u0178\001\002\000\006\007\015\016" +
    "\016\001\002\000\016\003\uffec\007\uffec\016\uffec\021\uffec" +
    "\030\uffec\045\uffec\001\002\000\004\027\u0168\001\002\000" +
    "\004\027\017\001\002\000\004\030\020\001\002\000\004" +
    "\023\021\001\002\000\034\003\042\004\005\005\014\006" +
    "\011\007\040\010\035\012\030\013\044\017\033\024\ufff0" +
    "\032\046\033\041\041\022\001\002\000\004\007\110\001" +
    "\002\000\036\022\uff8d\024\uff8d\030\uff8d\031\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\001\002\000\004\007\u0142\001\002" +
    "\000\034\003\042\004\005\005\014\006\011\007\040\010" +
    "\035\012\030\013\044\017\033\024\ufff0\032\046\033\041" +
    "\041\022\001\002\000\034\003\042\004\005\005\014\006" +
    "\011\007\040\010\035\012\030\013\044\017\033\024\ufff0" +
    "\032\046\033\041\041\022\001\002\000\034\003\042\004" +
    "\005\005\014\006\011\007\040\010\035\012\030\013\044" +
    "\017\033\024\ufff0\032\046\033\041\041\022\001\002\000" +
    "\006\003\u0134\027\u0135\001\002\000\004\024\u010c\001\002" +
    "\000\034\003\042\004\005\005\014\006\011\007\040\010" +
    "\035\012\030\013\044\017\033\024\ufff0\032\046\033\041" +
    "\041\022\001\002\000\014\007\040\025\u0102\026\u0104\027" +
    "\062\047\060\001\002\000\034\003\042\004\005\005\014" +
    "\006\011\007\040\010\035\012\030\013\044\017\033\024" +
    "\ufff0\032\046\033\041\041\022\001\002\000\006\003\342" +
    "\027\343\001\002\000\004\044\340\001\002\000\034\003" +
    "\042\004\005\005\014\006\011\007\040\010\035\012\030" +
    "\013\044\017\033\024\ufff0\032\046\033\041\041\022\001" +
    "\002\000\044\003\322\021\111\022\uff8e\024\uff8e\027\323" +
    "\030\uff8e\031\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\001\002" +
    "\000\004\027\311\001\002\000\036\003\042\004\005\005" +
    "\014\006\011\007\040\010\035\012\030\013\044\017\033" +
    "\024\ufff0\032\046\033\041\041\022\044\302\001\002\000" +
    "\010\031\270\034\266\041\267\001\002\000\006\003\102" +
    "\027\103\001\002\000\034\003\042\004\005\005\014\006" +
    "\011\007\040\010\035\012\030\013\044\017\033\024\ufff0" +
    "\032\046\033\041\041\022\001\002\000\004\027\051\001" +
    "\002\000\034\003\042\004\005\005\014\006\011\007\040" +
    "\010\035\012\030\013\044\017\033\024\ufff0\032\046\033" +
    "\041\041\022\001\002\000\004\024\ufff6\001\002\000\004" +
    "\026\052\001\002\000\006\030\054\045\053\001\002\000" +
    "\010\007\040\027\062\047\060\001\002\000\004\044\055" +
    "\001\002\000\034\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\012\uffc5\013\uffc5\017\uffc5\024\uffc5\032\uffc5" +
    "\033\uffc5\041\uffc5\001\002\000\030\022\uff7f\024\uff7f\030" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\001\002\000\010\030\077\035\073\036" +
    "\072\001\002\000\030\022\uff80\024\uff80\030\uff80\035\uff80" +
    "\036\uff80\037\uff80\040\uff80\042\uff80\043\uff80\044\uff80\045" +
    "\uff80\001\002\000\030\022\uff81\024\uff81\030\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\001\002\000\010\007\040\027\062\047\060\001\002" +
    "\000\030\022\uff7e\024\uff7e\030\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\001\002" +
    "\000\030\022\uff84\024\uff84\030\uff84\035\uff84\036\uff84\037" +
    "\065\040\066\042\uff84\043\uff84\044\uff84\045\uff84\001\002" +
    "\000\010\007\040\027\062\047\060\001\002\000\010\007" +
    "\040\027\062\047\060\001\002\000\030\022\uff82\024\uff82" +
    "\030\uff82\035\uff82\036\uff82\037\uff82\040\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\001\002\000\030\022\uff83\024\uff83" +
    "\030\uff83\035\uff83\036\uff83\037\uff83\040\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\001\002\000\010\030\074\035\073" +
    "\036\072\001\002\000\010\007\040\027\062\047\060\001" +
    "\002\000\010\007\040\027\062\047\060\001\002\000\030" +
    "\022\uff7d\024\uff7d\030\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\001\002\000\030" +
    "\022\uff86\024\uff86\030\uff86\035\uff86\036\uff86\037\065\040" +
    "\066\042\uff86\043\uff86\044\uff86\045\uff86\001\002\000\030" +
    "\022\uff85\024\uff85\030\uff85\035\uff85\036\uff85\037\065\040" +
    "\066\042\uff85\043\uff85\044\uff85\045\uff85\001\002\000\004" +
    "\044\100\001\002\000\034\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\017\uffc4\024\uffc4" +
    "\032\uffc4\033\uffc4\041\uffc4\001\002\000\004\024\ufffd\001" +
    "\002\000\004\030\262\001\002\000\014\004\005\005\014" +
    "\006\011\007\110\044\107\001\002\000\004\044\246\001" +
    "\002\000\006\031\235\034\234\001\002\000\004\007\205" +
    "\001\002\000\016\007\040\025\114\026\116\027\120\044" +
    "\121\047\060\001\002\000\020\021\111\030\uff8e\031\uff8e" +
    "\034\uff8e\041\uff8e\044\uff8e\045\uff8e\001\002\000\010\007" +
    "\040\027\062\047\060\001\002\000\010\022\113\035\073" +
    "\036\072\001\002\000\036\022\uff8c\024\uff8c\030\uff8c\031" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\001\002\000\004\042" +
    "\202\001\002\000\010\035\073\036\072\042\134\001\002" +
    "\000\004\042\177\001\002\000\004\044\143\001\002\000" +
    "\014\007\040\025\114\026\116\027\120\047\060\001\002" +
    "\000\004\030\122\001\002\000\004\023\123\001\002\000" +
    "\034\003\042\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\044\017\033\024\ufff0\032\046\033\041\041" +
    "\022\001\002\000\004\024\125\001\002\000\034\003\uffb7" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013" +
    "\uffb7\017\uffb7\024\uffb7\032\uffb7\033\uffb7\041\uffb7\001\002" +
    "\000\012\030\074\035\073\036\072\042\134\001\002\000" +
    "\004\030\130\001\002\000\010\030\uff98\043\132\044\uff98" +
    "\001\002\000\006\030\uff9a\044\uff9a\001\002\000\014\007" +
    "\040\025\114\026\116\027\120\047\060\001\002\000\006" +
    "\030\uff99\044\uff99\001\002\000\014\007\040\025\135\026" +
    "\137\027\062\047\060\001\002\000\010\030\uff98\043\132" +
    "\044\uff98\001\002\000\014\030\uff98\035\073\036\072\043" +
    "\132\044\uff98\001\002\000\010\030\uff98\043\132\044\uff98" +
    "\001\002\000\006\030\uff9d\044\uff9d\001\002\000\006\030" +
    "\uff9f\044\uff9f\001\002\000\006\030\uff9e\044\uff9e\001\002" +
    "\000\010\007\110\030\147\041\145\001\002\000\004\030" +
    "\173\001\002\000\004\007\110\001\002\000\010\031\155" +
    "\034\153\041\154\001\002\000\004\023\150\001\002\000" +
    "\034\003\042\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\044\017\033\024\ufff0\032\046\033\041\041" +
    "\022\001\002\000\004\024\152\001\002\000\034\003\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013" +
    "\uffb8\017\uffb8\024\uffb8\032\uffb8\033\uffb8\041\uffb8\001\002" +
    "\000\010\007\040\027\062\047\060\001\002\000\006\030" +
    "\uffa0\045\162\001\002\000\014\007\040\025\156\026\160" +
    "\027\062\047\060\001\002\000\006\030\uffa0\045\162\001" +
    "\002\000\012\030\uffa0\035\073\036\072\045\162\001\002" +
    "\000\006\030\uffa0\045\162\001\002\000\004\030\uffa4\001" +
    "\002\000\006\007\110\041\145\001\002\000\004\030\uffa1" +
    "\001\002\000\004\030\uffa7\001\002\000\004\030\uffa5\001" +
    "\002\000\004\030\uffa3\001\002\000\012\030\uffa0\035\073" +
    "\036\072\045\162\001\002\000\004\030\uffa6\001\002\000" +
    "\006\030\uffa0\045\162\001\002\000\004\030\uffa2\001\002" +
    "\000\004\023\174\001\002\000\034\003\042\004\005\005" +
    "\014\006\011\007\040\010\035\012\030\013\044\017\033" +
    "\024\ufff0\032\046\033\041\041\022\001\002\000\004\024" +
    "\176\001\002\000\034\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\012\uffba\013\uffba\017\uffba\024\uffba\032" +
    "\uffba\033\uffba\041\uffba\001\002\000\010\007\040\027\062" +
    "\047\060\001\002\000\014\030\uff98\035\073\036\072\043" +
    "\132\044\uff98\001\002\000\006\030\uff9b\044\uff9b\001\002" +
    "\000\010\007\040\027\062\047\060\001\002\000\014\030" +
    "\uff98\035\073\036\072\043\132\044\uff98\001\002\000\006" +
    "\030\uff9c\044\uff9c\001\002\000\012\021\111\031\225\044" +
    "\uff8e\045\uff8e\001\002\000\006\044\uffa8\045\207\001\002" +
    "\000\004\007\110\001\002\000\004\044\uffb5\001\002\000" +
    "\004\044\uffa9\001\002\000\006\031\214\034\213\001\002" +
    "\000\010\007\040\027\062\047\060\001\002\000\014\007" +
    "\040\025\215\026\217\027\062\047\060\001\002\000\006" +
    "\044\uffa8\045\207\001\002\000\012\035\073\036\072\044" +
    "\uffa8\045\207\001\002\000\006\044\uffa8\045\207\001\002" +
    "\000\004\044\uffaa\001\002\000\004\044\uffad\001\002\000" +
    "\004\044\uffab\001\002\000\012\035\073\036\072\044\uffa8" +
    "\045\207\001\002\000\004\044\uffac\001\002\000\014\007" +
    "\040\025\226\026\230\027\062\047\060\001\002\000\006" +
    "\044\uffa8\045\207\001\002\000\012\035\073\036\072\044" +
    "\uffa8\045\207\001\002\000\006\044\uffa8\045\207\001\002" +
    "\000\004\044\uffb2\001\002\000\004\044\uffb4\001\002\000" +
    "\004\044\uffb3\001\002\000\010\007\040\027\062\047\060" +
    "\001\002\000\014\007\040\025\236\026\240\027\062\047" +
    "\060\001\002\000\006\044\uffa8\045\207\001\002\000\012" +
    "\035\073\036\072\044\uffa8\045\207\001\002\000\006\044" +
    "\uffa8\045\207\001\002\000\004\044\uffae\001\002\000\004" +
    "\044\uffb1\001\002\000\004\044\uffaf\001\002\000\012\035" +
    "\073\036\072\044\uffa8\045\207\001\002\000\004\044\uffb0" +
    "\001\002\000\014\007\040\025\114\026\116\027\120\047" +
    "\060\001\002\000\004\044\250\001\002\000\010\007\110" +
    "\030\252\041\145\001\002\000\004\030\256\001\002\000" +
    "\004\023\253\001\002\000\034\003\042\004\005\005\014" +
    "\006\011\007\040\010\035\012\030\013\044\017\033\024" +
    "\ufff0\032\046\033\041\041\022\001\002\000\004\024\255" +
    "\001\002\000\034\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\012\uffb9\013\uffb9\017\uffb9\024\uffb9\032\uffb9" +
    "\033\uffb9\041\uffb9\001\002\000\004\023\257\001\002\000" +
    "\034\003\042\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\044\017\033\024\ufff0\032\046\033\041\041" +
    "\022\001\002\000\004\024\261\001\002\000\034\003\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\017\uffbb\024\uffbb\032\uffbb\033\uffbb\041\uffbb\001\002" +
    "\000\004\023\263\001\002\000\034\003\042\004\005\005" +
    "\014\006\011\007\040\010\035\012\030\013\044\017\033" +
    "\024\ufff0\032\046\033\041\041\022\001\002\000\004\024" +
    "\265\001\002\000\034\003\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\012\uffb6\013\uffb6\017\uffb6\024\uffb6\032" +
    "\uffb6\033\uffb6\041\uffb6\001\002\000\010\007\040\027\062" +
    "\047\060\001\002\000\004\044\305\001\002\000\014\007" +
    "\040\025\271\026\273\027\062\047\060\001\002\000\006" +
    "\044\274\045\276\001\002\000\012\035\073\036\072\044" +
    "\274\045\276\001\002\000\006\044\274\045\276\001\002" +
    "\000\034\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\012\uff91\013\uff91\017\uff91\024\uff91\032\uff91\033\uff91" +
    "\041\uff91\001\002\000\034\003\uff94\004\uff94\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\012\uff94\013\uff94\017\uff94\024\uff94" +
    "\032\uff94\033\uff94\041\uff94\001\002\000\006\003\277\007" +
    "\110\001\002\000\004\044\302\001\002\000\006\031\270" +
    "\034\266\001\002\000\034\003\uff92\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\012\uff92\013\uff92\017\uff92\024\uff92" +
    "\032\uff92\033\uff92\041\uff92\001\002\000\034\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93" +
    "\017\uff93\024\uff93\032\uff93\033\uff93\041\uff93\001\002\000" +
    "\034\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\012\uff97\013\uff97\017\uff97\024\uff97\032\uff97\033\uff97\041" +
    "\uff97\001\002\000\034\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\012\uff95\013\uff95\017\uff95\024\uff95\032" +
    "\uff95\033\uff95\041\uff95\001\002\000\034\003\uff90\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\012\uff90\013\uff90\017" +
    "\uff90\024\uff90\032\uff90\033\uff90\041\uff90\001\002\000\012" +
    "\035\073\036\072\044\274\045\276\001\002\000\034\003" +
    "\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96" +
    "\013\uff96\017\uff96\024\uff96\032\uff96\033\uff96\041\uff96\001" +
    "\002\000\004\024\ufff1\001\002\000\004\046\312\001\002" +
    "\000\004\045\313\001\002\000\004\007\315\001\002\000" +
    "\004\030\320\001\002\000\006\021\111\030\316\001\002" +
    "\000\004\044\317\001\002\000\034\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\017\uffc7" +
    "\024\uffc7\032\uffc7\033\uffc7\041\uffc7\001\002\000\004\044" +
    "\321\001\002\000\034\003\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\012\uffc6\013\uffc6\017\uffc6\024\uffc6\032" +
    "\uffc6\033\uffc6\041\uffc6\001\002\000\004\030\336\001\002" +
    "\000\016\007\040\025\324\026\327\027\062\030\uffca\047" +
    "\060\001\002\000\006\030\uffc8\045\330\001\002\000\012" +
    "\030\uffc8\035\073\036\072\045\330\001\002\000\004\030" +
    "\333\001\002\000\006\030\uffc8\045\330\001\002\000\016" +
    "\007\040\025\324\026\327\027\062\030\uffca\047\060\001" +
    "\002\000\004\030\uffcb\001\002\000\004\030\uffc9\001\002" +
    "\000\030\022\uffcf\024\uffcf\030\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\001\002" +
    "\000\004\030\uffcd\001\002\000\004\030\uffcc\001\002\000" +
    "\030\022\uffce\024\uffce\030\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\042\uffce\043\uffce\044\uffce\045\uffce\001\002\000" +
    "\004\024\ufffc\001\002\000\034\003\042\004\005\005\014" +
    "\006\011\007\040\010\035\012\030\013\044\017\033\024" +
    "\ufff0\032\046\033\041\041\022\001\002\000\004\024\ufff5" +
    "\001\002\000\004\030\374\001\002\000\014\007\040\025" +
    "\114\026\116\027\120\047\060\001\002\000\004\030\345" +
    "\001\002\000\004\023\346\001\002\000\034\003\042\004" +
    "\005\005\014\006\011\007\040\010\035\012\030\013\044" +
    "\017\033\024\ufff0\032\046\033\041\041\022\001\002\000" +
    "\004\024\350\001\002\000\036\003\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\351\012\uffbe\013\uffbe\017" +
    "\uffbe\024\uffbe\032\uffbe\033\uffbe\041\uffbe\001\002\000\006" +
    "\010\354\023\353\001\002\000\034\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\017\uffc3" +
    "\024\uffc3\032\uffc3\033\uffc3\041\uffc3\001\002\000\034\003" +
    "\042\004\005\005\014\006\011\007\040\010\035\012\030" +
    "\013\044\017\033\024\ufff0\032\046\033\041\041\022\001" +
    "\002\000\006\003\355\027\356\001\002\000\004\030\365" +
    "\001\002\000\014\007\040\025\114\026\116\027\120\047" +
    "\060\001\002\000\004\030\360\001\002\000\004\023\361" +
    "\001\002\000\034\003\042\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\044\017\033\024\ufff0\032\046" +
    "\033\041\041\022\001\002\000\004\024\363\001\002\000" +
    "\036\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\351\012\uffbe\013\uffbe\017\uffbe\024\uffbe\032\uffbe\033" +
    "\uffbe\041\uffbe\001\002\000\034\003\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\017\uffc1\024" +
    "\uffc1\032\uffc1\033\uffc1\041\uffc1\001\002\000\004\023\366" +
    "\001\002\000\034\003\042\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\044\017\033\024\ufff0\032\046" +
    "\033\041\041\022\001\002\000\004\024\370\001\002\000" +
    "\036\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\351\012\uffbe\013\uffbe\017\uffbe\024\uffbe\032\uffbe\033" +
    "\uffbe\041\uffbe\001\002\000\034\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\017\uffbf\024" +
    "\uffbf\032\uffbf\033\uffbf\041\uffbf\001\002\000\004\024\373" +
    "\001\002\000\034\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\017\uffc0\024\uffc0\032\uffc0" +
    "\033\uffc0\041\uffc0\001\002\000\004\023\375\001\002\000" +
    "\034\003\042\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\044\017\033\024\ufff0\032\046\033\041\041" +
    "\022\001\002\000\004\024\377\001\002\000\036\003\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\351\012" +
    "\uffbe\013\uffbe\017\uffbe\024\uffbe\032\uffbe\033\uffbe\041\uffbe" +
    "\001\002\000\034\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\012\uffc2\013\uffc2\017\uffc2\024\uffc2\032\uffc2" +
    "\033\uffc2\041\uffc2\001\002\000\004\024\ufff9\001\002\000" +
    "\004\044\u0109\001\002\000\010\035\073\036\072\044\u0107" +
    "\001\002\000\004\044\u0105\001\002\000\034\003\042\004" +
    "\005\005\014\006\011\007\040\010\035\012\030\013\044" +
    "\017\033\024\ufff0\032\046\033\041\041\022\001\002\000" +
    "\004\024\ufff2\001\002\000\034\003\042\004\005\005\014" +
    "\006\011\007\040\010\035\012\030\013\044\017\033\024" +
    "\ufff0\032\046\033\041\041\022\001\002\000\004\024\ufff4" +
    "\001\002\000\034\003\042\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\044\017\033\024\ufff0\032\046" +
    "\033\041\041\022\001\002\000\004\024\ufff3\001\002\000" +
    "\004\024\ufffb\001\002\000\014\002\uffd5\004\005\005\014" +
    "\006\011\020\u010f\001\002\000\006\003\u0127\007\u0126\001" +
    "\002\000\004\002\ufffe\001\002\000\006\003\u0111\007\u0110" +
    "\001\002\000\004\027\u0117\001\002\000\004\030\u0112\001" +
    "\002\000\004\023\u0113\001\002\000\034\003\042\004\005" +
    "\005\014\006\011\007\040\010\035\012\030\013\044\017" +
    "\033\024\ufff0\032\046\033\041\041\022\001\002\000\004" +
    "\024\u0115\001\002\000\014\002\uffd5\004\005\005\014\006" +
    "\011\020\u010f\001\002\000\004\002\uffd6\001\002\000\012" +
    "\004\005\005\014\006\011\030\uffd2\001\002\000\004\030" +
    "\u0121\001\002\000\004\007\u011a\001\002\000\010\021\u011b" +
    "\030\uffd0\045\u011c\001\002\000\004\022\u011f\001\002\000" +
    "\012\004\005\005\014\006\011\030\uffd2\001\002\000\004" +
    "\030\uffd4\001\002\000\004\030\uffd1\001\002\000\006\030" +
    "\uffd0\045\u011c\001\002\000\004\030\uffd3\001\002\000\004" +
    "\023\u0122\001\002\000\034\003\042\004\005\005\014\006" +
    "\011\007\040\010\035\012\030\013\044\017\033\024\ufff0" +
    "\032\046\033\041\041\022\001\002\000\004\024\u0124\001" +
    "\002\000\014\002\uffd5\004\005\005\014\006\011\020\u010f" +
    "\001\002\000\004\002\uffd8\001\002\000\004\027\u012d\001" +
    "\002\000\004\030\u0128\001\002\000\004\023\u0129\001\002" +
    "\000\034\003\042\004\005\005\014\006\011\007\040\010" +
    "\035\012\030\013\044\017\033\024\ufff0\032\046\033\041" +
    "\041\022\001\002\000\004\024\u012b\001\002\000\014\002" +
    "\uffd5\004\005\005\014\006\011\020\u010f\001\002\000\004" +
    "\002\uffd7\001\002\000\012\004\005\005\014\006\011\030" +
    "\uffd2\001\002\000\004\030\u012f\001\002\000\004\023\u0130" +
    "\001\002\000\034\003\042\004\005\005\014\006\011\007" +
    "\040\010\035\012\030\013\044\017\033\024\ufff0\032\046" +
    "\033\041\041\022\001\002\000\004\024\u0132\001\002\000" +
    "\014\002\uffd5\004\005\005\014\006\011\020\u010f\001\002" +
    "\000\004\002\uffd9\001\002\000\004\030\u013b\001\002\000" +
    "\014\007\040\025\114\026\116\027\120\047\060\001\002" +
    "\000\004\030\u0137\001\002\000\004\023\u0138\001\002\000" +
    "\034\003\042\004\005\005\014\006\011\007\040\010\035" +
    "\012\030\013\044\017\033\024\ufff0\032\046\033\041\041" +
    "\022\001\002\000\004\024\u013a\001\002\000\034\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013" +
    "\uffbd\017\uffbd\024\uffbd\032\uffbd\033\uffbd\041\uffbd\001\002" +
    "\000\004\023\u013c\001\002\000\034\003\042\004\005\005" +
    "\014\006\011\007\040\010\035\012\030\013\044\017\033" +
    "\024\ufff0\032\046\033\041\041\022\001\002\000\004\024" +
    "\u013e\001\002\000\034\003\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\012\uffbc\013\uffbc\017\uffbc\024\uffbc\032" +
    "\uffbc\033\uffbc\041\uffbc\001\002\000\004\024\ufff8\001\002" +
    "\000\004\024\ufffa\001\002\000\004\024\ufff7\001\002\000" +
    "\012\021\u0149\031\u014a\044\uff8e\045\uff8e\001\002\000\006" +
    "\044\uffe4\045\u0147\001\002\000\004\044\u0145\001\002\000" +
    "\034\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\017\uffef\024\uffef\032\uffef\033\uffef\041" +
    "\uffef\001\002\000\004\044\uffeb\001\002\000\004\007\u0142" +
    "\001\002\000\004\044\uffe5\001\002\000\012\007\040\022" +
    "\u0152\027\062\047\060\001\002\000\014\007\040\025\u014b" +
    "\026\u014d\027\062\047\060\001\002\000\006\044\uffe4\045" +
    "\u0147\001\002\000\012\035\073\036\072\044\uffe4\045\u0147" +
    "\001\002\000\006\044\uffe4\045\u0147\001\002\000\004\044" +
    "\uffe8\001\002\000\004\044\uffea\001\002\000\004\044\uffe9" +
    "\001\002\000\010\022\u0160\035\073\036\072\001\002\000" +
    "\004\031\u0153\001\002\000\004\023\u0154\001\002\000\014" +
    "\007\040\025\u0155\026\u0157\027\062\047\060\001\002\000" +
    "\006\024\uff87\045\u015c\001\002\000\012\024\uff87\035\073" +
    "\036\072\045\u015c\001\002\000\006\024\uff87\045\u015c\001" +
    "\002\000\004\024\u0159\001\002\000\006\044\uffe4\045\u0147" +
    "\001\002\000\004\044\uffe6\001\002\000\004\024\uff89\001" +
    "\002\000\014\007\040\025\u0155\026\u0157\027\062\047\060" +
    "\001\002\000\004\024\uff88\001\002\000\004\024\uff8b\001" +
    "\002\000\004\024\uff8a\001\002\000\010\031\u0161\044\uff8c" +
    "\045\uff8c\001\002\000\004\023\u0162\001\002\000\014\007" +
    "\040\025\u0155\026\u0157\027\062\047\060\001\002\000\004" +
    "\024\u0164\001\002\000\006\044\uffe4\045\u0147\001\002\000" +
    "\004\044\uffe7\001\002\000\004\044\u0167\001\002\000\034" +
    "\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012" +
    "\uff8f\013\uff8f\017\uff8f\024\uff8f\032\uff8f\033\uff8f\041\uff8f" +
    "\001\002\000\012\004\005\005\014\006\011\030\uffdc\001" +
    "\002\000\012\007\u016f\021\u016e\030\uffda\045\u0170\001\002" +
    "\000\004\030\u016b\001\002\000\004\044\u016c\001\002\000" +
    "\014\003\uffe3\004\uffe3\005\uffe3\006\uffe3\020\uffe3\001\002" +
    "\000\004\030\uffe0\001\002\000\004\022\u0176\001\002\000" +
    "\010\021\u0173\030\uffda\045\u0170\001\002\000\012\004\005" +
    "\005\014\006\011\030\uffdc\001\002\000\004\030\uffdb\001" +
    "\002\000\004\030\uffde\001\002\000\004\022\u0174\001\002" +
    "\000\006\030\uffda\045\u0170\001\002\000\004\030\uffdd\001" +
    "\002\000\006\030\uffda\045\u0170\001\002\000\004\030\uffdf" +
    "\001\002\000\014\003\uffe1\004\uffe1\005\uffe1\006\uffe1\020" +
    "\uffe1\001\002\000\004\002\000\001\002\000\004\027\u017b" +
    "\001\002\000\012\004\005\005\014\006\011\030\uffdc\001" +
    "\002\000\004\030\u017d\001\002\000\004\044\u017e\001\002" +
    "\000\014\003\uffe2\004\uffe2\005\uffe2\006\uffe2\020\uffe2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\012\002\003\003\005\005\007\012\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\u0178\003\005\005\007\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\030" +
    "\011\044\012\023\013\042\014\022\016\036\017\031\020" +
    "\033\021\025\022\024\024\026\025\046\046\035\001\001" +
    "\000\006\013\u0165\014\022\001\001\000\002\001\001\000" +
    "\010\013\u0142\014\022\032\u0143\001\001\000\034\004\u0140" +
    "\011\044\012\023\013\042\014\022\016\036\017\031\020" +
    "\033\021\025\022\024\024\026\025\046\046\035\001\001" +
    "\000\034\004\u013f\011\044\012\023\013\042\014\022\016" +
    "\036\017\031\020\033\021\025\022\024\024\026\025\046" +
    "\046\035\001\001\000\034\004\u013e\011\044\012\023\013" +
    "\042\014\022\016\036\017\031\020\033\021\025\022\024" +
    "\024\026\025\046\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\u010a\011\044\012\023\013\042" +
    "\014\022\016\036\017\031\020\033\021\025\022\024\024" +
    "\026\025\046\046\035\001\001\000\016\006\u0102\007\063" +
    "\010\060\013\055\014\022\046\062\001\001\000\034\004" +
    "\u0100\011\044\012\023\013\042\014\022\016\036\017\031" +
    "\020\033\021\025\022\024\024\026\025\046\046\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\336" +
    "\011\044\012\023\013\042\014\022\016\036\017\031\020" +
    "\033\021\025\022\024\024\026\025\046\046\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\307\011" +
    "\044\012\023\013\042\014\022\016\036\017\031\020\033" +
    "\021\025\022\024\024\026\025\046\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\100\011\044" +
    "\012\023\013\042\014\022\016\036\017\031\020\033\021" +
    "\025\022\024\024\026\025\046\046\035\001\001\000\002" +
    "\001\001\000\034\004\047\011\044\012\023\013\042\014" +
    "\022\016\036\017\031\020\033\021\025\022\024\024\026" +
    "\025\046\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\056\007\063\010\060" +
    "\013\055\014\022\046\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\070\007\063\010" +
    "\060\013\055\014\022\046\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\067\013\055\014\022\046" +
    "\062\001\001\000\012\010\066\013\055\014\022\046\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\075\010\060\013\055\014\022\046\062" +
    "\001\001\000\014\007\074\010\060\013\055\014\022\046" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\105\013\104\014\022" +
    "\026\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\205\014\022\001\001\000\020\006\114\007\063" +
    "\010\060\013\055\014\022\035\116\046\062\001\001\000" +
    "\002\001\001\000\016\006\111\007\063\010\060\013\055" +
    "\014\022\046\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\125\007\063\010\060\013" +
    "\055\014\022\035\126\046\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\123\011\044\012\023\013" +
    "\042\014\022\016\036\017\031\020\033\021\025\022\024" +
    "\024\026\025\046\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\130\001\001\000\002\001\001\000\020\006\114\007" +
    "\063\010\060\013\055\014\022\035\132\046\062\001\001" +
    "\000\002\001\001\000\016\006\135\007\063\010\060\013" +
    "\055\014\022\046\062\001\001\000\004\036\141\001\001" +
    "\000\004\036\140\001\001\000\004\036\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\145\014\022\030\143\001\001\000\002\001\001\000" +
    "\006\013\170\014\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\150\011\044\012\023\013\042\014" +
    "\022\016\036\017\031\020\033\021\025\022\024\024\026" +
    "\025\046\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\166\007\063\010\060\013\055\014\022" +
    "\046\062\001\001\000\004\031\165\001\001\000\016\006" +
    "\156\007\063\010\060\013\055\014\022\046\062\001\001" +
    "\000\004\031\164\001\001\000\004\031\163\001\001\000" +
    "\004\031\160\001\001\000\002\001\001\000\010\013\145" +
    "\014\022\030\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\167" +
    "\001\001\000\002\001\001\000\004\031\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\174\011\044" +
    "\012\023\013\042\014\022\016\036\017\031\020\033\021" +
    "\025\022\024\024\026\025\046\046\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\177\007\063\010" +
    "\060\013\055\014\022\046\062\001\001\000\004\036\200" +
    "\001\001\000\002\001\001\000\016\006\202\007\063\010" +
    "\060\013\055\014\022\046\062\001\001\000\004\036\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\207\001\001\000\010\013\211\014\022\027\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\222\007\063\010\060\013\055\014\022\046\062" +
    "\001\001\000\016\006\215\007\063\010\060\013\055\014" +
    "\022\046\062\001\001\000\004\034\221\001\001\000\004" +
    "\034\220\001\001\000\004\034\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\223" +
    "\001\001\000\002\001\001\000\016\006\226\007\063\010" +
    "\060\013\055\014\022\046\062\001\001\000\004\034\232" +
    "\001\001\000\004\034\231\001\001\000\004\034\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\243\007\063\010\060\013\055\014\022\046" +
    "\062\001\001\000\016\006\236\007\063\010\060\013\055" +
    "\014\022\046\062\001\001\000\004\034\242\001\001\000" +
    "\004\034\241\001\001\000\004\034\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\244\001\001\000\002\001\001\000\020\006\114\007\063" +
    "\010\060\013\055\014\022\035\246\046\062\001\001\000" +
    "\002\001\001\000\010\013\145\014\022\030\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\253\011" +
    "\044\012\023\013\042\014\022\016\036\017\031\020\033" +
    "\021\025\022\024\024\026\025\046\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\257\011\044\012\023\013\042\014\022\016\036\017" +
    "\031\020\033\021\025\022\024\024\026\025\046\046\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\263\011\044\012\023\013\042\014\022" +
    "\016\036\017\031\020\033\021\025\022\024\024\026\025" +
    "\046\046\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\305\007\063\010\060\013\055\014\022\046" +
    "\062\001\001\000\002\001\001\000\016\006\271\007\063" +
    "\010\060\013\055\014\022\046\062\001\001\000\004\015" +
    "\303\001\001\000\004\015\302\001\001\000\004\015\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\277\014\022\016\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\324\007\063\010\060\013\055\014\022\046" +
    "\062\047\325\001\001\000\004\050\334\001\001\000\004" +
    "\050\333\001\001\000\002\001\001\000\004\050\330\001" +
    "\001\000\020\006\324\007\063\010\060\013\055\014\022" +
    "\046\062\047\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\340\011" +
    "\044\012\023\013\042\014\022\016\036\017\031\020\033" +
    "\021\025\022\024\024\026\025\046\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\114\007\063" +
    "\010\060\013\055\014\022\035\343\046\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\346\011\044" +
    "\012\023\013\042\014\022\016\036\017\031\020\033\021" +
    "\025\022\024\024\026\025\046\046\035\001\001\000\002" +
    "\001\001\000\004\023\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\371\011\044\012\023\013\042" +
    "\014\022\016\036\017\031\020\033\021\025\022\024\024" +
    "\026\025\046\046\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\114\007\063\010\060\013\055\014" +
    "\022\035\356\046\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\361\011\044\012\023\013\042\014" +
    "\022\016\036\017\031\020\033\021\025\022\024\024\026" +
    "\025\046\046\035\001\001\000\002\001\001\000\004\023" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\366\011\044\012\023\013\042\014\022\016\036\017" +
    "\031\020\033\021\025\022\024\024\026\025\046\046\035" +
    "\001\001\000\002\001\001\000\004\023\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\375\011\044\012\023\013\042\014" +
    "\022\016\036\017\031\020\033\021\025\022\024\024\026" +
    "\025\046\046\035\001\001\000\002\001\001\000\004\023" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\u0105\011\044\012\023\013\042\014\022\016\036\017\031" +
    "\020\033\021\025\022\024\024\026\025\046\046\035\001" +
    "\001\000\002\001\001\000\034\004\u0107\011\044\012\023" +
    "\013\042\014\022\016\036\017\031\020\033\021\025\022" +
    "\024\024\026\025\046\046\035\001\001\000\002\001\001" +
    "\000\034\004\u0109\011\044\012\023\013\042\014\022\016" +
    "\036\017\031\020\033\021\025\022\024\024\026\025\046" +
    "\046\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u010c\043\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\u0113\011\044\012\023" +
    "\013\042\014\022\016\036\017\031\020\033\021\025\022" +
    "\024\024\026\025\046\046\035\001\001\000\002\001\001" +
    "\000\006\012\u010c\043\u0115\001\001\000\002\001\001\000" +
    "\006\012\u0118\044\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u011c\001\001\000\002\001\001\000" +
    "\006\012\u0118\044\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u011f\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\u0122\011\044\012\023\013\042" +
    "\014\022\016\036\017\031\020\033\021\025\022\024\024" +
    "\026\025\046\046\035\001\001\000\002\001\001\000\006" +
    "\012\u010c\043\u0124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\u0129" +
    "\011\044\012\023\013\042\014\022\016\036\017\031\020" +
    "\033\021\025\022\024\024\026\025\046\046\035\001\001" +
    "\000\002\001\001\000\006\012\u010c\043\u012b\001\001\000" +
    "\002\001\001\000\006\012\u0118\044\u012d\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\u0130\011\044\012" +
    "\023\013\042\014\022\016\036\017\031\020\033\021\025" +
    "\022\024\024\026\025\046\046\035\001\001\000\002\001" +
    "\001\000\006\012\u010c\043\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\114\007\063\010\060\013" +
    "\055\014\022\035\u0135\046\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\u0138\011\044\012\023\013" +
    "\042\014\022\016\036\017\031\020\033\021\025\022\024" +
    "\024\026\025\046\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\u013c\011\044" +
    "\012\023\013\042\014\022\016\036\017\031\020\033\021" +
    "\025\022\024\024\026\025\046\046\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\u0142\014\022\032\u0147\001\001\000\002" +
    "\001\001\000\016\006\u0150\007\063\010\060\013\055\014" +
    "\022\046\062\001\001\000\016\006\u014b\007\063\010\060" +
    "\013\055\014\022\046\062\001\001\000\004\033\u014f\001" +
    "\001\000\004\033\u014e\001\001\000\004\033\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\u0155\007\063\010\060\013\055\014\022\037\u0157\046" +
    "\062\001\001\000\004\040\u015e\001\001\000\004\040\u015d" +
    "\001\001\000\004\040\u015a\001\001\000\002\001\001\000" +
    "\004\033\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\u0155\007\063\010\060\013\055\014\022\037" +
    "\u015c\046\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\u0155\007\063\010\060\013\055\014\022\037\u0162" +
    "\046\062\001\001\000\002\001\001\000\004\033\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0168\041\u0169\001\001\000\004\042\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u0171\001" +
    "\001\000\006\012\u0168\041\u0170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u0174\001" +
    "\001\000\002\001\001\000\004\042\u0176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u0168\041\u017b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operacion_aritmetica3 ::= parentesisIzquierdo operacion_aritmetica parentesisDerecho 
            {
              OperacionAritmetica3 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacion_aritmetica3 ::= llamado_funcion 
            {
              OperacionAritmetica3 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacion_aritmetica3 ::= variable 
            {
              OperacionAritmetica3 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacion_aritmetica3 ::= entero 
            {
              OperacionAritmetica3 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacion_aritmetica2 ::= operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion_aritmetica2 ::= operacion_aritmetica2 operadorDivision operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion_aritmetica2 ::= operacion_aritmetica2 operadorMultiplicacion operacion_aritmetica3 
            {
              OperacionAritmetica2 RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacion_aritmetica ::= operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_aritmetica ::= operacion_aritmetica operadorResta operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_aritmetica ::= operacion_aritmetica operadorSuma operacion_aritmetica2 
            {
              OperacionAritmetica RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // inicializacion_arreglo_coma ::= 
            {
              InicializacionArregloComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // inicializacion_arreglo_coma ::= coma inicializacion_arreglo 
            {
              InicializacionArregloComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // inicializacion_arreglo ::= constStr inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // inicializacion_arreglo ::= constChar inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // inicializacion_arreglo ::= operacion_aritmetica inicializacion_arreglo_coma 
            {
              InicializacionArreglo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // elemento_array ::= nombreVariable corcheteIzquierdo operacion_aritmetica corcheteDerecho 
            {
              ElementoDeUnArreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new ElementoDeUnArreglo(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elemento_array",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable ::= elemento_array 
            {
              Variable RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ElementoDeUnArreglo array = (ElementoDeUnArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(array);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable ::= nombreVariable 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Variable(new nombreVariable(id._nombreVariable, id.linea, id.columna));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IncrementarDecrementarVariable ::= operadorIncrementoDecremento variable puntoYComa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncrementarDecrementarVariable",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IncrementarDecrementarVariable ::= variable operadorIncrementoDecremento puntoYComa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncrementarDecrementarVariable",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion_variable_coma ::= puntoYComa 
            {
              AsignacionVariableComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion_variable_coma ::= coma asignacion_variable 
            {
              AsignacionVariableComa RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariable av = (AsignacionVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariableComa(av);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion_variable ::= error puntoYComa 
            {
              AsignacionVariable RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion_variable ::= variable igual constStr asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa ac = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion_variable ::= variable igual constChar asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa ac = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignacion_variable ::= variable operadorAritmeticoIgual operacion_aritmetica asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa av = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new AsignacionVariable(v,o,av, new operadorAritmeticoIgual());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignacion_variable ::= variable igual operacion_aritmetica asignacion_variable_coma 
            {
              AsignacionVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica oa = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		AsignacionVariableComa av = (AsignacionVariableComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new AsignacionVariable(v,oa,av);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CondicionOperadorLogico ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondicionOperadorLogico ::= operadorLogico condicion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= parentesisIzquierdo condicion parentesisDerecho CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= constStr operadorRelacional operacion_aritmetica CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condicion ::= constChar operadorRelacional operacion_aritmetica CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicion ::= operacion_aritmetica operadorRelacional constStr CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicion ::= operacion_aritmetica operadorRelacional constChar CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion ::= operacion_aritmetica operadorRelacional operacion_aritmetica CondicionOperadorLogico 
            {
              Condicion RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_actualizacion_coma ::= 
            {
              ForActualizacionComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_actualizacion_coma ::= coma for_actualizacion 
            {
              ForActualizacionComa RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ForActualizacionComa(new coma(), fa ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_actualizacion ::= operadorIncrementoDecremento variable for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(new operadorIncrementoDecremento(), v, fac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_actualizacion ::= variable operadorIncrementoDecremento for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new operadorIncrementoDecremento(), fac); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_actualizacion ::= variable igual constStr for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_actualizacion ::= variable igual constChar for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_actualizacion ::= variable operadorAritmeticoIgual operacion_aritmetica for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new operadorAritmeticoIgual(), o, fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_actualizacion ::= variable igual operacion_aritmetica for_actualizacion_coma 
            {
              ForActualizacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForActualizacionComa fac = (ForActualizacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new ForActualizacion(v, new igual(), o, fac);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_inicializacion_coma ::= 
            {
              ForInicializacionComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_inicializacion_coma ::= coma for_inicializacion2 
            {
              ForInicializacionComa RESULT =null;
		int fic2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fic2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacion2 fic2 = (ForInicializacion2)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT= new ForInicializacionComa(new coma(), fic2);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_inicializacion2 ::= variable igual constStr for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_inicializacion2 ::= variable igual constChar for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_inicializacion2 ::= variable operadorAritmeticoIgual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new operadorAritmeticoIgual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_inicializacion2 ::= variable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion2(v, new igual(), o, fic);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_inicializacion ::= variable igual constStr for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_inicializacion ::= variable igual constChar for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_inicializacion ::= variable operadorAritmeticoIgual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new operadorAritmeticoIgual(), o, fic);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_inicializacion ::= variable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(v, new igual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_inicializacion ::= tipo nombreVariable igual constStr for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_inicializacion ::= tipo nombreVariable igual constChar for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_inicializacion ::= tipo nombreVariable igual operacion_aritmetica for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ficleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ficright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fic = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, fic);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_inicializacion ::= tipo variable for_inicializacion_coma 
            {
              ForInicializacion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ForInicializacionComa fi = (ForInicializacionComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new ForInicializacion(t,v,fi);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _for ::= FOR error parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 System.out.println("ERROR");RESULT = new For(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _for ::= FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		    RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _for ::= FOR parentesisIzquierdo puntoYComa condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		    RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _for ::= FOR parentesisIzquierdo for_inicializacion puntoYComa condicion puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		ForInicializacion fi = (ForInicializacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		    RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _for ::= FOR parentesisIzquierdo puntoYComa condicion puntoYComa for_actualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		    RESULT = new For( new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _for ::= FOR parentesisIzquierdo for_inicializacion puntoYComa condicion puntoYComa for_actualizacion parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              For RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		ForInicializacion fi = (ForInicializacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		ForActualizacion fa = (ForActualizacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		     RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha() ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _while ::= WHILE error parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              While RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 System.out.println("ERROR");RESULT = new While(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _while ::= WHILE parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigo llaveDerecha 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new While(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else ::= 
            {
              Else RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else ::= ELSE IF error parentesisDerecho llaveIzquierda codigo llaveDerecha else 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("ERROR"); RESULT = new Else( new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else ::= ELSE llaveIzquierda codigo llaveDerecha 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Else(new llaveIzquierda(), c, new llaveDerecha()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else ::= ELSE IF parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigo llaveDerecha else 
            {
              Else RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Else(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _if ::= IF error parentesisDerecho llaveIzquierda codigo llaveDerecha else 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new If(new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _if ::= IF parentesisIzquierdo condicion parentesisDerecho llaveIzquierda codigo llaveDerecha else 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo cg = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Else e = (Else)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new If(new parentesisIzquierdo() , c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print ::= printf parentesisIzquierdo constStr coma operacion_aritmetica parentesisDerecho puntoYComa 
            {
              Printf RESULT =null;
		int cstsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cstsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		constStr csts = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new coma(), o, new parentesisDerecho(), new puntoYComa()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print ::= printf parentesisIzquierdo constStr parentesisDerecho puntoYComa 
            {
              Printf RESULT =null;
		int cstsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cstsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		constStr csts = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // scans ::= scanf parentesisIzquierdo parametroScanf coma elemento_array parentesisDerecho puntoYComa 
            {
              Scanf RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		parametroScanf p = (parametroScanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		ElementoDeUnArreglo e = (ElementoDeUnArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), e, new parentesisDerecho(), new puntoYComa());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // scans ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa 
            {
              Scanf RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		parametroScanf p = (parametroScanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho(), new puntoYComa());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamado_funcion_parametros_coma ::= 
            {
              LlamadoAFuncionParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamado_funcion_parametros_coma ::= coma llamado_funcion_parametros 
            {
              LlamadoAFuncionParametrosComa RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametros lp = (LlamadoAFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new LlamadoAFuncionParametrosComa(new coma(), lp);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamado_funcion_parametros ::= 
            {
              LlamadoAFuncionParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamado_funcion_parametros ::= constStr llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(new constStr(css._constStr, css.linea, css.columna),fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamado_funcion_parametros ::= constChar llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(new constChar(csc._constChar, csc.linea, csc.columna),fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamado_funcion_parametros ::= operacion_aritmetica llamado_funcion_parametros_coma 
            {
              LlamadoAFuncionParametros RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		LlamadoAFuncionParametrosComa fpc = (LlamadoAFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new LlamadoAFuncionParametros(o,fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // llamado_funcion ::= nombreVariable error parentesisDerecho 
            {
              LlamadoAFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  System.out.println("ERROR");  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho());    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // llamado_funcion ::= nombreVariable parentesisIzquierdo llamado_funcion_parametros parentesisDerecho 
            {
              LlamadoAFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int llfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int llfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		LlamadoAFuncionParametros llfp = (LlamadoAFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), llfp, new parentesisDerecho()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamado_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funciones_parametros_coma ::= 
            {
              FuncionesParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros_coma",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funciones_parametros_coma ::= coma funciones_parametros 
            {
              FuncionesParametrosComa RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new FuncionesParametrosComa(new coma(), fp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros_coma",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funciones_parametros ::= 
            {
              FuncionesParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones_parametros ::= tipo nombreVariable corcheteIzquierdo corcheteDerecho funciones_parametros_coma 
            {
              FuncionesParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametrosComa fpc = (FuncionesParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones_parametros ::= tipo nombreVariable funciones_parametros_coma 
            {
              FuncionesParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fpcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fpcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		FuncionesParametrosComa fpc = (FuncionesParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), fpc); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones_parametros",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones ::= 
            {
              Funciones RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones ::= VOID error parentesisDerecho llaveIzquierda codigo llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  System.out.println("ERROR"); RESULT = new Funciones(new VOID(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funciones ::= tipo error parentesisDerecho llaveIzquierda codigo llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  System.out.println("ERROR"); RESULT = new Funciones(t, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funciones ::= VOID nombreVariable parentesisIzquierdo funciones_parametros parentesisDerecho llaveIzquierda codigo llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Funciones(new VOID(),new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funciones ::= tipo nombreVariable parentesisIzquierdo funciones_parametros parentesisDerecho llaveIzquierda codigo llaveDerecha funciones 
            {
              Funciones RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		FuncionesParametros fp = (FuncionesParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Funciones(t,new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_funcion_parametros_coma ::= 
            {
              DeclaracionFuncionParametrosComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros_coma",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_funcion_parametros_coma ::= coma declaracion_funcion_parametros 
            {
              DeclaracionFuncionParametrosComa RESULT =null;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametros dfp = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new DeclaracionFuncionParametrosComa(new coma(), dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros_coma",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_funcion_parametros ::= 
            {
              DeclaracionFuncionParametros RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_funcion_parametros ::= tipo nombreVariable corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_funcion_parametros ::= tipo nombreVariable declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), dfp);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_funcion_parametros ::= tipo corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t,new corcheteIzquierdo(), new corcheteDerecho(), dfp);         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_funcion_parametros ::= tipo declaracion_funcion_parametros_coma 
            {
              DeclaracionFuncionParametros RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		DeclaracionFuncionParametrosComa dfp = (DeclaracionFuncionParametrosComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new DeclaracionFuncionParametros(t,dfp);    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_funcion ::= error puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		  System.out.println("ERROR");  RESULT = new DeclaracionFuncion(new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_funcion ::= VOID nombreVariable parentesisIzquierdo declaracion_funcion_parametros parentesisDerecho puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dfsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dfsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		DeclaracionFuncionParametros dfs = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new DeclaracionFuncion(new VOID(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfs, new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_funcion ::= tipo nombreVariable parentesisIzquierdo declaracion_funcion_parametros parentesisDerecho puntoYComa 
            {
              DeclaracionFuncion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dfpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dfpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		DeclaracionFuncionParametros dfp = (DeclaracionFuncionParametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new DeclaracionFuncion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfp, new parentesisDerecho(), new puntoYComa());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_variablesComa ::= 
            {
              ListaVariablesComa RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variablesComa",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_variablesComa ::= coma lista_variables 
            {
              ListaVariablesComa RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariables lv = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariablesComa(lv, new coma()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variablesComa",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_variables ::= nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo llaveDerecha lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int iAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		InicializacionArreglo iA = (InicializacionArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lv = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha(), lv);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_variables ::= nombreVariable corcheteIzquierdo operacion_aritmetica corcheteDerecho igual llaveIzquierda inicializacion_arreglo llaveDerecha lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		InicializacionArreglo ia = (InicializacionArreglo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lv = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha(), lv);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_variables ::= nombreVariable igual constStr lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constStr css = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lc = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), lc);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_variables ::= nombreVariable igual constChar lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lc = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), lc);   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_variables ::= nombreVariable igual operacion_aritmetica lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		nombreVariable id = (nombreVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lc = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, lc);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_variables ::= variable lista_variablesComa 
            {
              ListaVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		ListaVariablesComa lc = (ListaVariablesComa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ListaVariables(v,lc);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new CharTipo();   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new StringTipo();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new IntegerTipo(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_variables ::= tipo lista_variables puntoYComa 
            {
              DeclaracionVariables RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		ListaVariables lv = (ListaVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DeclaracionVariables(t,lv, new puntoYComa() );   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= 
            {
              Codigo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= error codigo 
            {
              Codigo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  System.out.println("ERROR"); RESULT = new Codigo(c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= RETURN constStr puntoYComa codigo 
            {
              Codigo RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		constStr cst = (constStr)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(new RETURN(), new constStr(cst._constStr, cst.linea, cst.columna), new puntoYComa(),  c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= RETURN constChar puntoYComa codigo 
            {
              Codigo RESULT =null;
		int cscleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cscright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		constChar csc = (constChar)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(new RETURN(), new constChar(csc._constChar, csc.linea, csc.columna), new puntoYComa(), c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= RETURN operacion_aritmetica puntoYComa codigo 
            {
              Codigo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		OperacionAritmetica o = (OperacionAritmetica)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(new RETURN(), o, new puntoYComa(),   c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= llamado_funcion puntoYComa codigo 
            {
              Codigo RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		LlamadoAFuncion lf = (LlamadoAFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(lf,new puntoYComa(), c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= _for codigo 
            {
              Codigo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(f,c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= _if codigo 
            {
              Codigo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(i,c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= _while codigo 
            {
              Codigo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(w,c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= scans codigo 
            {
              Codigo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Scanf s = (Scanf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(s,c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= print codigo 
            {
              Codigo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Printf p = (Printf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = new Codigo(p,c); /*System.out.print( RESULT.p.cs._constStr);*/ 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= IncrementarDecrementarVariable codigo 
            {
              Codigo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= asignacion_variable codigo 
            {
              Codigo RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		AsignacionVariable av = (AsignacionVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Codigo(av,c);  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= declaracion_variables codigo 
            {
              Codigo RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		DeclaracionVariables dv = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Codigo(dv, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= tipo MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigo llaveDerecha funciones 
            {
              MainClass RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Codigo c = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Funciones f = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Programa RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		   RESULT = new Programa(m); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracion_funcion programa 
            {
              Programa RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(df, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

