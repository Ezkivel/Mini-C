
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 02 19:35:56 CST 2015
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 02 19:35:56 CST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\014\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\002\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\013\012\000\002\014\013" +
    "\000\002\014\006\000\002\014\002\000\002\015\011\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\017\004\000\002\017\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\004\006\001\002\000\004\002\174\001" +
    "\002\000\004\002\000\001\002\000\004\014\007\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\004\020\012\001\002\000\014\004\016\005\023\006\017" +
    "\010\013\015\ufffa\001\002\000\004\024\166\001\002\000" +
    "\016\004\016\005\023\006\017\010\013\015\ufffa\021\ufffa" +
    "\001\002\000\016\004\016\005\023\006\017\010\013\015" +
    "\ufffa\021\ufffa\001\002\000\010\005\137\040\ufff0\041\141" +
    "\001\002\000\004\024\060\001\002\000\016\004\016\005" +
    "\023\006\017\010\013\015\ufffa\021\ufffa\001\002\000\016" +
    "\004\016\005\023\006\017\010\013\015\ufffa\021\ufffa\001" +
    "\002\000\004\015\052\001\002\000\004\026\024\001\002" +
    "\000\014\005\030\022\031\023\033\024\032\037\027\001" +
    "\002\000\016\025\uffea\031\uffea\032\uffea\033\043\034\044" +
    "\040\uffea\001\002\000\010\031\040\032\037\040\051\001" +
    "\002\000\016\025\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\040\uffe6\001\002\000\016\025\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\040\uffe5\001\002\000\004\040\050\001\002" +
    "\000\010\005\030\024\032\037\027\001\002\000\004\040" +
    "\035\001\002\000\016\025\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\040\uffe7\001\002\000\016\004\uffed\005\uffed\006" +
    "\uffed\010\uffed\015\uffed\021\uffed\001\002\000\010\025\041" +
    "\031\040\032\037\001\002\000\010\005\030\024\032\037" +
    "\027\001\002\000\010\005\030\024\032\037\027\001\002" +
    "\000\016\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040" +
    "\uffe4\001\002\000\016\025\uffec\031\uffec\032\uffec\033\043" +
    "\034\044\040\uffec\001\002\000\010\005\030\024\032\037" +
    "\027\001\002\000\010\005\030\024\032\037\027\001\002" +
    "\000\016\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\040" +
    "\uffe8\001\002\000\016\025\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\040\uffe9\001\002\000\016\025\uffeb\031\uffeb\032" +
    "\uffeb\033\043\034\044\040\uffeb\001\002\000\016\004\uffee" +
    "\005\uffee\006\uffee\010\uffee\015\uffee\021\uffee\001\002\000" +
    "\016\004\uffef\005\uffef\006\uffef\010\uffef\015\uffef\021\uffef" +
    "\001\002\000\004\037\053\001\002\000\004\040\054\001" +
    "\002\000\004\021\055\001\002\000\004\002\uffff\001\002" +
    "\000\006\015\ufffe\021\ufffe\001\002\000\006\015\ufffd\021" +
    "\ufffd\001\002\000\014\005\062\022\063\023\066\024\064" +
    "\037\061\001\002\000\004\035\134\001\002\000\004\035" +
    "\123\001\002\000\004\035\120\001\002\000\014\005\062" +
    "\022\063\023\066\024\064\037\061\001\002\000\004\025" +
    "\074\001\002\000\004\035\067\001\002\000\004\005\070" +
    "\001\002\000\006\025\uffd5\036\072\001\002\000\004\025" +
    "\uffd8\001\002\000\014\005\062\022\063\023\066\024\064" +
    "\037\061\001\002\000\004\025\uffd6\001\002\000\004\020" +
    "\075\001\002\000\014\004\016\005\023\006\017\010\013" +
    "\021\ufffa\001\002\000\004\021\077\001\002\000\020\004" +
    "\uffe0\005\uffe0\006\uffe0\007\100\010\uffe0\015\uffe0\021\uffe0" +
    "\001\002\000\006\006\103\020\102\001\002\000\016\004" +
    "\uffe3\005\uffe3\006\uffe3\010\uffe3\015\uffe3\021\uffe3\001\002" +
    "\000\014\004\016\005\023\006\017\010\013\021\ufffa\001" +
    "\002\000\004\024\104\001\002\000\014\005\062\022\063" +
    "\023\066\024\064\037\061\001\002\000\004\025\106\001" +
    "\002\000\004\020\107\001\002\000\014\004\016\005\023" +
    "\006\017\010\013\021\ufffa\001\002\000\004\021\111\001" +
    "\002\000\020\004\uffe0\005\uffe0\006\uffe0\007\100\010\uffe0" +
    "\015\uffe0\021\uffe0\001\002\000\016\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\015\uffe2\021\uffe2\001\002\000\004\021\114" +
    "\001\002\000\016\004\uffe1\005\uffe1\006\uffe1\010\uffe1\015" +
    "\uffe1\021\uffe1\001\002\000\004\025\116\001\002\000\006" +
    "\025\uffd5\036\072\001\002\000\004\025\uffd7\001\002\000" +
    "\004\005\121\001\002\000\006\025\uffd5\036\072\001\002" +
    "\000\004\025\uffd9\001\002\000\012\005\125\022\126\023" +
    "\127\037\124\001\002\000\006\025\uffd5\036\072\001\002" +
    "\000\006\025\uffd5\036\072\001\002\000\006\025\uffd5\036" +
    "\072\001\002\000\006\025\uffd5\036\072\001\002\000\004" +
    "\025\uffdb\001\002\000\004\025\uffdc\001\002\000\004\025" +
    "\uffde\001\002\000\004\025\uffdd\001\002\000\004\005\135" +
    "\001\002\000\006\025\uffd5\036\072\001\002\000\004\025" +
    "\uffda\001\002\000\012\005\137\026\155\040\ufff0\041\141" +
    "\001\002\000\004\040\153\001\002\000\004\005\142\001" +
    "\002\000\012\005\137\026\144\040\ufff0\041\141\001\002" +
    "\000\004\040\ufff7\001\002\000\010\022\146\023\147\037" +
    "\145\001\002\000\010\005\137\040\ufff0\041\141\001\002" +
    "\000\010\005\137\040\ufff0\041\141\001\002\000\010\005" +
    "\137\040\ufff0\041\141\001\002\000\004\040\ufff1\001\002" +
    "\000\004\040\ufff2\001\002\000\004\040\ufff3\001\002\000" +
    "\016\004\ufff9\005\ufff9\006\ufff9\010\ufff9\015\ufff9\021\ufff9" +
    "\001\002\000\004\040\ufff8\001\002\000\010\022\157\023" +
    "\160\037\156\001\002\000\010\005\137\040\ufff0\041\141" +
    "\001\002\000\010\005\137\040\ufff0\041\141\001\002\000" +
    "\010\005\137\040\ufff0\041\141\001\002\000\004\040\ufff4" +
    "\001\002\000\004\040\ufff5\001\002\000\004\040\ufff6\001" +
    "\002\000\006\015\ufffc\021\ufffc\001\002\000\006\015\ufffb" +
    "\021\ufffb\001\002\000\014\005\062\022\063\023\066\024" +
    "\064\037\061\001\002\000\004\025\170\001\002\000\004" +
    "\020\171\001\002\000\014\004\016\005\023\006\017\010" +
    "\013\021\ufffa\001\002\000\004\021\173\001\002\000\016" +
    "\004\uffdf\005\uffdf\006\uffdf\010\uffdf\015\uffdf\021\uffdf\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\021\005" +
    "\020\007\017\013\013\015\014\001\001\000\002\001\001" +
    "\000\014\004\164\005\020\007\017\013\013\015\014\001" +
    "\001\000\014\004\163\005\020\007\017\013\013\015\014" +
    "\001\001\000\004\006\137\001\001\000\002\001\001\000" +
    "\014\004\056\005\020\007\017\013\013\015\014\001\001" +
    "\000\014\004\055\005\020\007\017\013\013\015\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\025" +
    "\011\024\012\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\035\011\024\012\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\046\012\033\001\001\000\006\011\041\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\045\001\001\000\004\012\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\070\001\001\000\002\001\001\000\004\016\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\075\005\020\007\017\013\013\015\014\001\001\000\002" +
    "\001\001\000\004\014\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\112\005\020\007\017\013\013" +
    "\015\014\001\001\000\002\001\001\000\004\016\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\107" +
    "\005\020\007\017\013\013\015\014\001\001\000\002\001" +
    "\001\000\004\014\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\132\001\001\000\004\017\131\001\001\000\004" +
    "\017\130\001\001\000\004\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\135\001\001\000\002\001" +
    "\001\000\004\006\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\151\001\001\000\004\006\150" +
    "\001\001\000\004\006\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\162\001\001\000" +
    "\004\006\161\001\001\000\004\006\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\171\005\020\007" +
    "\017\013\013\015\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Error Sintactico cerca de < " + t.getContenido() + " > linea " + t.getLinea() + ", columna " + t.getColumna(), null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CondicionOperadorLogico ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CondicionOperadorLogico ::= operadorLogico Condicion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condicion ::= parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condicion ::= constStr operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condicion ::= constChar operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condicion ::= entero operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Condicion ::= nombreVariable operadorRelacional constStr CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condicion ::= nombreVariable operadorRelacional constChar CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Condicion ::= nombreVariable operadorRelacional entero CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Condicion ::= nombreVariable operadorRelacional nombreVariable CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Else ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Else ::= ELSE llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("If",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OperacionAritmetica3 ::= parentesisIzquierdo OperacionAritmetica1 parentesisDerecho 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OperacionAritmetica3 ::= nombreVariable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OperacionAritmetica3 ::= entero 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OperacionAritmetica2 ::= OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorDivision OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OperacionAritmetica1 ::= OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OperacionAritmetica1 ::= OperacionAritmetica1 operadorResta OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OperacionAritmetica1 ::= OperacionAritmetica1 operadorSuma OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica1",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InicializacionVariable ::= nombreVariable igual constStr puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionVariable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InicializacionVariable ::= nombreVariable igual constChar puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionVariable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InicializacionVariable ::= nombreVariable igual OperacionAritmetica1 puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionVariable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variable ::= coma nombreVariable igual constStr Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variable ::= coma nombreVariable igual constChar Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variable ::= coma nombreVariable igual entero Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= nombreVariable igual constStr Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= nombreVariable igual constChar Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= nombreVariable igual entero Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variable ::= coma nombreVariable Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variable ::= nombreVariable Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionVariable ::= tipoVariable Variable puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Codigo ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Codigo ::= If Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Codigo ::= While Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Codigo ::= InicializacionVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Codigo ::= DeclaracionVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda Codigo RETURN entero puntoYComa llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= Main 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

