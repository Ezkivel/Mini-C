
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 05 00:28:28 CST 2015
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 05 00:28:28 CST 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\037\010\000\002\040\004\000\002\040\006" +
    "\000\002\040\005\000\002\040\007\000\002\040\002\000" +
    "\002\041\004\000\002\041\002\000\002\003\015\000\002" +
    "\042\013\000\002\042\002\000\002\043\002\000\002\043" +
    "\005\000\002\043\007\000\002\044\004\000\002\044\002" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\035" +
    "\012\000\002\035\011\000\002\036\007\000\002\036\012" +
    "\000\002\036\012\000\002\036\012\000\002\036\011\000" +
    "\002\022\012\000\002\023\013\000\002\023\006\000\002" +
    "\023\002\000\002\024\011\000\002\025\015\000\002\025" +
    "\014\000\002\025\014\000\002\025\013\000\002\025\012" +
    "\000\002\026\005\000\002\026\007\000\002\026\007\000" +
    "\002\026\007\000\002\026\006\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\030\004" +
    "\000\002\030\002\000\002\031\006\000\002\031\006\000" +
    "\002\031\006\000\002\031\006\000\002\031\005\000\002" +
    "\031\005\000\002\032\004\000\002\032\002\000\002\033" +
    "\006\000\002\033\006\000\002\033\006\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\034\004\000" +
    "\002\034\002\000\002\006\005\000\002\007\004\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\013\000\002\007\012\000\002\010\004\000\002\010\002" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\012\004\000\002\012\003\000\002" +
    "\015\005\000\002\015\005\000\002\005\003\000\002\005" +
    "\003\000\002\016\006\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\014\004\000\002\014\002\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\004\004\007\001\002\000\004\002\u0139\001" +
    "\002\000\004\004\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\005\010\014\011\001\002\000\004\024\u0128\001" +
    "\002\000\004\024\012\001\002\000\004\025\013\001\002" +
    "\000\004\020\014\001\002\000\024\004\015\005\024\006" +
    "\023\010\020\011\032\015\uffe6\027\035\030\025\036\016" +
    "\001\002\000\004\005\u0104\001\002\000\004\005\024\001" +
    "\002\000\026\004\015\005\024\006\023\010\020\011\032" +
    "\015\uffe6\021\uffe6\027\035\030\025\036\016\001\002\000" +
    "\004\024\373\001\002\000\026\004\015\005\024\006\023" +
    "\010\020\011\032\015\uffe6\021\uffe6\027\035\030\025\036" +
    "\016\001\002\000\026\004\015\005\024\006\023\010\020" +
    "\011\032\015\uffe6\021\uffe6\027\035\030\025\036\016\001" +
    "\002\000\004\024\346\001\002\000\040\016\133\017\uffa5" +
    "\021\uffa5\025\uffa5\026\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5" +
    "\001\002\000\004\024\334\001\002\000\026\004\015\005" +
    "\024\006\023\010\020\011\032\015\uffe6\021\uffe6\027\035" +
    "\030\025\036\016\001\002\000\004\015\305\001\002\000" +
    "\010\026\267\031\265\036\266\001\002\000\026\004\015" +
    "\005\024\006\023\010\020\011\032\015\uffe6\021\uffe6\027" +
    "\035\030\025\036\016\001\002\000\004\024\067\001\002" +
    "\000\026\004\015\005\024\006\023\010\020\011\032\015" +
    "\uffe6\021\uffe6\027\035\030\025\036\016\001\002\000\026" +
    "\004\015\005\024\006\023\010\020\011\032\015\uffe6\021" +
    "\uffe6\027\035\030\025\036\016\001\002\000\004\024\041" +
    "\001\002\000\026\004\015\005\024\006\023\010\020\011" +
    "\032\015\uffe6\021\uffe6\027\035\030\025\036\016\001\002" +
    "\000\036\017\uffa4\021\uffa4\025\uffa4\026\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\042\uffa4\043\uffa4\001\002\000\006\015\uffee\021\uffee\001" +
    "\002\000\004\023\042\001\002\000\006\025\044\043\043" +
    "\001\002\000\012\005\047\022\050\023\051\041\046\001" +
    "\002\000\004\042\045\001\002\000\026\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\011\uffe3\015\uffe3\021\uffe3\027\uffe3\030" +
    "\uffe3\036\uffe3\001\002\000\004\044\062\001\002\000\004" +
    "\025\060\001\002\000\004\044\055\001\002\000\004\044" +
    "\052\001\002\000\004\025\053\001\002\000\004\042\054" +
    "\001\002\000\026\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011" +
    "\uffe2\015\uffe2\021\uffe2\027\uffe2\030\uffe2\036\uffe2\001\002" +
    "\000\004\025\056\001\002\000\004\042\057\001\002\000" +
    "\026\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\015\uffe0" +
    "\021\uffe0\027\uffe0\030\uffe0\036\uffe0\001\002\000\004\042" +
    "\061\001\002\000\026\004\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\011\uffdf\015\uffdf\021\uffdf\027\uffdf\030\uffdf\036\uffdf\001" +
    "\002\000\004\025\063\001\002\000\004\042\064\001\002" +
    "\000\026\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\015" +
    "\uffe1\021\uffe1\027\uffe1\030\uffe1\036\uffe1\001\002\000\006" +
    "\015\uffea\021\uffea\001\002\000\006\015\uffe9\021\uffe9\001" +
    "\002\000\010\004\073\005\024\042\070\001\002\000\016" +
    "\005\024\022\160\023\162\024\163\041\110\042\244\001" +
    "\002\000\004\042\157\001\002\000\006\026\146\031\145" +
    "\001\002\000\004\005\074\001\002\000\012\016\133\026" +
    "\134\042\uffa5\043\uffa5\001\002\000\006\042\uffc7\043\077" +
    "\001\002\000\004\042\uffd4\001\002\000\004\005\024\001" +
    "\002\000\006\026\103\031\102\001\002\000\004\042\uffc8" +
    "\001\002\000\010\005\024\024\111\041\110\001\002\000" +
    "\014\005\024\022\105\023\107\024\111\041\110\001\002" +
    "\000\030\017\uff93\021\uff93\025\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\037\uff93\040\uff93\042\uff93\043\uff93\001\002" +
    "\000\006\042\uffc7\043\077\001\002\000\012\032\121\033" +
    "\122\042\uffc7\043\077\001\002\000\006\042\uffc7\043\077" +
    "\001\002\000\030\017\uff94\021\uff94\025\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\037\uff94\040\uff94\042\uff94\043\uff94" +
    "\001\002\000\010\005\024\024\111\041\110\001\002\000" +
    "\030\017\uff95\021\uff95\025\uff95\032\uff95\033\uff95\034\uff95" +
    "\035\uff95\037\uff95\040\uff95\042\uff95\043\uff95\001\002\000" +
    "\030\017\uff98\021\uff98\025\uff98\032\uff98\033\uff98\034\114" +
    "\035\115\037\uff98\040\uff98\042\uff98\043\uff98\001\002\000" +
    "\010\005\024\024\111\041\110\001\002\000\010\005\024" +
    "\024\111\041\110\001\002\000\030\017\uff96\021\uff96\025" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\037\uff96\040\uff96" +
    "\042\uff96\043\uff96\001\002\000\030\017\uff97\021\uff97\025" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\037\uff97\040\uff97" +
    "\042\uff97\043\uff97\001\002\000\010\025\123\032\121\033" +
    "\122\001\002\000\010\005\024\024\111\041\110\001\002" +
    "\000\010\005\024\024\111\041\110\001\002\000\030\017" +
    "\uff92\021\uff92\025\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\037\uff92\040\uff92\042\uff92\043\uff92\001\002\000\030\017" +
    "\uff99\021\uff99\025\uff99\032\uff99\033\uff99\034\114\035\115" +
    "\037\uff99\040\uff99\042\uff99\043\uff99\001\002\000\030\017" +
    "\uff9a\021\uff9a\025\uff9a\032\uff9a\033\uff9a\034\114\035\115" +
    "\037\uff9a\040\uff9a\042\uff9a\043\uff9a\001\002\000\004\042" +
    "\uffc9\001\002\000\004\042\uffcc\001\002\000\004\042\uffca" +
    "\001\002\000\012\032\121\033\122\042\uffc7\043\077\001" +
    "\002\000\004\042\uffcb\001\002\000\010\005\024\024\111" +
    "\041\110\001\002\000\014\005\024\022\135\023\137\024" +
    "\111\041\110\001\002\000\006\042\uffc7\043\077\001\002" +
    "\000\012\032\121\033\122\042\uffc7\043\077\001\002\000" +
    "\006\042\uffc7\043\077\001\002\000\004\042\uffd1\001\002" +
    "\000\004\042\uffd3\001\002\000\004\042\uffd2\001\002\000" +
    "\010\017\144\032\121\033\122\001\002\000\036\017\uffa3" +
    "\021\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3" +
    "\001\002\000\010\005\024\024\111\041\110\001\002\000" +
    "\014\005\024\022\147\023\151\024\111\041\110\001\002" +
    "\000\006\042\uffc7\043\077\001\002\000\012\032\121\033" +
    "\122\042\uffc7\043\077\001\002\000\006\042\uffc7\043\077" +
    "\001\002\000\004\042\uffcd\001\002\000\004\042\uffd0\001" +
    "\002\000\004\042\uffce\001\002\000\012\032\121\033\122" +
    "\042\uffc7\043\077\001\002\000\004\042\uffcf\001\002\000" +
    "\014\005\024\022\160\023\162\024\163\041\110\001\002" +
    "\000\004\037\241\001\002\000\010\032\121\033\122\037" +
    "\227\001\002\000\004\037\236\001\002\000\014\005\024" +
    "\022\160\023\162\024\163\041\110\001\002\000\004\042" +
    "\165\001\002\000\010\005\024\025\171\036\166\001\002" +
    "\000\004\005\024\001\002\000\004\025\213\001\002\000" +
    "\010\026\177\031\175\036\176\001\002\000\004\020\172" +
    "\001\002\000\024\004\015\005\024\006\023\010\020\011" +
    "\032\021\uffe6\027\035\030\025\036\016\001\002\000\004" +
    "\021\174\001\002\000\026\004\uffd7\005\uffd7\006\uffd7\010" +
    "\uffd7\011\uffd7\015\uffd7\021\uffd7\027\uffd7\030\uffd7\036\uffd7" +
    "\001\002\000\010\005\024\024\111\041\110\001\002\000" +
    "\006\025\uffbf\043\204\001\002\000\014\005\024\022\200" +
    "\023\202\024\111\041\110\001\002\000\006\025\uffbf\043" +
    "\204\001\002\000\012\025\uffbf\032\121\033\122\043\204" +
    "\001\002\000\006\025\uffbf\043\204\001\002\000\004\025" +
    "\uffc3\001\002\000\006\005\024\036\166\001\002\000\004" +
    "\025\uffc0\001\002\000\004\025\uffc6\001\002\000\004\025" +
    "\uffc4\001\002\000\004\025\uffc2\001\002\000\012\025\uffbf" +
    "\032\121\033\122\043\204\001\002\000\004\025\uffc5\001" +
    "\002\000\004\020\214\001\002\000\024\004\015\005\024" +
    "\006\023\010\020\011\032\021\uffe6\027\035\030\025\036" +
    "\016\001\002\000\004\021\216\001\002\000\026\004\uffd9" +
    "\005\uffd9\006\uffd9\010\uffd9\011\uffd9\015\uffd9\021\uffd9\027" +
    "\uffd9\030\uffd9\036\uffd9\001\002\000\006\025\uffbf\043\204" +
    "\001\002\000\004\025\uffc1\001\002\000\012\025\123\032" +
    "\121\033\122\037\227\001\002\000\004\025\223\001\002" +
    "\000\010\025\uffb7\040\225\042\uffb7\001\002\000\006\025" +
    "\uffb9\042\uffb9\001\002\000\014\005\024\022\160\023\162" +
    "\024\163\041\110\001\002\000\006\025\uffb8\042\uffb8\001" +
    "\002\000\014\005\024\022\230\023\232\024\111\041\110" +
    "\001\002\000\010\025\uffb7\040\225\042\uffb7\001\002\000" +
    "\014\025\uffb7\032\121\033\122\040\225\042\uffb7\001\002" +
    "\000\010\025\uffb7\040\225\042\uffb7\001\002\000\006\025" +
    "\uffbc\042\uffbc\001\002\000\006\025\uffbe\042\uffbe\001\002" +
    "\000\006\025\uffbd\042\uffbd\001\002\000\010\005\024\024" +
    "\111\041\110\001\002\000\014\025\uffb7\032\121\033\122" +
    "\040\225\042\uffb7\001\002\000\006\025\uffba\042\uffba\001" +
    "\002\000\010\005\024\024\111\041\110\001\002\000\014" +
    "\025\uffb7\032\121\033\122\040\225\042\uffb7\001\002\000" +
    "\006\025\uffbb\042\uffbb\001\002\000\004\025\260\001\002" +
    "\000\004\042\246\001\002\000\010\005\024\025\250\036" +
    "\166\001\002\000\004\025\254\001\002\000\004\020\251" +
    "\001\002\000\024\004\015\005\024\006\023\010\020\011" +
    "\032\021\uffe6\027\035\030\025\036\016\001\002\000\004" +
    "\021\253\001\002\000\026\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\011\uffd6\015\uffd6\021\uffd6\027\uffd6\030\uffd6\036\uffd6" +
    "\001\002\000\004\020\255\001\002\000\024\004\015\005" +
    "\024\006\023\010\020\011\032\021\uffe6\027\035\030\025" +
    "\036\016\001\002\000\004\021\257\001\002\000\026\004" +
    "\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8\015\uffd8\021\uffd8" +
    "\027\uffd8\030\uffd8\036\uffd8\001\002\000\004\020\261\001" +
    "\002\000\024\004\015\005\024\006\023\010\020\011\032" +
    "\021\uffe6\027\035\030\025\036\016\001\002\000\004\021" +
    "\263\001\002\000\026\004\uffd5\005\uffd5\006\uffd5\010\uffd5" +
    "\011\uffd5\015\uffd5\021\uffd5\027\uffd5\030\uffd5\036\uffd5\001" +
    "\002\000\006\015\uffeb\021\uffeb\001\002\000\010\005\024" +
    "\024\111\041\110\001\002\000\004\042\302\001\002\000" +
    "\014\005\024\022\270\023\272\024\111\041\110\001\002" +
    "\000\006\042\273\043\275\001\002\000\012\032\121\033" +
    "\122\042\273\043\275\001\002\000\006\042\273\043\275" +
    "\001\002\000\026\004\uffa8\005\uffa8\006\uffa8\010\uffa8\011" +
    "\uffa8\015\uffa8\021\uffa8\027\uffa8\030\uffa8\036\uffa8\001\002" +
    "\000\026\004\uffaa\005\uffaa\006\uffaa\010\uffaa\011\uffaa\015" +
    "\uffaa\021\uffaa\027\uffaa\030\uffaa\036\uffaa\001\002\000\004" +
    "\005\024\001\002\000\006\026\267\031\265\001\002\000" +
    "\026\004\uffa9\005\uffa9\006\uffa9\010\uffa9\011\uffa9\015\uffa9" +
    "\021\uffa9\027\uffa9\030\uffa9\036\uffa9\001\002\000\026\004" +
    "\uffad\005\uffad\006\uffad\010\uffad\011\uffad\015\uffad\021\uffad" +
    "\027\uffad\030\uffad\036\uffad\001\002\000\026\004\uffab\005" +
    "\uffab\006\uffab\010\uffab\011\uffab\015\uffab\021\uffab\027\uffab" +
    "\030\uffab\036\uffab\001\002\000\026\004\uffa7\005\uffa7\006" +
    "\uffa7\010\uffa7\011\uffa7\015\uffa7\021\uffa7\027\uffa7\030\uffa7" +
    "\036\uffa7\001\002\000\012\032\121\033\122\042\273\043" +
    "\275\001\002\000\026\004\uffac\005\uffac\006\uffac\010\uffac" +
    "\011\uffac\015\uffac\021\uffac\027\uffac\030\uffac\036\uffac\001" +
    "\002\000\004\041\306\001\002\000\004\042\307\001\002" +
    "\000\004\021\310\001\002\000\006\002\ufff4\004\312\001" +
    "\002\000\004\002\ufff6\001\002\000\004\005\313\001\002" +
    "\000\004\024\314\001\002\000\006\004\316\025\ufff3\001" +
    "\002\000\004\025\326\001\002\000\004\005\317\001\002" +
    "\000\010\016\321\025\uffef\043\322\001\002\000\004\025" +
    "\ufff2\001\002\000\004\017\324\001\002\000\006\004\316" +
    "\025\ufff3\001\002\000\004\025\ufff0\001\002\000\006\025" +
    "\uffef\043\322\001\002\000\004\025\ufff1\001\002\000\004" +
    "\020\327\001\002\000\024\004\015\005\024\006\023\010" +
    "\020\011\032\021\uffe6\027\035\030\025\036\016\001\002" +
    "\000\004\021\331\001\002\000\006\002\ufff4\004\312\001" +
    "\002\000\004\002\ufff5\001\002\000\006\015\uffe8\021\uffe8" +
    "\001\002\000\004\044\335\001\002\000\004\043\336\001" +
    "\002\000\006\005\337\045\340\001\002\000\004\025\344" +
    "\001\002\000\004\005\341\001\002\000\004\025\342\001" +
    "\002\000\004\042\343\001\002\000\026\004\uffe5\005\uffe5" +
    "\006\uffe5\010\uffe5\011\uffe5\015\uffe5\021\uffe5\027\uffe5\030" +
    "\uffe5\036\uffe5\001\002\000\004\042\345\001\002\000\026" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\015\uffe4\021" +
    "\uffe4\027\uffe4\030\uffe4\036\uffe4\001\002\000\014\005\024" +
    "\022\160\023\162\024\163\041\110\001\002\000\004\025" +
    "\350\001\002\000\004\020\351\001\002\000\024\004\015" +
    "\005\024\006\023\010\020\011\032\021\uffe6\027\035\030" +
    "\025\036\016\001\002\000\004\021\353\001\002\000\030" +
    "\004\uffdb\005\uffdb\006\uffdb\007\354\010\uffdb\011\uffdb\015" +
    "\uffdb\021\uffdb\027\uffdb\030\uffdb\036\uffdb\001\002\000\006" +
    "\006\357\020\356\001\002\000\026\004\uffde\005\uffde\006" +
    "\uffde\010\uffde\011\uffde\015\uffde\021\uffde\027\uffde\030\uffde" +
    "\036\uffde\001\002\000\024\004\015\005\024\006\023\010" +
    "\020\011\032\021\uffe6\027\035\030\025\036\016\001\002" +
    "\000\004\024\360\001\002\000\014\005\024\022\160\023" +
    "\162\024\163\041\110\001\002\000\004\025\362\001\002" +
    "\000\004\020\363\001\002\000\024\004\015\005\024\006" +
    "\023\010\020\011\032\021\uffe6\027\035\030\025\036\016" +
    "\001\002\000\004\021\365\001\002\000\030\004\uffdb\005" +
    "\uffdb\006\uffdb\007\354\010\uffdb\011\uffdb\015\uffdb\021\uffdb" +
    "\027\uffdb\030\uffdb\036\uffdb\001\002\000\026\004\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\011\uffdd\015\uffdd\021\uffdd\027\uffdd" +
    "\030\uffdd\036\uffdd\001\002\000\004\021\370\001\002\000" +
    "\026\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\015\uffdc" +
    "\021\uffdc\027\uffdc\030\uffdc\036\uffdc\001\002\000\006\015" +
    "\uffed\021\uffed\001\002\000\006\015\uffec\021\uffec\001\002" +
    "\000\014\005\024\022\160\023\162\024\163\041\110\001" +
    "\002\000\004\025\375\001\002\000\004\020\376\001\002" +
    "\000\024\004\015\005\024\006\023\010\020\011\032\021" +
    "\uffe6\027\035\030\025\036\016\001\002\000\004\021\u0100" +
    "\001\002\000\026\004\uffda\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\015\uffda\021\uffda\027\uffda\030\uffda\036\uffda\001\002" +
    "\000\006\015\uffe7\021\uffe7\001\002\000\004\042\u0103\001" +
    "\002\000\026\004\uffa6\005\uffa6\006\uffa6\010\uffa6\011\uffa6" +
    "\015\uffa6\021\uffa6\027\uffa6\030\uffa6\036\uffa6\001\002\000" +
    "\012\016\u010b\026\u010c\042\uffa5\043\uffa5\001\002\000\004" +
    "\042\u010a\001\002\000\006\042\uffae\043\u0107\001\002\000" +
    "\004\005\u0104\001\002\000\004\042\uffb5\001\002\000\004" +
    "\042\uffaf\001\002\000\026\004\uffb6\005\uffb6\006\uffb6\010" +
    "\uffb6\011\uffb6\015\uffb6\021\uffb6\027\uffb6\030\uffb6\036\uffb6" +
    "\001\002\000\012\005\024\017\u0114\024\111\041\110\001" +
    "\002\000\014\005\024\022\u010d\023\u010f\024\111\041\110" +
    "\001\002\000\006\042\uffae\043\u0107\001\002\000\012\032" +
    "\121\033\122\042\uffae\043\u0107\001\002\000\006\042\uffae" +
    "\043\u0107\001\002\000\004\042\uffb2\001\002\000\004\042" +
    "\uffb4\001\002\000\004\042\uffb3\001\002\000\010\017\u0122" +
    "\032\121\033\122\001\002\000\004\026\u0115\001\002\000" +
    "\004\020\u0116\001\002\000\014\005\024\022\u0117\023\u0119" +
    "\024\111\041\110\001\002\000\006\021\uff9e\043\u011d\001" +
    "\002\000\012\021\uff9e\032\121\033\122\043\u011d\001\002" +
    "\000\006\021\uff9e\043\u011d\001\002\000\004\021\u011b\001" +
    "\002\000\006\042\uffae\043\u0107\001\002\000\004\042\uffb0" +
    "\001\002\000\014\005\024\022\u0117\023\u0119\024\111\041" +
    "\110\001\002\000\004\021\uffa0\001\002\000\004\021\uff9f" +
    "\001\002\000\004\021\uffa2\001\002\000\004\021\uffa1\001" +
    "\002\000\010\026\u0123\042\uffa3\043\uffa3\001\002\000\004" +
    "\020\u0124\001\002\000\014\005\024\022\u0117\023\u0119\024" +
    "\111\041\110\001\002\000\004\021\u0126\001\002\000\006" +
    "\042\uffae\043\u0107\001\002\000\004\042\uffb1\001\002\000" +
    "\006\004\u012a\025\ufff9\001\002\000\004\025\u0136\001\002" +
    "\000\012\005\u012b\016\u012c\025\ufff7\043\u012d\001\002\000" +
    "\010\016\u0132\025\ufff7\043\u012d\001\002\000\004\017\u0130" +
    "\001\002\000\006\004\u012a\025\ufff9\001\002\000\004\025" +
    "\ufffd\001\002\000\004\025\ufff8\001\002\000\006\025\ufff7" +
    "\043\u012d\001\002\000\004\025\ufffc\001\002\000\004\017" +
    "\u0134\001\002\000\004\025\ufffb\001\002\000\006\025\ufff7" +
    "\043\u012d\001\002\000\004\025\ufffa\001\002\000\004\042" +
    "\u0137\001\002\000\004\004\ufffe\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\010\002\003\003\005\037\004\001\001\000" +
    "\002\001\001\000\010\002\u0137\003\005\037\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\026\005\027\006\035\011\021\015\020\016\036\022" +
    "\025\024\032\025\016\035\033\036\030\001\001\000\010" +
    "\005\u0105\007\u0104\016\036\001\001\000\006\005\u0101\016" +
    "\036\001\001\000\030\004\u0100\005\027\006\035\011\021" +
    "\015\020\016\036\022\025\024\032\025\016\035\033\036" +
    "\030\001\001\000\002\001\001\000\030\004\371\005\027" +
    "\006\035\011\021\015\020\016\036\022\025\024\032\025" +
    "\016\035\033\036\030\001\001\000\030\004\370\005\027" +
    "\006\035\011\021\015\020\016\036\022\025\024\032\025" +
    "\016\035\033\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\332\005\027\006" +
    "\035\011\021\015\020\016\036\022\025\024\032\025\016" +
    "\035\033\036\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\263\005\027\006\035\011\021\015\020" +
    "\016\036\022\025\024\032\025\016\035\033\036\030\001" +
    "\001\000\002\001\001\000\030\004\065\005\027\006\035" +
    "\011\021\015\020\016\036\022\025\024\032\025\016\035" +
    "\033\036\030\001\001\000\030\004\064\005\027\006\035" +
    "\011\021\015\020\016\036\022\025\024\032\025\016\035" +
    "\033\036\030\001\001\000\002\001\001\000\030\004\037" +
    "\005\027\006\035\011\021\015\020\016\036\022\025\024" +
    "\032\025\016\035\033\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\071\016\036\026\070\001\001\000\016" +
    "\005\103\016\036\017\160\020\112\021\111\033\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\074" +
    "\016\036\001\001\000\002\001\001\000\004\030\075\001" +
    "\001\000\002\001\001\000\010\005\077\016\036\027\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\103\016\036\017\130\020\112\021\111\001\001\000\014" +
    "\005\103\016\036\017\105\020\112\021\111\001\001\000" +
    "\002\001\001\000\004\030\127\001\001\000\004\030\126" +
    "\001\001\000\004\030\125\001\001\000\002\001\001\000" +
    "\014\005\103\016\036\017\117\020\112\021\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\103\016" +
    "\036\021\116\001\001\000\010\005\103\016\036\021\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\103\016\036\020\124\021\111\001\001" +
    "\000\012\005\103\016\036\020\123\021\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\131\001\001\000\002\001\001\000\014\005\103\016\036" +
    "\017\142\020\112\021\111\001\001\000\014\005\103\016" +
    "\036\017\135\020\112\021\111\001\001\000\004\030\141" +
    "\001\001\000\004\030\140\001\001\000\004\030\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\103\016" +
    "\036\017\154\020\112\021\111\001\001\000\014\005\103" +
    "\016\036\017\147\020\112\021\111\001\001\000\004\030" +
    "\153\001\001\000\004\030\152\001\001\000\004\030\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\155\001\001\000\002\001\001\000\016" +
    "\005\103\016\036\017\160\020\112\021\111\033\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\103\016\036\017\220\020\112\021\111\033" +
    "\221\001\001\000\002\001\001\000\010\005\167\016\036" +
    "\031\166\001\001\000\006\005\216\016\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\172\005\027\006\035\011\021\015\020\016\036\022" +
    "\025\024\032\025\016\035\033\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\103\016\036\017" +
    "\210\020\112\021\111\001\001\000\004\032\207\001\001" +
    "\000\014\005\103\016\036\017\200\020\112\021\111\001" +
    "\001\000\004\032\206\001\001\000\004\032\205\001\001" +
    "\000\004\032\202\001\001\000\002\001\001\000\010\005" +
    "\167\016\036\031\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\214\005\027\006\035\011\021\015\020\016\036\022" +
    "\025\024\032\025\016\035\033\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\223\001\001\000\002\001\001\000\016\005\103\016" +
    "\036\017\160\020\112\021\111\033\225\001\001\000\002" +
    "\001\001\000\014\005\103\016\036\017\230\020\112\021" +
    "\111\001\001\000\004\034\234\001\001\000\004\034\233" +
    "\001\001\000\004\034\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\103\016\036" +
    "\017\236\020\112\021\111\001\001\000\004\034\237\001" +
    "\001\000\002\001\001\000\014\005\103\016\036\017\241" +
    "\020\112\021\111\001\001\000\004\034\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\167\016\036\031\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\251\005\027\006\035\011\021" +
    "\015\020\016\036\022\025\024\032\025\016\035\033\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\255\005\027\006\035\011\021\015" +
    "\020\016\036\022\025\024\032\025\016\035\033\036\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\261\005\027\006\035\011\021\015\020" +
    "\016\036\022\025\024\032\025\016\035\033\036\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\103\016\036\017\302\020\112\021\111\001" +
    "\001\000\002\001\001\000\014\005\103\016\036\017\270" +
    "\020\112\021\111\001\001\000\004\012\300\001\001\000" +
    "\004\012\277\001\001\000\004\012\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\275\011\276\016" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\322\001\001\000\002\001\001\000\004\044" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\327\005\027\006\035\011\021\015\020\016\036\022" +
    "\025\024\032\025\016\035\033\036\030\001\001\000\002" +
    "\001\001\000\004\042\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\103\016\036\017\160\020" +
    "\112\021\111\033\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\351\005\027\006\035\011\021\015" +
    "\020\016\036\022\025\024\032\025\016\035\033\036\030" +
    "\001\001\000\002\001\001\000\004\023\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\366\005\027" +
    "\006\035\011\021\015\020\016\036\022\025\024\032\025" +
    "\016\035\033\036\030\001\001\000\002\001\001\000\016" +
    "\005\103\016\036\017\160\020\112\021\111\033\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\363" +
    "\005\027\006\035\011\021\015\020\016\036\022\025\024" +
    "\032\025\016\035\033\036\030\001\001\000\002\001\001" +
    "\000\004\023\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\103\016\036\017\160\020\112\021\111\033" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\376\005\027\006\035\011\021\015\020\016\036\022" +
    "\025\024\032\025\016\035\033\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0107\001\001\000\010\005\u0105\007\u0108\016" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\103\016\036\017\u0112\020\112\021" +
    "\111\001\001\000\014\005\103\016\036\017\u010d\020\112" +
    "\021\111\001\001\000\004\010\u0111\001\001\000\004\010" +
    "\u0110\001\001\000\004\010\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\103\013\u0119" +
    "\016\036\017\u0117\020\112\021\111\001\001\000\004\014" +
    "\u0120\001\001\000\004\014\u011f\001\001\000\004\014\u011d" +
    "\001\001\000\002\001\001\000\004\010\u011b\001\001\000" +
    "\002\001\001\000\016\005\103\013\u011e\016\036\017\u0117" +
    "\020\112\021\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\103\013\u0124\016\036\017" +
    "\u0117\020\112\021\111\001\001\000\002\001\001\000\004" +
    "\010\u0126\001\001\000\002\001\001\000\004\040\u0128\001" +
    "\001\000\002\001\001\000\004\041\u012d\001\001\000\004" +
    "\041\u0132\001\001\000\002\001\001\000\004\040\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Error Sintactico cerca de < " + t.getContenido() + " > linea " + t.getLinea() + ", columna " + t.getColumna(), null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperacionAritmetica3 ::= parentesisIzquierdo OperacionAritmetica parentesisDerecho 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OperacionAritmetica3 ::= Variable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OperacionAritmetica3 ::= entero 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica3",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OperacionAritmetica2 ::= OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorDivision OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica2",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OperacionAritmetica ::= OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OperacionAritmetica ::= OperacionAritmetica operadorResta OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OperacionAritmetica ::= OperacionAritmetica operadorSuma OperacionAritmetica2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Return ::= RETURN constStr puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Return",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Return ::= RETURN constChar puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Return",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Return ::= RETURN OperacionAritmetica puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Return",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InicializacionArregloComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionArregloComa",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InicializacionArregloComa ::= coma InicializacionArreglo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionArregloComa",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InicializacionArreglo ::= constStr InicializacionArregloComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionArreglo",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InicializacionArreglo ::= constChar InicializacionArregloComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionArreglo",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // InicializacionArreglo ::= OperacionAritmetica InicializacionArregloComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InicializacionArreglo",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ElementoDeUnArreglo ::= nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ElementoDeUnArreglo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Variable ::= ElementoDeUnArreglo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Variable ::= nombreVariable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IncrementarDecrementarVariable ::= operadorIncrementoDecremento Variable puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncrementarDecrementarVariable",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IncrementarDecrementarVariable ::= Variable operadorIncrementoDecremento puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IncrementarDecrementarVariable",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AsignacionVariableComa ::= puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariableComa",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AsignacionVariableComa ::= coma AsignacionVariable 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariableComa",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AsignacionVariable ::= Variable igual constStr AsignacionVariableComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AsignacionVariable ::= Variable igual constChar AsignacionVariableComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AsignacionVariable ::= Variable operadorAritmeticoIgual OperacionAritmetica AsignacionVariableComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AsignacionVariable ::= Variable igual OperacionAritmetica AsignacionVariableComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AsignacionVariable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListaVariablesComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariablesComa",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListaVariablesComa ::= coma ListaVariables 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariablesComa",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListaVariables ::= nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListaVariables ::= nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListaVariables ::= nombreVariable igual constStr ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListaVariables ::= nombreVariable igual constChar ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListaVariables ::= nombreVariable igual OperacionAritmetica ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListaVariables ::= Variable ListaVariablesComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaVariables",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DeclaracionVariables ::= tipoVariable ListaVariables puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionVariables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondicionOperadorLogico ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CondicionOperadorLogico ::= operadorLogico Condicion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CondicionOperadorLogico",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condicion ::= constStr operadorRelacional OperacionAritmetica CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion ::= constChar operadorRelacional OperacionAritmetica CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= OperacionAritmetica operadorRelacional constStr CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= OperacionAritmetica operadorRelacional constChar CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= OperacionAritmetica operadorRelacional OperacionAritmetica CondicionOperadorLogico 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForActualizacionComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacionComa",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForActualizacionComa ::= coma ForActualizacion 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacionComa",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForActualizacion ::= operadorIncrementoDecremento Variable ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForActualizacion ::= Variable operadorIncrementoDecremento ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ForActualizacion ::= Variable igual constStr ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ForActualizacion ::= Variable igual constChar ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ForActualizacion ::= Variable operadorAritmeticoIgual OperacionAritmetica ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ForActualizacion ::= Variable igual OperacionAritmetica ForActualizacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForActualizacion",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ForInicializacionComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacionComa",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ForInicializacionComa ::= coma ForInicializacion2 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacionComa",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ForInicializacion2 ::= Variable igual constStr ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ForInicializacion2 ::= Variable igual constChar ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ForInicializacion2 ::= Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForInicializacion2 ::= Variable igual OperacionAritmetica ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ForInicializacion ::= Variable igual constStr ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ForInicializacion ::= Variable igual constChar ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ForInicializacion ::= Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForInicializacion ::= Variable igual OperacionAritmetica ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForInicializacion ::= tipoVariable nombreVariable igual constStr ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForInicializacion ::= tipoVariable nombreVariable igual constChar ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForInicializacion ::= tipoVariable nombreVariable igual OperacionAritmetica ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ForInicializacion ::= tipoVariable Variable ForInicializacionComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForInicializacion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // For ::= FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // For ::= FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // For ::= FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("For",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("While",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Else ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Else ::= ELSE llaveIzquierda Codigo llaveDerecha 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("If",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Printf ::= printf parentesisIzquierdo constStr coma nombreVariable parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Printf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Printf ::= printf parentesisIzquierdo constStr coma constChar parametroScanf parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Printf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Printf ::= printf parentesisIzquierdo constStr coma entero parametroScanf parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Printf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Printf ::= printf parentesisIzquierdo constStr coma constStr parametroScanf parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Printf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Printf ::= printf parentesisIzquierdo constStr parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Printf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Scanf ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Scanf",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Scanf ::= scanf parentesisIzquierdo parametroScanf coma and nombreVariable parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Scanf",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Codigo ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Codigo ::= For Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Codigo ::= If Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Codigo ::= While Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Codigo ::= Scanf Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Codigo ::= Printf Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Codigo ::= IncrementarDecrementarVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Codigo ::= AsignacionVariable Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Codigo ::= DeclaracionVariables Codigo 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FuncionesParametrosComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesParametrosComa",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FuncionesParametrosComa ::= coma FuncionesParametros 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesParametrosComa",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FuncionesParametros ::= tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho FuncionesParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesParametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FuncionesParametros ::= tipoVariable nombreVariable FuncionesParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesParametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FuncionesParametros ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesParametros",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Funciones ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Funciones ::= tipoVariable nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda Codigo llaveDerecha Funciones 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Funciones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda Codigo RETURN entero puntoYComa llaveDerecha Funciones 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionFuncionParametrosComa ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametrosComa",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionFuncionParametrosComa ::= coma DeclaracionFuncionParametros 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametrosComa",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionFuncionParametros ::= 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclaracionFuncionParametros ::= tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclaracionFuncionParametros ::= tipoVariable nombreVariable DeclaracionFuncionParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclaracionFuncionParametros ::= tipoVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclaracionFuncionParametros ::= tipoVariable DeclaracionFuncionParametrosComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionParametros",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclaracionFuncion ::= tipoVariable nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Main 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= DeclaracionFuncion S 
            {
              Token RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

