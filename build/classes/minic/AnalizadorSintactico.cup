package minic;

import java_cup.runtime.*;
import ast.*;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};


/* Terminals Tokens */



terminal INTEGER, CHAR, STRING;

terminal nombreVariable nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar constChar; 
terminal constStr constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico;
terminal puntoYComa;
terminal coma;
terminal parametroScanf parametroScanf;
terminal entero entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal MainClass main;
non terminal Codigo codigo;

non terminal DeclaracionFuncion declaracion_funcion;
non terminal OperacionAritmetica operacion_aritmetica;
non terminal OperacionAritmetica2 operacion_aritmetica2;
non terminal OperacionAritmetica3 operacion_aritmetica3;

non terminal DeclaracionVariables declaracion_variables;
non terminal Tipo tipo;
non terminal Variable variable;
non terminal ElementoDeUnArreglo elemento_array;
non terminal AsignacionVariableComa asignacion_variable_coma;

non terminal AsignacionVariable asignacion_variable;
non terminal IncrementarDecrementarVariable;
non terminal Scanf scans;
non terminal Printf print;
non terminal If _if;
non terminal Else else;
non terminal While _while;
non terminal For _for;

non terminal ForInicializacion for_inicializacion;
non terminal ForInicializacion2;
non terminal ForActualizacion for_actualizacion;
non terminal ForActualizacionComa; 


non terminal ListaVariables lista_variables;
non terminal ListaVariablesComa lista_variablesComa;

non terminal ForInicializacionComa;

non terminal Condicion condicion;
non terminal CondicionOperadorLogico;
non terminal InicializacionArreglo inicializacion_arreglo;
non terminal InicializacionArregloComa inicializacion_arreglo_coma;
non terminal DeclaracionFuncionParametros declaracion_funcion_parametros;
non terminal DeclaracionFuncionParametrosComa declaracion_funcion_parametros_coma;
non terminal Funciones funciones;
non terminal FuncionesParametros funciones_parametros;
non terminal FuncionesParametrosComa funciones_parametros_coma;
non terminal LlamadoAFuncion llamado_funcion;
non terminal LlamadoAFuncionParametros llamado_funcion_parametros;
non terminal LlamadoAFuncionParametrosComa llamado_funcion_parametros_coma;
non terminal Return;

start with programa;

programa ::= declaracion_funcion:df  programa:p                                 {: RESULT = new Programa(df, p); :}
     | main:m                                                                   {:   RESULT = new Programa(m); :};

main ::= tipo:t MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f         {: RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); :};

codigo ::= declaracion_variables:dv codigo:c                                                             {: RESULT = new Codigo(dv, c); :} 
         | asignacion_variable:av codigo:c                                                               {: RESULT = new Codigo(av,c);  :}
         | IncrementarDecrementarVariable codigo
         | print:p codigo:c                                                                              {:  RESULT = new Codigo(p,c); /*System.out.print( RESULT.p.cs._constStr);*/ :}
         | scans:s codigo:c                                                                              {:  RESULT = new Codigo(s,c);  :}
         | _while:w codigo:c                                                                             {:  RESULT = new Codigo(w,c);  :}
         | _if:i codigo:c                                                                                {:  RESULT = new Codigo(i,c);  :}
         | _for:f codigo:c                                                                               {:  RESULT = new Codigo(f,c);  :}
         | llamado_funcion:lf puntoYComa codigo:c                                                        {:  RESULT = new Codigo(lf,new puntoYComa(), c);  :}   
         | RETURN operacion_aritmetica:o puntoYComa codigo:c                                             {:  RESULT = new Codigo(new RETURN(), o, new puntoYComa(),   c); :}           
         | RETURN constChar:csc puntoYComa codigo:c                                                      {:  RESULT = new Codigo(new RETURN(), new constChar(csc._constChar, csc.linea, csc.columna), new puntoYComa(), c); :}
         | RETURN constStr:cst puntoYComa codigo:c                                                       {:  RESULT = new Codigo(new RETURN(), new constStr(cst._constStr, cst.linea, cst.columna), new puntoYComa(),  c); :}
         | error codigo:c                                                                                {:  System.out.println("ERROR"); RESULT = new Codigo(c); :}
         |;

declaracion_variables ::= tipo:t lista_variables:lv puntoYComa {: RESULT = new DeclaracionVariables(t,lv, new puntoYComa() );   :};

tipo ::= INTEGER {: RESULT = new IntegerTipo(); :}
       | STRING  {: RESULT = new StringTipo();  :}  
       | CHAR    {: RESULT = new CharTipo();   :};

lista_variables ::= variable:v lista_variablesComa:lc                                                                                                                                    {: RESULT = new ListaVariables(v,lc);  :}
                 | nombreVariable:id igual operacion_aritmetica:o lista_variablesComa:lc                                                                                                 {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, lc);  :}
                 | nombreVariable:id igual constChar:csc lista_variablesComa:lc                                                                                                          {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), lc);   :}
                 | nombreVariable:id igual constStr:css lista_variablesComa:lc                                                                                                           {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), lc);   :}
                 | nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho igual llaveIzquierda inicializacion_arreglo:ia llaveDerecha lista_variablesComa:lv         {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha(), lv);  :}
                 | nombreVariable:id corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo:iA llaveDerecha lista_variablesComa:lv                                {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha(), lv);  :};

lista_variablesComa ::= coma lista_variables:lv                                                                                                                                          {: RESULT = new ListaVariablesComa(lv, new coma()); :}
                     |;



declaracion_funcion ::= tipo:t nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfp parentesisDerecho puntoYComa     {:  RESULT = new DeclaracionFuncion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfp, new parentesisDerecho(), new puntoYComa());  :}
                     | VOID nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfs parentesisDerecho puntoYComa        {:  RESULT = new DeclaracionFuncion(new VOID(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfs, new parentesisDerecho(), new puntoYComa());  :}
                     | error puntoYComa                                                                                                  {:  System.out.println("ERROR");  RESULT = new DeclaracionFuncion(new puntoYComa());  :};

declaracion_funcion_parametros ::= tipo:t declaracion_funcion_parametros_coma:dfp                                                        {:  RESULT = new DeclaracionFuncionParametros(t,dfp);    :}
                               | tipo:t corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp                        {:  RESULT = new DeclaracionFuncionParametros(t,new corcheteIzquierdo(), new corcheteDerecho(), dfp);         :}
                               | tipo:t nombreVariable:id declaracion_funcion_parametros_coma:dfp                                        {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), dfp);  :}  
                               | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp      {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), dfp);    :}
                               |;
declaracion_funcion_parametros_coma ::= coma declaracion_funcion_parametros:dfp                                                           {: RESULT = new DeclaracionFuncionParametrosComa(new coma(), dfp);    :}
                                   |;

funciones ::= tipo:t nombreVariable:id parentesisIzquierdo funciones_parametros:fp parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f        {:  RESULT = new Funciones(t,new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | VOID nombreVariable:id parentesisIzquierdo funciones_parametros:fp parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f          {:  RESULT = new Funciones(new VOID(),new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | tipo:t error parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f                                                                {:  System.out.println("ERROR"); RESULT = new Funciones(t, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | VOID error parentesisDerecho llaveIzquierda codigo:c llaveDerecha funciones:f                                                                  {:  System.out.println("ERROR"); RESULT = new Funciones(new VOID(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            |;

funciones_parametros ::= tipo:t nombreVariable:id funciones_parametros_coma:fpc                                                {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), fpc); :}
                      | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho funciones_parametros_coma:fpc               {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), fpc); :}
                      |;

funciones_parametros_coma ::= coma funciones_parametros:fp                                                                     {:  RESULT = new FuncionesParametrosComa(new coma(), fp); :}
                         |;

llamado_funcion ::= nombreVariable:id parentesisIzquierdo llamado_funcion_parametros:llfp parentesisDerecho      {:  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), llfp, new parentesisDerecho()); :}                
                  | nombreVariable:id error parentesisDerecho                                                    {:  System.out.println("ERROR");  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho());    :};

llamado_funcion_parametros ::= operacion_aritmetica:o llamado_funcion_parametros_coma:fpc                        {:  RESULT = new LlamadoAFuncionParametros(o,fpc); :}
                            | constChar:csc llamado_funcion_parametros_coma:fpc                                  {:  RESULT = new LlamadoAFuncionParametros(new constChar(csc._constChar, csc.linea, csc.columna),fpc); :}
                            | constStr:css llamado_funcion_parametros_coma:fpc                                   {:  RESULT = new LlamadoAFuncionParametros(new constStr(css._constStr, css.linea, css.columna),fpc); :}
                            |;

llamado_funcion_parametros_coma ::= coma llamado_funcion_parametros:lp                                           {: RESULT = new LlamadoAFuncionParametrosComa(new coma(), lp);   :}
                                |;

scans ::= scanf parentesisIzquierdo parametroScanf:p coma nombreVariable:id parentesisDerecho puntoYComa         {:    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho(), new puntoYComa());   :}
        | scanf parentesisIzquierdo parametroScanf:p coma elemento_array:e parentesisDerecho puntoYComa          {:    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), e, new parentesisDerecho(), new puntoYComa());   :};


print ::= printf parentesisIzquierdo constStr:csts parentesisDerecho puntoYComa                                  {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new parentesisDerecho(), new puntoYComa());  :}
         | printf parentesisIzquierdo constStr:csts coma operacion_aritmetica:o parentesisDerecho puntoYComa     {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new coma(), o, new parentesisDerecho(), new puntoYComa()); :}
        ;

_if ::= IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigo:cg llaveDerecha else:e   {: RESULT = new If(new parentesisIzquierdo() , c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e);  :}
     | IF error parentesisDerecho llaveIzquierda codigo:c llaveDerecha else:e                               {: RESULT = new If(new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :};

else ::= ELSE IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigo:cg llaveDerecha else:e    {: RESULT = new Else(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e); :}
       | ELSE llaveIzquierda codigo:c llaveDerecha                                                                 {: RESULT = new Else(new llaveIzquierda(), c, new llaveDerecha()); :}
       | ELSE IF error parentesisDerecho llaveIzquierda codigo:c llaveDerecha else:e                               {: System.out.println("ERROR"); RESULT = new Else( new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :}
       |;

_while ::= WHILE parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigo:cg llaveDerecha           {: RESULT = new While(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}
        | WHILE error parentesisDerecho llaveIzquierda codigo:cg llaveDerecha                                      {: System.out.println("ERROR");RESULT = new While(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :};

_for ::= FOR parentesisIzquierdo for_inicializacion:fi puntoYComa condicion:c puntoYComa for_actualizacion:fa parentesisDerecho llaveIzquierda codigo:cg llaveDerecha   
      {:  RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha() ); :}
      
      | FOR parentesisIzquierdo puntoYComa condicion:c puntoYComa for_actualizacion:fa parentesisDerecho llaveIzquierda codigo:cg llaveDerecha
      {: RESULT = new For( new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());    :}

      | FOR parentesisIzquierdo for_inicializacion:fi puntoYComa condicion:c puntoYComa parentesisDerecho llaveIzquierda codigo:cg llaveDerecha
      {:    RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}

      | FOR parentesisIzquierdo puntoYComa condicion:c puntoYComa parentesisDerecho llaveIzquierda codigo:cg llaveDerecha
      {:    RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}

      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigo llaveDerecha
      | FOR error parentesisDerecho llaveIzquierda codigo llaveDerecha;

for_inicializacion ::= tipo variable ForInicializacionComa
                    | tipo nombreVariable igual operacion_aritmetica ForInicializacionComa
                    | tipo nombreVariable igual constChar ForInicializacionComa
                    | tipo nombreVariable igual constStr ForInicializacionComa
                    | variable igual operacion_aritmetica ForInicializacionComa
                    | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                    | variable igual constChar ForInicializacionComa
                    | variable igual constStr ForInicializacionComa;

ForInicializacion2 ::= variable igual operacion_aritmetica ForInicializacionComa
                     | variable operadorAritmeticoIgual operacion_aritmetica ForInicializacionComa
                     | variable igual constChar ForInicializacionComa
                     | variable igual constStr ForInicializacionComa;

ForInicializacionComa ::= coma ForInicializacion2
                        |;

for_actualizacion ::= variable igual operacion_aritmetica ForActualizacionComa
                   | variable operadorAritmeticoIgual operacion_aritmetica ForActualizacionComa
                   | variable igual constChar ForActualizacionComa
                   | variable igual constStr ForActualizacionComa
                   | variable operadorIncrementoDecremento ForActualizacionComa
                   | operadorIncrementoDecremento variable ForActualizacionComa;

ForActualizacionComa ::= coma for_actualizacion
                       |;

condicion ::= operacion_aritmetica operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constChar CondicionOperadorLogico
            | operacion_aritmetica operadorRelacional constStr CondicionOperadorLogico
            | constChar operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | constStr operadorRelacional operacion_aritmetica CondicionOperadorLogico
            | parentesisIzquierdo condicion parentesisDerecho CondicionOperadorLogico;

CondicionOperadorLogico ::= operadorLogico condicion
                      |;

asignacion_variable ::= variable:v igual operacion_aritmetica:oa asignacion_variable_coma:av {: RESULT = new AsignacionVariable(v,oa,av);  :}
                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o asignacion_variable_coma:av {:  RESULT = new AsignacionVariable(v,o,av, new operadorAritmeticoIgual());  :}
                     | variable:v igual constChar asignacion_variable_coma:ac /*{: RESULT = new AsignacionVariable(v,ac,new constChar()); :}*/
                     | variable:v igual constStr asignacion_variable_coma:ac /*{:  RESULT = new AsignacionVariable(v,ac, new constStr());:}*/
                     | error puntoYComa;

asignacion_variable_coma ::= coma asignacion_variable:av   {: RESULT = new AsignacionVariableComa(av);  :}
                        | puntoYComa;

IncrementarDecrementarVariable ::= variable operadorIncrementoDecremento puntoYComa
                                 | operadorIncrementoDecremento variable puntoYComa;

variable ::= nombreVariable:id    {: RESULT = new Variable(new nombreVariable(id._nombreVariable, id.linea, id.columna));   :}
           | elemento_array:array    {: RESULT = new Variable(array);   :};

elemento_array ::= nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho {: RESULT = new ElementoDeUnArreglo(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho()); :} ;

inicializacion_arreglo ::= operacion_aritmetica  inicializacion_arreglo_coma
                        | constChar  inicializacion_arreglo_coma
                        | constStr  inicializacion_arreglo_coma;

 inicializacion_arreglo_coma ::= coma inicializacion_arreglo
                            |;


operacion_aritmetica ::= operacion_aritmetica operadorSuma operacion_aritmetica2
                      | operacion_aritmetica operadorResta operacion_aritmetica2
                      | operacion_aritmetica2;

operacion_aritmetica2 ::= operacion_aritmetica2 operadorMultiplicacion operacion_aritmetica3
                       | operacion_aritmetica2 operadorDivision operacion_aritmetica3
                       | operacion_aritmetica3;

operacion_aritmetica3 ::= entero
                       | variable
                       | llamado_funcion
                       | parentesisIzquierdo operacion_aritmetica parentesisDerecho;