package minic;
import java_cup.runtime.*;
import java.io.FileReader;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Error Sintactico cerca de < " + t.getContenido() + " > linea " + t.getLinea() + ", columna " + t.getColumna(), null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }
:};

non terminal Token S, Main, Codigo, DeclaracionVariable, Variable,
InicializacionVariable, OperacionAritmetica1, OperacionAritmetica2,
OperacionAritmetica3, If, Else, While, Condicion, CondicionOperadorLogico;

terminal Token tipoVariable, nombreVariable, IF, ELSE, WHILE, FOR, TRUE, FALSE,
MAIN, RETURN, corcheteIzquierdo, corcheteDerecho, llaveIzquierda, llaveDerecha,
constChar, constStr, parentesisIzquierdo, parentesisDerecho, igual, printf, scanf,
operadorSuma, operadorResta, operadorMultiplicacion, operadorDivision,
operadorRelacional, operadorLogico, entero, puntoYComa, coma, parametroScanf, and;

start with S;

S ::= Main;

Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda Codigo RETURN entero puntoYComa llaveDerecha;

Codigo ::= DeclaracionVariable Codigo
           | InicializacionVariable Codigo
           | While Codigo
           | If Codigo
           |;

DeclaracionVariable ::= tipoVariable Variable puntoYComa;
Variable ::= nombreVariable Variable
           | coma nombreVariable Variable
           | nombreVariable igual entero Variable
           | nombreVariable igual constChar Variable
           | nombreVariable igual constStr Variable
           | coma nombreVariable igual entero Variable
           | coma nombreVariable igual constChar Variable
           | coma nombreVariable igual constStr Variable
           |;

InicializacionVariable ::= nombreVariable igual OperacionAritmetica1 puntoYComa
                         | nombreVariable igual constChar puntoYComa
                         | nombreVariable igual constStr puntoYComa;

OperacionAritmetica1 ::= OperacionAritmetica1 operadorSuma OperacionAritmetica2
                       | OperacionAritmetica1 operadorResta OperacionAritmetica2
                       | OperacionAritmetica2;
OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3
                       | OperacionAritmetica2 operadorDivision OperacionAritmetica3
                       | OperacionAritmetica3;
OperacionAritmetica3 ::= entero
                       | nombreVariable
                       | parentesisIzquierdo OperacionAritmetica1 parentesisDerecho;

If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else;
Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha Else
       | ELSE llaveIzquierda Codigo llaveDerecha
       |;

While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda Codigo llaveDerecha;

Condicion ::= nombreVariable operadorRelacional nombreVariable CondicionOperadorLogico
                 | nombreVariable operadorRelacional entero CondicionOperadorLogico
                 | nombreVariable operadorRelacional constChar CondicionOperadorLogico
                 | nombreVariable operadorRelacional constStr CondicionOperadorLogico
                 | entero operadorRelacional nombreVariable CondicionOperadorLogico
                 | constChar operadorRelacional nombreVariable CondicionOperadorLogico
                 | constStr operadorRelacional nombreVariable CondicionOperadorLogico
                 | parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico;
CondicionOperadorLogico ::= operadorLogico Condicion
                      |;