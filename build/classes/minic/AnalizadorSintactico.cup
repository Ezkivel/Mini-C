package minic;

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java.io.*;
import java.util.Vector;

parser code{:

    AnalizadorLexico lexer;
    
    public Programa generarPrograma;
    public  ListaTipos lista = new ListaTipos();

    public Programa getGenerarPrograma() {
        return this.generarPrograma;
    }
    
    public ListaTipos getListaVariables(){
        return this.lista;
    }

    
    public AnalizadorSintactico(AnalizadorLexico lex) {
      super(lex);
      lexer = lex;
    }

    public void syntax_error(Symbol s)
    {
     

        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};

/* Terminals Tokens */



terminal INTEGER, CHAR, STRING;

terminal nombreVariable nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar constChar; 
terminal constStr constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal operadorIncrementoDecremento operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico operadorLogico;
terminal puntoYComa;
terminal coma;
terminal parametroScanf parametroScanf;
terminal entero entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal MainClass main;
non terminal Codigo codigo;
non terminal DeclaracionFuncion declaracion_funcion;
non terminal OperacionAritmetica operacion_aritmetica;
non terminal OperacionAritmetica2 operacion_aritmetica2;
non terminal OperacionAritmetica3 operacion_aritmetica3;
non terminal DeclaracionVariable declaracion_variable;
non terminal Tipo tipo;
non terminal Variable variable;
non terminal ElementoDeUnArreglo elemento_array;
non terminal AsignacionVariableComa asignacion_variable_coma;
non terminal AsignacionVariable asignacion_variable;
non terminal IncrementarDecrementarVariable incrementarDecrementarVariable;
non terminal Scanf scans;
non terminal Printf print;
non terminal If _if;
non terminal Else else;
non terminal While _while;
non terminal For _for;
non terminal ForInicializacion for_inicializacion;
non terminal ForInicializacion2 for_inicializacion2;
non terminal ForActualizacion for_actualizacion;
non terminal ForActualizacionComa for_actualizacion_coma; 
non terminal ListaVariables lista_variables;
non terminal ForInicializacionComa for_inicializacion_coma;
non terminal Condicion condicion;
non terminal CondicionOperadorLogico condicion_operador_logico;
non terminal InicializacionArreglo inicializacion_arreglo;
non terminal InicializacionArregloComa inicializacion_arreglo_coma;
non terminal DeclaracionFuncionParametros declaracion_funcion_parametros;
non terminal DeclaracionFuncionParametrosComa declaracion_funcion_parametros_coma;
non terminal Funciones funciones;
non terminal FuncionesParametros funciones_parametros;
non terminal FuncionesParametrosComa funciones_parametros_coma;
non terminal LlamadoAFuncion llamado_funcion;
non terminal LlamadoAFuncionParametros llamado_funcion_parametros;
non terminal LlamadoAFuncionParametrosComa llamado_funcion_parametros_coma;
non terminal Return;
non terminal Codigos codigos;
non terminal DeclaracionVariables declaracion_variables;


programa ::= declaracion_funcion:df  programa:p                                 {:   RESULT = new Programa(df, p);   :}
     | main:m                                                                   {:   RESULT = new Programa(m);  parser.generarPrograma = RESULT; :};

main ::= tipo:t MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f         {: RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); :};

codigos ::= codigo:c codigos:cs             {:  cs.add(c); RESULT = cs; :}
            |                               {:   RESULT = new Codigos();  :};



codigo ::= declaracion_variable:dv                                                            {: RESULT = dv;  parser.lista.add(dv); :} 
         | asignacion_variable:av                                                             {: RESULT = av;  :}
         | incrementarDecrementarVariable:i                                                   {: RESULT = i;  :}
         | print:p                                                                            {: RESULT = p; :}
         | scans:s                                                                            {: RESULT = s; :}
         | _while:w                                                                           {: RESULT = w;  :}
         | _if:i                                                                              {: RESULT = i;  :}
         | _for:f                                                                             {: RESULT = f;  :}
         | llamado_funcion:lf puntoYComa                                                      {: RESULT = new Codigo(lf,new puntoYComa());  :}   
         | RETURN operacion_aritmetica:o puntoYComa                                           {: RESULT = new Codigo(new RETURN(), o, new puntoYComa()); :}           
         | RETURN constChar:csc puntoYComa                                                    {: RESULT = new Codigo(new RETURN(), new constChar(csc._constChar, csc.linea, csc.columna), new puntoYComa()); :}
         | RETURN constStr:cst puntoYComa                                                     {: RESULT = new Codigo( new RETURN(), new constStr(cst._constStr, cst.linea, cst.columna), new puntoYComa() ); :}
         | error codigo:c                                                                     {: System.out.println("ERROR"); :};



tipo ::= INTEGER {: RESULT = new IntegerTipo(); :}
       | STRING  {: RESULT = new StringTipo();  :}  
       | CHAR    {: RESULT = new CharTipo();   :};

declaracion_variable ::= tipo:t declaracion_variables:dv puntoYComa {: RESULT = new DeclaracionVariable(t,dv, new puntoYComa() );   :};

declaracion_variables ::= lista_variables:lvs coma declaracion_variables:dvs    {: dvs.add(lvs); RESULT = dvs; :}
                          | lista_variables:lvs                                 {: RESULT = new DeclaracionVariables(); RESULT.add( lvs); :};

lista_variables ::= variable:v                                     {: RESULT = new ListaVariables(v);  :}
                 | nombreVariable:id igual operacion_aritmetica:o  {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o);  :}
                 | nombreVariable:id igual constChar:csc           {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna)); :}
                 | nombreVariable:id igual constStr:css            {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna));   :}
                 | nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho igual llaveIzquierda inicializacion_arreglo:ia llaveDerecha         
                {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha());  :}
                 | nombreVariable:id corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo:iA llaveDerecha     
                {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha());  :};


declaracion_funcion ::= tipo:t nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfp parentesisDerecho puntoYComa     {:  RESULT = new DeclaracionFuncion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfp, new parentesisDerecho(), new puntoYComa());  :}
                     | VOID nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfs parentesisDerecho puntoYComa        {:  RESULT = new DeclaracionFuncion(new VOID(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfs, new parentesisDerecho(), new puntoYComa());  :}
                     | error puntoYComa                                                                                                  {:  System.out.println("ERROR");  RESULT = new DeclaracionFuncion(new puntoYComa());  :};

declaracion_funcion_parametros ::= tipo:t declaracion_funcion_parametros_coma:dfp                                                        {:  RESULT = new DeclaracionFuncionParametros(t,dfp);    :}
                               | tipo:t corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp                        {:  RESULT = new DeclaracionFuncionParametros(t,new corcheteIzquierdo(), new corcheteDerecho(), dfp);         :}
                               | tipo:t nombreVariable:id declaracion_funcion_parametros_coma:dfp                                        {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), dfp);  :}  
                               | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp      {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), dfp);    :}
                               |;
declaracion_funcion_parametros_coma ::= coma declaracion_funcion_parametros:dfp                                                           {: RESULT = new DeclaracionFuncionParametrosComa(new coma(), dfp);    :}
                                   |;

funciones ::= tipo:t nombreVariable:id parentesisIzquierdo funciones_parametros:fp parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f        {:  RESULT = new Funciones(t,new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | VOID nombreVariable:id parentesisIzquierdo funciones_parametros:fp parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f          {:  RESULT = new Funciones(new VOID(),new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | tipo:t error parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f                                                                {:  System.out.println("ERROR"); RESULT = new Funciones(t, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | VOID error parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f                                                                  {:  System.out.println("ERROR"); RESULT = new Funciones(new VOID(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            |;

funciones_parametros ::= tipo:t nombreVariable:id funciones_parametros_coma:fpc                                                {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), fpc); :}
                      | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho funciones_parametros_coma:fpc               {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), fpc); :}
                      |;

funciones_parametros_coma ::= coma funciones_parametros:fp                                                                     {:  RESULT = new FuncionesParametrosComa(new coma(), fp); :}
                         |;

llamado_funcion ::= nombreVariable:id parentesisIzquierdo llamado_funcion_parametros:llfp parentesisDerecho      {:  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), llfp, new parentesisDerecho()); :}                
                  | nombreVariable:id error parentesisDerecho                                                    {:  System.out.println("ERROR");  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho());    :};

llamado_funcion_parametros ::= operacion_aritmetica:o llamado_funcion_parametros_coma:fpc                        {:  RESULT = new LlamadoAFuncionParametros(o,fpc); :}
                            | constChar:csc llamado_funcion_parametros_coma:fpc                                  {:  RESULT = new LlamadoAFuncionParametros(new constChar(csc._constChar, csc.linea, csc.columna),fpc); :}
                            | constStr:css llamado_funcion_parametros_coma:fpc                                   {:  RESULT = new LlamadoAFuncionParametros(new constStr(css._constStr, css.linea, css.columna),fpc); :}
                            |;

llamado_funcion_parametros_coma ::= coma llamado_funcion_parametros:lp                                           {: RESULT = new LlamadoAFuncionParametrosComa(new coma(), lp);   :}
                                |;

scans ::= scanf parentesisIzquierdo parametroScanf:p coma nombreVariable:id parentesisDerecho puntoYComa         {:    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho(), new puntoYComa());   :}
        | scanf parentesisIzquierdo parametroScanf:p coma elemento_array:e parentesisDerecho puntoYComa          {:    RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), e, new parentesisDerecho(), new puntoYComa());   :};


print ::= printf parentesisIzquierdo constStr:csts parentesisDerecho puntoYComa                                  {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new parentesisDerecho(), new puntoYComa());  :}
         | printf parentesisIzquierdo constStr:csts coma operacion_aritmetica:o parentesisDerecho puntoYComa     {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new coma(), o, new parentesisDerecho(), new puntoYComa()); :}
        ;

_if ::= IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigos:cg llaveDerecha else:e   {: RESULT = new If(new parentesisIzquierdo() , c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e);  :}
     | IF error parentesisDerecho llaveIzquierda codigos:c llaveDerecha else:e                               {: RESULT = new If(new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :};

else ::= ELSE IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigos:cg llaveDerecha else:e    {: RESULT = new Else(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e); :}
       | ELSE llaveIzquierda codigos:c llaveDerecha                                                                 {: RESULT = new Else(new llaveIzquierda(), c, new llaveDerecha()); :}
       | ELSE IF error parentesisDerecho llaveIzquierda codigos:c llaveDerecha else:e                               {: System.out.println("ERROR"); RESULT = new Else( new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :}
       |;

_while ::= WHILE parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigos:cg llaveDerecha           {: RESULT = new While(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}
        | WHILE error parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                      {: System.out.println("ERROR");RESULT = new While(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :};

_for ::= FOR parentesisIzquierdo for_inicializacion:fi puntoYComa condicion:c puntoYComa for_actualizacion:fa parentesisDerecho llaveIzquierda codigos:cg llaveDerecha    {:   RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha() ); :}
      | FOR parentesisIzquierdo puntoYComa condicion:c puntoYComa for_actualizacion:fa parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                           {:   RESULT = new For( new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());    :}
      | FOR parentesisIzquierdo for_inicializacion:fi puntoYComa condicion:c puntoYComa parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                          {:   RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}
      | FOR parentesisIzquierdo puntoYComa condicion:c puntoYComa parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                                {:   RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), c, new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}
      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                                            {:   RESULT = new For(new parentesisIzquierdo(), new puntoYComa(), new puntoYComa(), new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :}
      | FOR error parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                                                                                {:   System.out.println("ERROR");RESULT = new For(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());   :};


for_inicializacion ::= tipo:t variable:v for_inicializacion_coma:fi                                                {:  RESULT = new ForInicializacion(t,v,fi);   :}
                    | tipo:t nombreVariable:id igual operacion_aritmetica:o for_inicializacion_coma:fic            {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, fic);   :}
                    | tipo:t nombreVariable:id igual constChar:csc for_inicializacion_coma:fic                     {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic); :}
                    | tipo:t nombreVariable:id igual constStr:css for_inicializacion_coma:fic                      {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), fic);   :}
                    | variable:v igual operacion_aritmetica:o for_inicializacion_coma:fic                          {:  RESULT = new ForInicializacion(v, new igual(), o, fic);   :}
                    | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_inicializacion_coma:fic        {:  RESULT = new ForInicializacion(v, new operadorAritmeticoIgual(), o, fic);:}
                    | variable:v igual constChar:csc for_inicializacion_coma:fic                                   {:  RESULT = new ForInicializacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);:}
                    | variable:v igual constStr:css for_inicializacion_coma:fic                                    {:  RESULT = new ForInicializacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);    :};

for_inicializacion2 ::= variable:v igual operacion_aritmetica:o for_inicializacion_coma:fic                     {:  RESULT = new ForInicializacion2(v, new igual(), o, fic);  :}
                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_inicializacion_coma:fic    {:  RESULT = new ForInicializacion2(v, new operadorAritmeticoIgual(), o, fic);   :}
                     | variable:v igual constChar:csc for_inicializacion_coma:fic                               {:  RESULT = new ForInicializacion2(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);  :}
                     | variable:v igual constStr:css for_inicializacion_coma:fic                                {:  RESULT = new ForInicializacion2(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);  :};

for_inicializacion_coma ::= coma for_inicializacion2:fic2                                                       {:  RESULT= new ForInicializacionComa(new coma(), fic2);  :}
                        |;

for_actualizacion ::= variable:v igual operacion_aritmetica:o for_actualizacion_coma:fac                     {:   RESULT = new ForActualizacion(v, new igual(), o, fac);    :}
                   | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_actualizacion_coma:fac    {:   RESULT = new ForActualizacion(v, new operadorAritmeticoIgual(), o, fac);    :}
                   | variable:v igual constChar:csc for_actualizacion_coma:fac                               {:   RESULT = new ForActualizacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fac);    :}
                   | variable:v igual constStr:css for_actualizacion_coma:fac                                {:   RESULT = new ForActualizacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fac);    :}
                   | variable:v operadorIncrementoDecremento for_actualizacion_coma:fac                      {:   RESULT = new ForActualizacion(v, new operadorIncrementoDecremento(), fac); :}
                   | operadorIncrementoDecremento variable:v for_actualizacion_coma:fac                      {:   RESULT = new ForActualizacion(new operadorIncrementoDecremento(), v, fac); :};

for_actualizacion_coma ::= coma for_actualizacion:fa                                                         {: RESULT = new ForActualizacionComa(new coma(), fa ); :}
                       |;

condicion ::= operacion_aritmetica:o1 operadorRelacional operacion_aritmetica:o2 condicion_operador_logico:col         {: RESULT = new Condicion(o1, new operadorRelacional(), o2, col);  :}
            | operacion_aritmetica:o1 operadorRelacional constChar:csc condicion_operador_logico:col                   {: RESULT = new Condicion(o1, new operadorRelacional(), new constChar(csc._constChar, csc.linea, csc.columna), col); :}
            | operacion_aritmetica:o1 operadorRelacional constStr:css condicion_operador_logico:col                    {: RESULT = new Condicion(o1, new operadorRelacional(), new constStr(css._constStr, css.linea, css.columna), col); :}
            | constChar:csc operadorRelacional operacion_aritmetica:o1 condicion_operador_logico:col                   {: RESULT = new Condicion(new constChar(csc._constChar, csc.linea, csc.columna), new operadorRelacional(), o1, col); :}
            | constStr:css operadorRelacional operacion_aritmetica:o1 condicion_operador_logico:col                    {: RESULT = new Condicion(new constStr(css._constStr, css.linea, css.columna), new operadorRelacional(), o1, col); :}
            | parentesisIzquierdo condicion:c parentesisDerecho condicion_operador_logico:col                          {: RESULT = new Condicion(new parentesisIzquierdo(), c, new parentesisDerecho(), col); :};

condicion_operador_logico ::= operadorLogico condicion:c                                                               {:  RESULT = new CondicionOperadorLogico( new operadorLogico(), c);  :}
                      |;

asignacion_variable ::= variable:v igual operacion_aritmetica:oa asignacion_variable_coma:av                           {: RESULT = new AsignacionVariable(v, new igual(), oa,av);  :}
                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o asignacion_variable_coma:av           {: RESULT = new AsignacionVariable(v, new operadorAritmeticoIgual(), o, av);  :}
                     | variable:v igual constChar:csc asignacion_variable_coma:ac                                      {: RESULT = new AsignacionVariable(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna) , ac); :}
                     | variable:v igual constStr:css asignacion_variable_coma:ac                                       {: RESULT = new AsignacionVariable(v, new igual(), new constStr(css._constStr, css.linea, css.columna) , ac); :} 
                     | error puntoYComa                                                                                {: RESULT = new AsignacionVariable(new puntoYComa()); :};

asignacion_variable_coma ::= coma asignacion_variable:av                                                               {: RESULT = new AsignacionVariableComa( new coma(), av);  :}
                        | puntoYComa;

incrementarDecrementarVariable ::= variable:v operadorIncrementoDecremento puntoYComa                     {:  RESULT = new IncrementarDecrementarVariable(v, new operadorIncrementoDecremento(), new puntoYComa());  :}
                                 | operadorIncrementoDecremento variable:v puntoYComa                     {:  RESULT = new IncrementarDecrementarVariable(new operadorIncrementoDecremento(), v, new puntoYComa());  :};

variable ::= nombreVariable:id                                                                            {: RESULT = new Variable(new nombreVariable(id._nombreVariable, id.linea, id.columna));   :}
           | elemento_array:array                                                                         {: RESULT = new Variable(array);   :};

elemento_array ::= nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho             {: RESULT = new ElementoDeUnArreglo(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho()); :} ;

inicializacion_arreglo ::= operacion_aritmetica:o  inicializacion_arreglo_coma:i                          {:  RESULT = new InicializacionArreglo(o,i);   :}
                        | constChar:csc  inicializacion_arreglo_coma:i                                    {:  RESULT = new InicializacionArreglo(new constChar(csc._constChar, csc.linea, csc.columna),i);   :}
                        | constStr:css  inicializacion_arreglo_coma:i                                     {:  RESULT = new InicializacionArreglo(new constStr(css._constStr, css.linea, css.columna),i);   :};

 inicializacion_arreglo_coma ::= coma inicializacion_arreglo:i                                            {:  RESULT = new InicializacionArregloComa( new coma(), i); :}
                            |;


operacion_aritmetica ::= operacion_aritmetica:o1 operadorSuma operacion_aritmetica2:o2                   {: RESULT = new OperacionAritmetica(o1, new operadorSuma(), o2); :}
                      | operacion_aritmetica:o1 operadorResta operacion_aritmetica2:o2                   {: RESULT = new OperacionAritmetica(o1, new operadorResta(), o2); :}
                      | operacion_aritmetica2:o2                                                         {: RESULT = new OperacionAritmetica(o2); :}  ;

operacion_aritmetica2 ::= operacion_aritmetica2:o2 operadorMultiplicacion operacion_aritmetica3:o3       {: RESULT = new OperacionAritmetica2(o2, new operadorMultiplicacion(), o3); :}
                       | operacion_aritmetica2:o2 operadorDivision operacion_aritmetica3:o3              {: RESULT = new OperacionAritmetica2(o2, new operadorDivision(), o3); :}
                       | operacion_aritmetica3:o3                                                        {: RESULT = new OperacionAritmetica2(o3); :} ;

operacion_aritmetica3 ::= entero:e                                                                       {: RESULT = new OperacionAritmetica3(new entero(e._entero, e.linea, e.columna));   :}                                                                     
                       | variable:v                                                                      {: RESULT = new OperacionAritmetica3(v);    :} 
                       | llamado_funcion:lf                                                              {: RESULT = new OperacionAritmetica3(lf);    :} 
                       | parentesisIzquierdo operacion_aritmetica:o parentesisDerecho                    {: RESULT = new OperacionAritmetica3(new parentesisIzquierdo(), o, new parentesisDerecho());    :} ;