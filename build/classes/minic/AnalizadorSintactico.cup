package minic;

import java_cup.runtime.*;
import ast.*;

action code{:
:};

parser code{:
    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};


/* Terminals Tokens */

terminal tipoVariable;
terminal nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar; 
terminal constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico;
terminal puntoYComa;
terminal coma;
terminal parametroScanf;
terminal entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal Main;
non terminal Codigo codigo;
non terminal Codigos codigos;
non terminal Exp ;
non terminal DeclaracionFuncion declaracion_funcion;
/* non terminal DeclaracionVariables declaracion_variables; */

non terminal DeclaracionVariables;

non terminal Variable;

non terminal ListaVariables;
non terminal ListaVariablesComa;
non terminal AsignacionVariable;
non terminal AsignacionVariableComa;
non terminal Scanf;
non terminal Printf;
non terminal InicializacionArreglo;
non terminal InicializacionArregloComa;
non terminal IncrementarDecrementarVariable;
non terminal ElementoDeUnArreglo;
non terminal OperacionAritmetica;
non terminal OperacionAritmetica2;
non terminal OperacionAritmetica3;
non terminal If;
non terminal Else;
non terminal While;
non terminal For;
non terminal ForInicializacion;
non terminal ForInicializacion2;
non terminal ForInicializacionComa;
non terminal ForActualizacion;
non terminal ForActualizacionComa; 
non terminal Condicion;
non terminal CondicionOperadorLogico;

non terminal DeclaracionFuncionParametros;
non terminal DeclaracionFuncionParametrosComa;
non terminal Funciones;
non terminal FuncionesParametros;
non terminal FuncionesParametrosComa;
non terminal LlamadoAFuncion;
non terminal LlamadoAFuncionParametros;
non terminal LlamadoAFuncionParametrosComa;
non terminal Return;

start with programa;

programa ::= declaracion_funcion:df  programa:p {: RESULT = new Programa(df);   :}
     | Main;

Main ::= tipoVariable MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda codigos llaveDerecha Funciones;

codigos ::= codigo:c codigos:cs     {: cs.add(c); RESULT = cs; :}
            |                       {: RESULT = new Codigos(); :} ;

codigo ::= DeclaracionVariables
         | AsignacionVariable 
         | IncrementarDecrementarVariable 
         | Printf 
         | Scanf 
         | While 
         | If 
         | For 
         | Exp  
         | RETURN Exp
         | error;

Exp ::=   OperacionAritmetica puntoYComa
        | constChar puntoYComa
        | constStr puntoYComa ;

DeclaracionVariables ::= tipoVariable ListaVariables puntoYComa;


ListaVariables ::= Variable ListaVariablesComa
                 | nombreVariable igual OperacionAritmetica ListaVariablesComa
                 | nombreVariable igual constChar ListaVariablesComa
                 | nombreVariable igual constStr ListaVariablesComa
                 | nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa
                 | nombreVariable corcheteIzquierdo corcheteDerecho igual llaveIzquierda InicializacionArreglo llaveDerecha ListaVariablesComa
                 | error ListaVariablesComa;

ListaVariablesComa ::= coma ListaVariables
                     |;


declaracion_funcion ::= tipoVariable:t nombreVariable:nv parentesisIzquierdo DeclaracionFuncionParametros:dfp parentesisDerecho puntoYComa 
                     | VOID nombreVariable parentesisIzquierdo DeclaracionFuncionParametros parentesisDerecho puntoYComa
                     | error puntoYComa;

DeclaracionFuncionParametros ::= tipoVariable DeclaracionFuncionParametrosComa 
                               | tipoVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               | tipoVariable nombreVariable DeclaracionFuncionParametrosComa
                               | tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho DeclaracionFuncionParametrosComa
                               |;
DeclaracionFuncionParametrosComa ::= coma DeclaracionFuncionParametros
                                   |;

Funciones ::= tipoVariable nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigos llaveDerecha Funciones
            | VOID nombreVariable parentesisIzquierdo FuncionesParametros parentesisDerecho llaveIzquierda codigos llaveDerecha Funciones
            | tipoVariable error parentesisDerecho llaveIzquierda codigos llaveDerecha Funciones
            | VOID error parentesisDerecho llaveIzquierda codigos llaveDerecha Funciones
            |;

FuncionesParametros ::= tipoVariable nombreVariable FuncionesParametrosComa
                      | tipoVariable nombreVariable corcheteIzquierdo corcheteDerecho FuncionesParametrosComa
                      |;

FuncionesParametrosComa ::= coma FuncionesParametros
                         |;

LlamadoAFuncion ::= nombreVariable parentesisIzquierdo LlamadoAFuncionParametros parentesisDerecho
                  | nombreVariable error parentesisDerecho;

LlamadoAFuncionParametros ::= OperacionAritmetica LlamadoAFuncionParametrosComa
                            | constChar LlamadoAFuncionParametrosComa
                            | constStr LlamadoAFuncionParametrosComa
                            |;

LlamadoAFuncionParametrosComa ::= coma LlamadoAFuncionParametros
                                |;

Scanf ::= scanf parentesisIzquierdo parametroScanf coma nombreVariable parentesisDerecho puntoYComa
        | scanf parentesisIzquierdo parametroScanf coma ElementoDeUnArreglo parentesisDerecho puntoYComa;

Printf ::= printf parentesisIzquierdo constStr:c parentesisDerecho puntoYComa
         | printf parentesisIzquierdo constStr coma OperacionAritmetica parentesisDerecho puntoYComa;

If ::= IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigos llaveDerecha Else
     | IF error parentesisDerecho llaveIzquierda codigos llaveDerecha Else;

Else ::= ELSE IF parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigos llaveDerecha Else
       | ELSE llaveIzquierda codigos llaveDerecha
       | ELSE IF error parentesisDerecho llaveIzquierda codigos llaveDerecha Else
       |;

While ::= WHILE parentesisIzquierdo Condicion parentesisDerecho llaveIzquierda codigos llaveDerecha
        | WHILE error parentesisDerecho llaveIzquierda codigos llaveDerecha;

For ::= FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigos llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa ForActualizacion parentesisDerecho llaveIzquierda codigos llaveDerecha
      | FOR parentesisIzquierdo ForInicializacion puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha
      | FOR parentesisIzquierdo puntoYComa Condicion puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha
      | FOR parentesisIzquierdo puntoYComa puntoYComa parentesisDerecho llaveIzquierda codigos llaveDerecha
      | FOR error parentesisDerecho llaveIzquierda codigos llaveDerecha;

ForInicializacion ::= tipoVariable Variable ForInicializacionComa
                    | tipoVariable nombreVariable igual OperacionAritmetica ForInicializacionComa
                    | tipoVariable nombreVariable igual constChar ForInicializacionComa
                    | tipoVariable nombreVariable igual constStr ForInicializacionComa
                    | Variable igual OperacionAritmetica ForInicializacionComa
                    | Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa
                    | Variable igual constChar ForInicializacionComa
                    | Variable igual constStr ForInicializacionComa;

ForInicializacion2 ::= Variable igual OperacionAritmetica ForInicializacionComa
                     | Variable operadorAritmeticoIgual OperacionAritmetica ForInicializacionComa
                     | Variable igual constChar ForInicializacionComa
                     | Variable igual constStr ForInicializacionComa;

ForInicializacionComa ::= coma ForInicializacion2
                        |;

ForActualizacion ::= Variable igual OperacionAritmetica ForActualizacionComa
                   | Variable operadorAritmeticoIgual OperacionAritmetica ForActualizacionComa
                   | Variable igual constChar ForActualizacionComa
                   | Variable igual constStr ForActualizacionComa
                   | Variable operadorIncrementoDecremento ForActualizacionComa
                   | operadorIncrementoDecremento Variable ForActualizacionComa;

ForActualizacionComa ::= coma ForActualizacion
                       |;

Condicion ::= OperacionAritmetica operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | OperacionAritmetica operadorRelacional constChar CondicionOperadorLogico
            | OperacionAritmetica operadorRelacional constStr CondicionOperadorLogico
            | constChar operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | constStr operadorRelacional OperacionAritmetica CondicionOperadorLogico
            | parentesisIzquierdo Condicion parentesisDerecho CondicionOperadorLogico;

CondicionOperadorLogico ::= operadorLogico Condicion
                      |;

AsignacionVariable ::= Variable igual OperacionAritmetica AsignacionVariableComa
                     | Variable operadorAritmeticoIgual OperacionAritmetica AsignacionVariableComa
                     | Variable igual constChar AsignacionVariableComa
                     | Variable igual constStr AsignacionVariableComa
                     | error puntoYComa;

AsignacionVariableComa ::= coma AsignacionVariable
                        | puntoYComa;

IncrementarDecrementarVariable ::= Variable operadorIncrementoDecremento puntoYComa
                                 | operadorIncrementoDecremento Variable puntoYComa;

Variable ::= nombreVariable
           | ElementoDeUnArreglo;

ElementoDeUnArreglo ::= nombreVariable corcheteIzquierdo OperacionAritmetica corcheteDerecho;

InicializacionArreglo ::= OperacionAritmetica InicializacionArregloComa
                        | constChar InicializacionArregloComa
                        | constStr InicializacionArregloComa;

InicializacionArregloComa ::= coma InicializacionArreglo
                            |;


OperacionAritmetica ::= OperacionAritmetica operadorSuma OperacionAritmetica2
                      | OperacionAritmetica operadorResta OperacionAritmetica2
                      | OperacionAritmetica2;

OperacionAritmetica2 ::= OperacionAritmetica2 operadorMultiplicacion OperacionAritmetica3
                       | OperacionAritmetica2 operadorDivision OperacionAritmetica3
                       | OperacionAritmetica3;

OperacionAritmetica3 ::= entero
                       | Variable
                       | LlamadoAFuncion
                       | parentesisIzquierdo OperacionAritmetica parentesisDerecho;