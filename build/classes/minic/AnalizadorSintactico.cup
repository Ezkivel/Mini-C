package minic;

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java.io.*;
import java.util.Vector;

parser code{:

    AnalizadorLexico lexer;
    
    public Programa generarPrograma;
    public ListaTipos lista = new ListaTipos();
    public ListaTipos listaTemp = new ListaTipos();
    public Ambito ambitoActual = new Ambito();
    public Vector<Tipo> listaParametros = new Vector();
    public Vector<String> listaParametrosVariables = new Vector();
    public Tipo tipoRetorno = new Tipo();
    public boolean generar = false;
    public Vector<String> operacionAritmetica = new Vector();
    public Vector<String> operacionAritmeticaTemp = new Vector();
    public int errores = 0;
    public String llamadoAFuncionDerecha = "";

    public Vector<String> codigoIntermedio = new Vector();
    public int codigoIntermedio_temporales = -1;
    public int codigoIntermedio_etiquetas = -1;
    

    public Programa getGenerarPrograma() {
        return this.generarPrograma;
    }
    
    public ListaTipos GetTabla_Tipos(){
        return this.lista;
    }

    
    public AnalizadorSintactico(AnalizadorLexico lex) {
      super(lex);
      lexer = lex;
    }

    public boolean codigoFuenteValido() {
        if (errores > 0) {
            return false;
        }

        return true;
    }

    public boolean verificarSiLaFuncionYaFueDeclarada(String nombreFuncion) {
        if (nombreFuncion.equals("print") || nombreFuncion.equals("scanf")) {
            return true;
        }

        for(int i = 0; i < lista.size(); i++) {
            if (lista.elementAt(i).getNombre().equals(nombreFuncion) && lista.elementAt(i).isFuncion()) {
                return true;
            }
        }

        return false;
    }

    public boolean verificarParametrosDeLlamadaAFuncion(String nombreFuncion, Vector<Tipo> parametros) {
        if (nombreFuncion.equals("print") || nombreFuncion.equals("scanf")) {
            return true;
        }

        boolean parametrosIguales = false;

        for(int i = 0; i < lista.size(); i++) {
            if (lista.elementAt(i).getNombre().equals(nombreFuncion) && lista.elementAt(i).isFuncion()) {
                if (lista.elementAt(i).getParametros().size() == parametros.size()) {
                    int contadorParametrosIguales = 0;
                    int b = 0;

                    for (int a = parametros.size() - 1; a >= 0; a--) {
                        if (lista.elementAt(i).getParametros().elementAt(b).getClass() == parametros.elementAt(a).getClass()) {
                            contadorParametrosIguales++;
                        }

                        b++;
                    }

                    if (contadorParametrosIguales == parametros.size()) {
                        parametrosIguales = true;
                    }

                    break;
                }
            }
        }

        if (parametrosIguales) {
            return true;
        }

        return false;
    }

    public boolean verificarSiLaVariableYaFueDeclarada(Tipo tipoVariable, String nombreVariable, String ambito) {
        for(int i = 0; i < lista.size(); i++) {
            if (lista.elementAt(i).getNombre().equals(nombreVariable) && lista.elementAt(i).getTipo().getClass() == tipoVariable.getClass() && lista.elementAt(i).getAmbito().equals(ambito)) {
                return true;
            }
        }

        return false;
    }

    public boolean verificarSiLaVariableYaFueDeclarada(String nombreVariable, String ambito) {
        for(int i = 0; i < lista.size(); i++) {
            //Ambito actual
            if (lista.elementAt(i).getNombre().equals(nombreVariable) && lista.elementAt(i).getAmbito().equals(ambito)) {
                return true;
            } else if (lista.elementAt(i).getNombre().equals(nombreVariable) && lista.elementAt(i).getAmbito().equals("")) { //Global
                return true;
            }
        }

        return false;
    }

    public boolean verificarTipo_variableYFuncion(String nombreVariable, String funcion, String ambito) {
        String variableTipo = "";
        String funcionTipoRetorno = " ";

        for(int i = 0; i < lista.size(); i++) {
            //Ambito actual
            if (lista.elementAt(i).getNombre().equals(nombreVariable) && lista.elementAt(i).getAmbito().equals(ambito)) {
                variableTipo = lista.elementAt(i).getTipo().getClass().getSimpleName();
            } else if (lista.elementAt(i).getNombre().equals(nombreVariable) && lista.elementAt(i).getAmbito().equals("")) { //Global
                variableTipo = lista.elementAt(i).getTipo().getClass().getSimpleName();
            }

            if (lista.elementAt(i).getNombre().equals(funcion) && lista.elementAt(i).isFuncion()) {
                funcionTipoRetorno = lista.elementAt(i).getTipo().getClass().getSimpleName();
            }
        }

        if (variableTipo.equals(funcionTipoRetorno)) {
            return true;
        }

        return false;
    }

    public void codigoIntermedio_generar() {
        if (codigoFuenteValido()) {
            for (int i = 0; i < codigoIntermedio.size(); i++) {
                System.out.println(codigoIntermedio.elementAt(i));
            }
        } else {
            System.err.println("\n\nSe han encontrado " + errores + " errores");
        }
    }

    public void codigoIntermedio_asignacionAritmetica(String variable, Vector<String> operacionAritmetica) {
        if (codigoFuenteValido()) {
            if (operacionAritmetica.size() > 0) {
                if (!llamadoAFuncionDerecha.equals("") || operacionAritmetica.size() == 1) {
                    if (!llamadoAFuncionDerecha.equals("")) {
                        if (verificarTipo_variableYFuncion(variable, llamadoAFuncionDerecha, ambitoActual.getAmbito())) {
                            codigoIntermedio.add(variable + "=" + "RET");
                        } else {
                            System.err.println("Error de tipos: variable(" + variable + ") y funcion(" + llamadoAFuncionDerecha + ")");
                            errores++;
                        }
                        llamadoAFuncionDerecha = "";
                    } else {
                        String nuevoTemporal = codigoIntermedio_nuevoTemporal();
                        String valor = operacionAritmetica.remove(0);

                        String temporal = nuevoTemporal + "=" + valor;
                        codigoIntermedio.add(temporal);

                        String asignacionFinal = variable + "=" + nuevoTemporal;
                        codigoIntermedio.add(asignacionFinal);
                    }
                } else {
                    String operadores = "+-*/";
                    String nuevoTemporal = "";

                    for (int i = 0; i < operacionAritmetica.size(); i++) {
                        if (operadores.indexOf(operacionAritmetica.elementAt(i)) != -1) {
                            nuevoTemporal = codigoIntermedio_nuevoTemporal();
                            String izquierda = operacionAritmetica.remove(i - 1);
                            String operador = operacionAritmetica.remove(i - 1);
                            String derecha = operacionAritmetica.remove(i - 1);

                            String temporal = nuevoTemporal + "=" + izquierda + operador + derecha;

                            codigoIntermedio.add(temporal);

                            operacionAritmetica.add(i-1, nuevoTemporal);

                            i = i - 1;
                        }
                    }

                    String asignacionFinal = variable + "=" + nuevoTemporal;

                    codigoIntermedio.add(asignacionFinal);
                }
            }
        }
    }

    public void codigoIntermedio_asignacionChar(String variable, String contenido) {
        if (codigoFuenteValido()) {
            String texto = variable + "=\"" + contenido.replace("\'", "") + "\"";
            codigoIntermedio.add(texto);
        }
    }

    public void codigoIntermedio_asignacionString(String variable, String contenido) {
        if (codigoFuenteValido()) {
            String texto = variable + "=" + contenido;
            codigoIntermedio.add(texto);
        }
    }

    public void codigoIntermedio_print(String texto) {
        if (codigoFuenteValido()) {
            codigoIntermedio.add("print " + texto);
        }
    }

    public void codigoIntermedio_print(String texto, String contenido) {
        if (codigoFuenteValido()) {
            codigoIntermedio.add("print " + texto);
            codigoIntermedio.add("print " + contenido);
        }
    }

    public void codigoIntermedio_scanf(String variable) {
        if (codigoFuenteValido()) {
            codigoIntermedio.add("read " + variable);
        }
    }

    public void codigoIntermedio_llamadoAFuncion(Vector<String> parametros, String nombreFuncion) {
        if (codigoFuenteValido()) {
            for (int i = parametros.size() - 1; i >= 0; i--) {
                String parametro = parametros.elementAt(i);

                if (parametro.contains("\'")) {
                    parametro = parametro.replace("\'", "\"");
                }

                codigoIntermedio.add("param " + parametro);
            }

            codigoIntermedio.add("call " + nombreFuncion);
        }
    }

    public void codigoIntermedio_generarRETURN(String valorRetorno) {
        if (codigoFuenteValido()) {
            codigoIntermedio.add("return " + valorRetorno);
        }
    }

    public void codigoIntermedio_generarFIN(String nombreFuncion) {
        if (codigoFuenteValido()) {
            codigoIntermedio.add("FIN_" + nombreFuncion);
        }
    }

    public String codigoIntermedio_nuevoTemporal() {
        return "t" + (++codigoIntermedio_temporales);
    }

    public int codigoIntermedio_getEtiquetaActual() {
        return codigoIntermedio_etiquetas;
    }

    public void codigoIntermedio_generarEtiqueta() {
        codigoIntermedio.add("etiqueta_" + (++codigoIntermedio_etiquetas) + ":");
    }

    public void codigoIntermedio_generarEtiquetaFuncion(String nombreFuncion) {
        codigoIntermedio.add("funcion_" + nombreFuncion + ":");
    }

    public void codigoIntermedio_generarIF(String izquierda, String operador, String derecha) {
        if (codigoFuenteValido()) {
            /*int numeroEtiquetaTrue = codigoIntermedio_etiquetas + 1;
            int numeroEtiquetaFalse = numeroEtiquetaTrue + 1;

            String texto = "if " + izquierda + operador + derecha + " goto " + "etiqueta_" + numeroEtiquetaTrue;
            String gotoFalse = "goto " + "etiqueta_" + numeroEtiquetaFalse;

            codigoIntermedio.add(texto);
            codigoIntermedio.add(gotoFalse);*/

            String texto = "if " + izquierda + operador + derecha + " goto ";
            String gotoFalse = "goto ";

            codigoIntermedio.add(texto);
            codigoIntermedio.add(gotoFalse);
        }
    }

    public void completarIF(int linea, int etiqueta) {
        String texto = codigoIntermedio.elementAt(linea);
        texto += "etiqueta_" + etiqueta;
        codigoIntermedio.set(linea, texto);
    }

    public void codigoIntermedio_generarGOTO(int linea, int etiqueta) {
        codigoIntermedio.add(linea, "goto etiqueta_" + etiqueta);
    }
    
    public void codigoIntermedio_generarGOTO(int etiqueta) {
        codigoIntermedio.add("goto etiqueta_" + etiqueta);
    }

    public void syntax_error(Symbol s)
    {
        Token t = (Token)s.value;
        report_error("Se ha encontrado un error sintactico en linea " + t.getLinea() + ", columna " + t.getColumna() + " -> No se esperaba un < " + t.getContenido() + " >", null);

        errores++;
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    } 

:};

/* Terminals Tokens */



terminal INTEGER, CHAR, STRING;

terminal nombreVariable nombreVariable;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal TRUE;
terminal FALSE;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal corcheteIzquierdo; 
terminal corcheteDerecho;
terminal llaveIzquierda;
terminal llaveDerecha;
terminal constChar constChar; 
terminal constStr constStr;
terminal parentesisIzquierdo; 
terminal parentesisDerecho;
terminal igual;
terminal printf;
terminal scanf;
terminal operadorAritmeticoIgual;
terminal Token operadorSuma;
terminal operadorResta; 
terminal operadorMultiplicacion; 
terminal operadorDivision; 
terminal Token operadorIncrementoDecremento;
terminal operadorRelacional;
terminal operadorLogico operadorLogico;
terminal Token puntoYComa;
terminal coma;
terminal parametroScanf parametroScanf;
terminal entero entero;
terminal and;


/* noterminals */

non terminal Programa programa;
non terminal MainClass main;
non terminal Codigo codigo;
non terminal DeclaracionFuncion declaracion_funcion;
non terminal OperacionAritmetica operacion_aritmetica;
non terminal OperacionAritmetica2 operacion_aritmetica2;
non terminal OperacionAritmetica3 operacion_aritmetica3;
non terminal DeclaracionVariable declaracion_variable;
non terminal Tipo tipo;
non terminal Variable variable;
non terminal ElementoDeUnArreglo elemento_array;
non terminal AsignacionVariableComa asignacion_variable_coma;
non terminal AsignacionVariable asignacion_variable;
non terminal IncrementarDecrementarVariable incrementarDecrementarVariable;
non terminal Scanf scans;
non terminal Printf print;
non terminal If _if;
non terminal Else else;
non terminal While _while;
non terminal For _for;
non terminal ForInicializacion for_inicializacion;
non terminal ForInicializacion2 for_inicializacion2;
non terminal ForActualizacion for_actualizacion;
non terminal ForActualizacionComa for_actualizacion_coma; 
non terminal ListaVariables lista_variables;
non terminal ForInicializacionComa for_inicializacion_coma;
non terminal Condicion condicion;
non terminal CondicionOperadorLogico condicion_operador_logico;
non terminal InicializacionArreglo inicializacion_arreglo;
non terminal InicializacionArregloComa inicializacion_arreglo_coma;
non terminal DeclaracionFuncionParametros declaracion_funcion_parametros;
non terminal DeclaracionFuncionParametrosComa declaracion_funcion_parametros_coma;
non terminal Funciones funciones;
non terminal FuncionesParametros funciones_parametros;
non terminal FuncionesParametrosComa funciones_parametros_coma;
non terminal LlamadoAFuncion llamado_funcion;
non terminal LlamadoAFuncionParametros llamado_funcion_parametros;
non terminal LlamadoAFuncionParametrosComa llamado_funcion_parametros_coma;
non terminal Return;
non terminal Codigos codigos;
non terminal DeclaracionVariables declaracion_variables;
non terminal M M;
non terminal N N;



programa ::= declaracion_funcion:df  programa:p                                 {:   RESULT = new Programa(df, p);   :}
     | declaracion_variable:dv programa:p                                       {:   RESULT = new Programa(dv, p);   :}
     | main:m                                                                   {:   RESULT = new Programa(m);
                                                                                     parser.generarPrograma = RESULT; :};

main ::= tipo:t MAIN parentesisIzquierdo parentesisDerecho llaveIzquierda {: parser.ambitoActual.setAmbito("main");
                                                                             parser.codigoIntermedio_generarEtiquetaFuncion("main");
                                                                          :} 

                                                                          codigos:c llaveDerecha {: parser.codigoIntermedio_generarFIN("main"); :} funciones:f         {: RESULT = new MainClass(t, new MainClass(), new parentesisIzquierdo(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f ); :};

codigos ::= codigo:c codigos:cs             {:  cs.add(c); RESULT = cs; :}
            |                               {:  RESULT = new Codigos(); :};

codigo ::= declaracion_variable:dv                                                            {: RESULT = dv;  :} 
         | asignacion_variable:av                                                             {: RESULT = av;  :}
         | incrementarDecrementarVariable:i                                                   {: RESULT = i;  :}
         | print:p                                                                            {: RESULT = p; :}
         | scans:s                                                                            {: RESULT = s; :}
         | _while:w                                                                           {: RESULT = w;  :}
         | _if:i                                                                              {: RESULT = i;  :}
         | _for:f                                                                             {: RESULT = f;  :}
         | llamado_funcion:lf puntoYComa                                                      {: RESULT = new Codigo(lf,new puntoYComa());  :}   
         | RETURN operacion_aritmetica:o puntoYComa                                           {: RESULT = new Codigo(new RETURN(), o, new puntoYComa());
                                                                                                 parser.tipoRetorno = new IntegerTipo();
                                                                                                 parser.codigoIntermedio_generarRETURN(o._operacionAritmetica2._operacionAritmetica3._entero == null ? o._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o._operacionAritmetica2._operacionAritmetica3._entero._entero)); :}           
         | RETURN constChar:csc puntoYComa                                                    {: RESULT = new Codigo(new RETURN(), new constChar(csc._constChar, csc.linea, csc.columna), new puntoYComa());
                                                                                                 parser.tipoRetorno = new CharTipo();
                                                                                                 parser.codigoIntermedio_generarRETURN(csc._constChar); :}
         | RETURN constStr:cst puntoYComa                                                     {: RESULT = new Codigo( new RETURN(), new constStr(cst._constStr, cst.linea, cst.columna), new puntoYComa() );
                                                                                                 parser.tipoRetorno = new StringTipo();
                                                                                                 parser.codigoIntermedio_generarRETURN(cst._constStr); :}
         | error codigo:c                                                                     {: System.out.println("ERROR"); :};

tipo ::= INTEGER {: RESULT = new IntegerTipo(); :}
       | STRING  {: RESULT = new StringTipo();  :}  
       | CHAR    {: RESULT = new CharTipo();   :};

declaracion_variable ::= tipo:t declaracion_variables:dvs puntoYComa:s             {: RESULT = new DeclaracionVariable(t, dvs, new puntoYComa() );
                                                                                    for (int i = dvs.size() - 1; i >= 0 ; i--) {
                                                                                        if (!parser.verificarSiLaVariableYaFueDeclarada(t, dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                            //System.out.println(dvs.elementAt(i).getTipo() + " " + dvs.elementAt(i).getNombreVariable()._nombreVariable + " " + t);
                                                                                            if (dvs.elementAt(i).getTipo() instanceof IntegerTipo && t instanceof IntegerTipo) {
                                                                                                parser.lista.add(new _ListaTipos(t, dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                            } else if (dvs.elementAt(i).getTipo() instanceof StringTipo && t instanceof StringTipo) {
                                                                                                parser.lista.add(new _ListaTipos(t, dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                            } else if (dvs.elementAt(i).getTipo() instanceof CharTipo && t instanceof CharTipo) {
                                                                                                parser.lista.add(new _ListaTipos(t, dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                            } else if (dvs.elementAt(i).getTipo() instanceof ArrayTipo && t instanceof CharTipo) {
                                                                                                if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo instanceof CharTipo) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                } else if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo == null) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                }
                                                                                            } else if (dvs.elementAt(i).getTipo() instanceof ArrayTipo && t instanceof StringTipo) {
                                                                                                if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo instanceof StringTipo) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                } else if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo == null) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                }
                                                                                            } else if (dvs.elementAt(i).getTipo() instanceof ArrayTipo && t instanceof IntegerTipo) {
                                                                                                if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo instanceof IntegerTipo) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                } else if (((ArrayTipo) dvs.elementAt(i).getTipo()).tipo == null) {
                                                                                                    parser.lista.add(new _ListaTipos(new ArrayTipo(((ArrayTipo) dvs.elementAt(i).getTipo()).tamano, t), dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                                }
                                                                                            } else if (dvs.elementAt(i).getTipo() == null) {
                                                                                                parser.lista.add(new _ListaTipos(t, dvs.elementAt(i).getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito()));
                                                                                            }else {
                                                                                                 System.err.println("Error de tipos se esperaba un " + t.getClass().getSimpleName() + " no se puede pasar a "+ dvs.elementAt(i).getTipo().getClass().getSimpleName());
                                                                                                 System.err.println("Linea: " + s.getLinea() );
                                                                                                 System.err.println("Columna: " + s.getColumna() );

                                                                                                 parser.errores++;
                                                                                            }
                                                                                        } else {
                                                                                            System.err.println("Error: la variable < " + dvs.elementAt(i).getNombreVariable()._nombreVariable + " > ya fue declarada");
                                                                                            System.err.println("Linea: " + s.getLinea() );

                                                                                            parser.errores++;
                                                                                          }
                                                                                    } :} ;

declaracion_variables ::= lista_variables:lvs coma declaracion_variables:dvs                {: dvs.add( lvs); RESULT = dvs; 
                                                                                              RESULT.setTipo( lvs.getTipo());
                                                                                              RESULT.setNombreVariable( lvs.getNombreVariable());  :}
                                                                                              
                         | lista_variables:lvs                                              {: RESULT = new DeclaracionVariables(); RESULT.add( lvs); 
                                                                                               RESULT.setTipo(lvs.getTipo()); 
                                                                                               RESULT.setNombreVariable(lvs.getNombreVariable());                                                                                             
                                                                                             :};




lista_variables ::= variable:v                                                              {: RESULT = new ListaVariables(v);  
                                                                                               RESULT.setTipo(v.getTipo());  RESULT.setNombreVariable(v.getNombreVariable()); :}
                   
                    | nombreVariable:id igual {: parser.generar = true; :} operacion_aritmetica:o  {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o);  
                                                                                                      RESULT.setTipo(o.getTipo());  RESULT.setNombreVariable(id);

                                                                                                      parser.codigoIntermedio_asignacionAritmetica(id._nombreVariable, parser.operacionAritmetica);
                                                                                                      parser.operacionAritmetica.clear();
                                                                                                      parser.generar = false; :}

                   | nombreVariable:id igual constChar:csc                                  {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna)); 
                                                                                               RESULT.setTipo(new CharTipo());  RESULT.setNombreVariable(id);

                                                                                               parser.codigoIntermedio_asignacionChar(id._nombreVariable, csc._constChar); :}
                                                        
                   | nombreVariable:id igual constStr:css                                   {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna));   
                                                                                               RESULT.setTipo(new StringTipo());  RESULT.setNombreVariable(id);
                                                                                               
                                                                                               parser.codigoIntermedio_asignacionString(id._nombreVariable, css._constStr); :}
               
                   | nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho igual llaveIzquierda inicializacion_arreglo:ia llaveDerecha   {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho(), new igual(), new llaveIzquierda(), ia, new llaveDerecha());  
                                                                                                                                                                 RESULT.setTipo( new ArrayTipo(o,ia.getTipo()));   RESULT.setNombreVariable(id);  :}
               
                   | nombreVariable:id corcheteIzquierdo corcheteDerecho igual llaveIzquierda inicializacion_arreglo:iA llaveDerecha                          {: RESULT = new ListaVariables(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), new igual(), new llaveIzquierda(), iA, new llaveDerecha());  
                                                                                                                                                                 RESULT.setTipo( new ArrayTipo(null,iA.getTipo()));  RESULT.setNombreVariable(id); :};

inicializacion_arreglo_coma ::= coma inicializacion_arreglo:i                                            {:  RESULT = new InicializacionArregloComa( new coma(), i); :}
                            |;

inicializacion_arreglo ::= operacion_aritmetica:o  inicializacion_arreglo_coma:i                          {:  RESULT = new InicializacionArreglo(o,i);   
                                                                                                              RESULT.setTipo( o.getTipo());      :}

                        | constChar:csc  inicializacion_arreglo_coma:i                                    {:  RESULT = new InicializacionArreglo(new constChar(csc._constChar, csc.linea, csc.columna),i);   
                                                                                                              RESULT.setTipo( new CharTipo());  :}

                        | constStr:css  inicializacion_arreglo_coma:i                                     {:  RESULT = new InicializacionArreglo(new constStr(css._constStr, css.linea, css.columna),i);   
                                                                                                              RESULT.setTipo( new StringTipo());   :};

variable ::= nombreVariable:id                                                                            {: RESULT = new Variable(new nombreVariable(id._nombreVariable, id.linea, id.columna));  
                                                                                                             RESULT.setNombreVariable(id);   RESULT.setTipo(parser.lista.buscarId(id._nombreVariable)); :}

           | elemento_array:array                                                                         {: RESULT = new Variable(array);   
                                                                                                             RESULT.setNombreVariable(array.getNombreVariable());  RESULT.setTipo(array.getTipo());  :};

elemento_array ::= nombreVariable:id corcheteIzquierdo operacion_aritmetica:o corcheteDerecho             {: RESULT = new ElementoDeUnArreglo(new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), o, new corcheteDerecho()); 
                                                                                                             RESULT.setNombreVariable(id);  RESULT.setTipo(new ArrayTipo(o,null));  :};


declaracion_funcion ::= tipo:t nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfp parentesisDerecho puntoYComa:pc     {:  RESULT = new DeclaracionFuncion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfp, new parentesisDerecho(), new puntoYComa());
                                                                                                                                                if (!parser.verificarSiLaFuncionYaFueDeclarada(id._nombreVariable)) {
                                                                                                                                                   parser.lista.add(new _ListaTipos(t, id._nombreVariable, "", (Vector)parser.listaParametros.clone(), true));
                                                                                                                                                } else {
                                                                                                                                                   System.err.println("Error: la funcion < " + id._nombreVariable + " > ya fue declarada");
                                                                                                                                                   System.err.println("Linea: " + pc.getLinea());

                                                                                                                                                   parser.errores++;
                                                                                                                                                } 
                                                                                                                                                parser.listaParametros.clear(); :}
                     | VOID:v nombreVariable:id parentesisIzquierdo declaracion_funcion_parametros:dfs parentesisDerecho puntoYComa:pc       {: RESULT = new DeclaracionFuncion(new VOID(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), dfs, new parentesisDerecho(), new puntoYComa());
                                                                                                                                                if (!parser.verificarSiLaFuncionYaFueDeclarada(id._nombreVariable)) {
                                                                                                                                                   parser.lista.add(new _ListaTipos(new VOID(), id._nombreVariable, "", (Vector)parser.listaParametros.clone(), true));
                                                                                                                                                } else {
                                                                                                                                                   System.err.println("Error: la funcion < " + id._nombreVariable + " > ya fue declarada");
                                                                                                                                                   System.err.println("Linea: " + pc.getLinea());

                                                                                                                                                   parser.errores++;
                                                                                                                                                } 
                                                                                                                                                parser.listaParametros.clear(); :}
                     | error puntoYComa                                                                                                  {:  System.out.println("ERROR");  RESULT = new DeclaracionFuncion(new puntoYComa());
                                                                                                                                             parser.listaParametros.clear(); :};

declaracion_funcion_parametros ::= tipo:t declaracion_funcion_parametros_coma:dfp                                                        {:  RESULT = new DeclaracionFuncionParametros(t, dfp);
                                                                                                                                             parser.listaParametros.add(t); :}
                               | tipo:t corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp                        {:  RESULT = new DeclaracionFuncionParametros(t, new corcheteIzquierdo(), new corcheteDerecho(), dfp);
                                                                                                                                             parser.listaParametros.add(t); :}
                               | tipo:t nombreVariable:id declaracion_funcion_parametros_coma:dfp                                        {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), dfp);
                                                                                                                                             parser.listaParametros.add(t);  :}  
                               | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho declaracion_funcion_parametros_coma:dfp      {:  RESULT = new DeclaracionFuncionParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), dfp);
                                                                                                                                             parser.listaParametros.add(t); :}
                               |;
declaracion_funcion_parametros_coma ::= coma declaracion_funcion_parametros:dfp                                                           {: RESULT = new DeclaracionFuncionParametrosComa(new coma(), dfp); :}
                                   |;

funciones ::= tipo:t nombreVariable:id parentesisIzquierdo funciones_parametros:fp {: if (!parser.verificarSiLaFuncionYaFueDeclarada(id._nombreVariable)) {
                                                                                        System.err.println("Error: La funcion < " + id._nombreVariable + " > no existe");
                                                                                        parser.errores++;
                                                                                      } else if (!parser.verificarParametrosDeLlamadaAFuncion(id._nombreVariable, (Vector)parser.listaParametros.clone())) {
                                                                                          System.err.println("Error: Parametros invalidos para la funcion < " + id._nombreVariable + " >");
                                                                                          parser.errores++;
                                                                                      } else {
                                                                                          for(int i = 0; i < parser.listaTemp.size(); i++) {
                                                                                            parser.lista.add(new _ListaTipos(parser.listaTemp.elementAt(i).getTipo(), parser.listaTemp.elementAt(i).getNombre(), id._nombreVariable));
                                                                                          }
                                                                                      }
                                                                                      parser.listaParametros.clear();
                                                                                      parser.listaTemp.clear();
                                                                                   :}

                                                                                   parentesisDerecho llaveIzquierda {: parser.ambitoActual.setAmbito(id._nombreVariable);
                                                                                                                       parser.codigoIntermedio_generarEtiquetaFuncion(id._nombreVariable);
                                                                                                                    :}
 
                                                                                   codigos:c {: if (t.getClass() != parser.tipoRetorno.getClass()) {
                                                                                                  System.err.println("Error: retorno invalido para la funcion < " + id._nombreVariable + " >" );
                                                                                                  parser.errores++;
                                                                                                } 
                                                                                                parser.tipoRetorno = new Tipo();
                                                                                                parser.codigoIntermedio_generarFIN(id._nombreVariable);
                                                                                             :}

                                                                                    llaveDerecha funciones:f {: RESULT = new Funciones(t,new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f); :}
            
            | VOID nombreVariable:id parentesisIzquierdo funciones_parametros:fp {: if (!parser.verificarSiLaFuncionYaFueDeclarada(id._nombreVariable)) {
                                                                                      System.err.println("Error: La funcion < " + id._nombreVariable + " > no existe");
                                                                                      parser.errores++;
                                                                                    } else if (!parser.verificarParametrosDeLlamadaAFuncion(id._nombreVariable, (Vector)parser.listaParametros.clone())) {
                                                                                        System.err.println("Error: Parametros invalidos para la funcion < " + id._nombreVariable + " >");
                                                                                        parser.errores++;
                                                                                    } else {
                                                                                        for(int i = 0; i < parser.listaTemp.size(); i++) {
                                                                                          parser.lista.add(new _ListaTipos(parser.listaTemp.elementAt(i).getTipo(), parser.listaTemp.elementAt(i).getNombre(), id._nombreVariable));
                                                                                        }
                                                                                    }
                                                                                    parser.listaParametros.clear();
                                                                                    parser.listaTemp.clear();
                                                                                 :} 

                                                                                 parentesisDerecho llaveIzquierda {: parser.ambitoActual.setAmbito(id._nombreVariable);
                                                                                                                     parser.codigoIntermedio_generarEtiquetaFuncion(id._nombreVariable);
                                                                                                                  :}

                                                                                 codigos:c {: if (!parser.tipoRetorno.getClass().getSimpleName().equals("Tipo")) {
                                                                                                System.err.println("Error: retorno invalido para la funcion < " + id._nombreVariable + " >" );
                                                                                                parser.errores++;
                                                                                              }

                                                                                              parser.codigoIntermedio_generarFIN(id._nombreVariable);
                                                                                           :} 

                                                                                 llaveDerecha funciones:f {:  RESULT = new Funciones(new VOID(),new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), fp, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f); :}

            | tipo:t error parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f                                                                {:  System.out.println("ERROR"); RESULT = new Funciones(t, new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            | VOID error parentesisDerecho llaveIzquierda codigos:c llaveDerecha funciones:f                                                                  {:  System.out.println("ERROR"); RESULT = new Funciones(new VOID(), new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), f);   :}
            |;

funciones_parametros ::= tipo:t nombreVariable:id funciones_parametros_coma:fpc                                                {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), fpc);
                                                                                                                                  parser.listaParametros.add(t);
                                                                                                                                  parser.listaTemp.add(new _ListaTipos(t, id._nombreVariable, "")); :}
                      | tipo:t nombreVariable:id corcheteIzquierdo corcheteDerecho funciones_parametros_coma:fpc               {: RESULT = new FuncionesParametros(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new corcheteIzquierdo(), new corcheteDerecho(), fpc);
                                                                                                                                  parser.listaParametros.add(t);
                                                                                                                                  parser.listaTemp.add(new _ListaTipos(t, id._nombreVariable, "")); :}
                      |;

funciones_parametros_coma ::= coma funciones_parametros:fp                                                                     {:  RESULT = new FuncionesParametrosComa(new coma(), fp); :}
                         |;

llamado_funcion ::= nombreVariable:id parentesisIzquierdo llamado_funcion_parametros:llfp parentesisDerecho      {:  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisIzquierdo(), llfp, new parentesisDerecho()); 
                                                                                                                     if (parser.verificarSiLaFuncionYaFueDeclarada(id._nombreVariable)) {
                                                                                                                        if (!parser.verificarParametrosDeLlamadaAFuncion(id._nombreVariable, (Vector)parser.listaParametros.clone())) {
                                                                                                                           System.err.println("Error: parametros de la funcion < " + id._nombreVariable + " > incorrectos");
                                                                                                                           parser.errores++;
                                                                                                                        } else {
                                                                                                                            parser.codigoIntermedio_llamadoAFuncion((Vector)parser.listaParametrosVariables.clone(), id._nombreVariable);
                                                                                                                            parser.listaParametrosVariables.clear();
                                                                                                                        }
                                                                                                                     } else {
                                                                                                                        System.err.println("Error: la funcion < " + id._nombreVariable + " > no ha sido declarada");
                                                                                                                        parser.errores++;
                                                                                                                     }
                                                                                                                     parser.listaParametros.clear(); :}                
                  
                    | nombreVariable:id error parentesisDerecho                                                  {:  System.out.println("ERROR");  RESULT = new LlamadoAFuncion(new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho());
                                                                                                                     parser.listaParametros.clear(); :};

llamado_funcion_parametros ::= operacion_aritmetica:o llamado_funcion_parametros_coma:fpc                        {:  RESULT = new LlamadoAFuncionParametros(o,fpc);
                                                                                                                     parser.listaParametros.add(o.getTipo());

                                                                                                                     String parametro = o._operacionAritmetica2._operacionAritmetica3._entero == null ? o._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o._operacionAritmetica2._operacionAritmetica3._entero._entero);
                                                                                                                     parser.listaParametrosVariables.add(parametro); :}

                            | constChar:csc llamado_funcion_parametros_coma:fpc                                  {:  RESULT = new LlamadoAFuncionParametros(new constChar(csc._constChar, csc.linea, csc.columna),fpc); 
                                                                                                                     parser.listaParametros.add(new CharTipo());

                                                                                                                     parser.listaParametrosVariables.add(csc._constChar); :}

                            | constStr:css llamado_funcion_parametros_coma:fpc                                   {:  RESULT = new LlamadoAFuncionParametros(new constStr(css._constStr, css.linea, css.columna),fpc);
                                                                                                                     parser.listaParametros.add(new StringTipo());

                                                                                                                     parser.listaParametrosVariables.add(css._constStr); :}
                            |;

llamado_funcion_parametros_coma ::= coma llamado_funcion_parametros:lp                                           {: RESULT = new LlamadoAFuncionParametrosComa(new coma(), lp); :}
                                |;

scans ::= scanf parentesisIzquierdo parametroScanf:p coma nombreVariable:id parentesisDerecho puntoYComa         {: RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), new nombreVariable(id._nombreVariable, id.linea, id.columna), new parentesisDerecho(), new puntoYComa());
                                                                                                                    if (parser.verificarSiLaVariableYaFueDeclarada(id._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                                                      parser.codigoIntermedio_scanf(id._nombreVariable);
                                                                                                                    } else {
                                                                                                                        System.err.println("Error: la variable < " + id._nombreVariable + " > no ha sido declarada");
                                                                                                                        parser.errores++;
                                                                                                                    }   
                                                                                                                 :}
        | scanf parentesisIzquierdo parametroScanf:p coma elemento_array:e parentesisDerecho puntoYComa          {: RESULT = new Scanf(new parentesisIzquierdo(), new parametroScanf(p._parametroScanf, p.linea, p.columna), new coma(), e, new parentesisDerecho(), new puntoYComa());   :};


print ::= printf parentesisIzquierdo constStr:csts parentesisDerecho puntoYComa                                  {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new parentesisDerecho(), new puntoYComa());
                                                                                                                    parser.codigoIntermedio_print(csts._constStr);  :}

         | printf parentesisIzquierdo constStr:csts coma operacion_aritmetica:o parentesisDerecho puntoYComa     {: RESULT = new Printf(new parentesisIzquierdo(), new constStr(csts._constStr, csts.linea, csts.columna), new coma(), o, new parentesisDerecho(), new puntoYComa());
                                                                                                                    String contenido = o._operacionAritmetica2._operacionAritmetica3._entero == null ? o._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o._operacionAritmetica2._operacionAritmetica3._entero._entero);

                                                                                                                    if (o._operacionAritmetica2._operacionAritmetica3._entero == null) {
                                                                                                                      if (parser.verificarSiLaVariableYaFueDeclarada(contenido, parser.ambitoActual.getAmbito())) {
                                                                                                                        parser.codigoIntermedio_print(csts._constStr, contenido);
                                                                                                                      } else {
                                                                                                                          System.err.println("Error: la variable < " + contenido + " > no ha sido declarada");
                                                                                                                          parser.errores++;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                        parser.codigoIntermedio_print(csts._constStr, contenido);
                                                                                                                    } :};

_if ::= IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda {: String operador = c._operadorRelacional.getOperador();
                                                                               String izquierda = c._operacionAritmetica1._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable;
                                                                               String derecha = c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null ? c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero._entero);

                                                                               if (!parser.verificarSiLaVariableYaFueDeclarada(izquierda, parser.ambitoActual.getAmbito())) {
                                                                                 System.err.println("Error: la variable < " + izquierda + " > no ha sido declarada");
                                                                                 parser.errores++;
                                                                               } 

                                                                               if(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null && !parser.verificarSiLaVariableYaFueDeclarada(derecha, parser.ambitoActual.getAmbito())) {
                                                                                 System.err.println("Error: la variable < " + derecha + " > no ha sido declarada");
                                                                                 parser.errores++;                                                                                 
                                                                               }

                                                                               parser.codigoIntermedio_generarIF(izquierda, operador, derecha);
                                                                               parser.codigoIntermedio_generarEtiqueta();
                                                                            :}

                                                                            N:n1 M:m1 codigos:cg {: parser.codigoIntermedio_generarEtiqueta();
                                                                                                 :} 

                                                                                                 N:n2 M:m2 llaveDerecha else:e  {: RESULT = new If(new parentesisIzquierdo() , c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e);
                                                                                                                                   if (e == null) {
                                                                                                                                     parser.completarIF(n1.getLinea() - 2, m1.getEtiqueta());
                                                                                                                                     parser.completarIF(n1.getLinea() - 1, m2.getEtiqueta());
                                                                                                                                   } else {
                                                                                                                                       parser.codigoIntermedio_generarEtiqueta();
                                                                                                                                       parser.completarIF(n1.getLinea() - 2, m1.getEtiqueta());
                                                                                                                                       parser.completarIF(n1.getLinea() - 1, m2.getEtiqueta());
                                                                                                                                       parser.codigoIntermedio_generarGOTO(n2.getLinea(), parser.codigoIntermedio_getEtiquetaActual());
                                                                                                                                   }
                                                                                                                                :}

     | IF error parentesisDerecho llaveIzquierda codigos:c llaveDerecha else:e                               {: RESULT = new If(new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :};

else ::= ELSE IF parentesisIzquierdo condicion:c parentesisDerecho llaveIzquierda codigos:cg llaveDerecha else:e    {: RESULT = new Else(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha(), e); :}
       | ELSE llaveIzquierda codigos:c llaveDerecha                                                                 {: RESULT = new Else(new llaveIzquierda(), c, new llaveDerecha()); :}
       | ELSE IF error parentesisDerecho llaveIzquierda codigos:c llaveDerecha else:e                               {: System.out.println("ERROR"); RESULT = new Else( new parentesisDerecho(), new llaveIzquierda(), c, new llaveDerecha(), e);  :}
       |;

_while ::= WHILE {: parser.codigoIntermedio_generarEtiqueta(); :} M:m1 parentesisIzquierdo condicion:c {: String operador = c._operadorRelacional.getOperador();
                                                                                                          String izquierda = c._operacionAritmetica1._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable;
                                                                                                          String derecha = c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null ? c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero._entero);

                                                                                                          if (!parser.verificarSiLaVariableYaFueDeclarada(izquierda, parser.ambitoActual.getAmbito())) {
                                                                                                            System.err.println("Error: la variable < " + izquierda + " > no ha sido declarada");
                                                                                                            parser.errores++;
                                                                                                          } 

                                                                                                          if(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null && !parser.verificarSiLaVariableYaFueDeclarada(derecha, parser.ambitoActual.getAmbito())) {
                                                                                                            System.err.println("Error: la variable < " + derecha + " > no ha sido declarada");
                                                                                                            parser.errores++;                                                                                 
                                                                                                          }

                                                                                                          parser.codigoIntermedio_generarIF(izquierda, operador, derecha);
                                                                                                          parser.codigoIntermedio_generarEtiqueta();
                                                                                                       :}
                        
                                                                                                       N:n1 M:m2 parentesisDerecho llaveIzquierda codigos:cg N:n2 llaveDerecha {: RESULT = new While(new parentesisIzquierdo(), c, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());
                                                                                                                                                                                  parser.codigoIntermedio_generarEtiqueta();
                                                                                                                                                                                  parser.completarIF(n1.getLinea() - 2, m2.getEtiqueta());
                                                                                                                                                                                  parser.completarIF(n1.getLinea() - 1, parser.codigoIntermedio_getEtiquetaActual());
                                                                                                                                                                                  parser.codigoIntermedio_generarGOTO(n2.getLinea() + 1, m1.getEtiqueta());
                                                                                                                                                                         :}

        | WHILE error parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                      {: System.out.println("ERROR");RESULT = new While(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha()); :};

_for ::= FOR parentesisIzquierdo {: parser.codigoIntermedio_generarEtiqueta();
                                    parser.generar = true;
                                 :} 

                                 for_inicializacion:fi puntoYComa {: String variable = fi._variable._nombreVariable._nombreVariable;

                                                                     if (!parser.verificarSiLaVariableYaFueDeclarada(variable, parser.ambitoActual.getAmbito())) {
                                                                       System.err.println("Error: la variable < " + variable + " > no ha sido declarada");
                                                                       parser.errores++;
                                                                       
                                                                     }

                                                                     parser.codigoIntermedio_asignacionAritmetica(variable, parser.operacionAritmetica);
                                                                     parser.operacionAritmetica.clear();
                                                                     parser.generar = false;
                                                                     
                                                                     parser.codigoIntermedio_generarEtiqueta();
                                                                  :} 

                                                                  M:m1 condicion:c puntoYComa {: String operador = c._operadorRelacional.getOperador();
                                                                                                 String izquierda = c._operacionAritmetica1._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable;
                                                                                                 String derecha = c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null ? c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero._entero);

                                                                                                 if (!parser.verificarSiLaVariableYaFueDeclarada(izquierda, parser.ambitoActual.getAmbito())) {
                                                                                                   System.err.println("Error: la variable < " + izquierda + " > no ha sido declarada");
                                                                                                   parser.errores++;
                                                                                                 } 

                                                                                                 if(c._operacionAritmetica2._operacionAritmetica2._operacionAritmetica3._entero == null && !parser.verificarSiLaVariableYaFueDeclarada(derecha, parser.ambitoActual.getAmbito())) {
                                                                                                   System.err.println("Error: la variable < " + derecha + " > no ha sido declarada");
                                                                                                   parser.errores++;                                                                                 
                                                                                                 }
                                              
                                                                                                 parser.codigoIntermedio_generarIF(izquierda, operador, derecha);

                                                                                                 parser.codigoIntermedio_generarEtiqueta();

                                                                                                 parser.generar = true;
                                                                                              :} 
                                                                                                
                                                                                              N:n1 M:m2 for_actualizacion:fa {: parser.generar = false;

                                                                                                                                parser.operacionAritmeticaTemp = (Vector)parser.operacionAritmetica.clone();
                                                                                                                                parser.operacionAritmetica.clear();
                                                                                                                             :} 

                                                                                                                             parentesisDerecho llaveIzquierda codigos:cg llaveDerecha      {: RESULT = new For( new parentesisIzquierdo(), fi, new puntoYComa(), c, new puntoYComa(), fa, new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha() );
                                                                                                                                                                                  
                                                                                                                                                                                              parser.codigoIntermedio_generarEtiqueta();

                                                                                                                                                                                              String variable = fa._variable._nombreVariable._nombreVariable;

                                                                                                                                                                                              if (!parser.verificarSiLaVariableYaFueDeclarada(variable, parser.ambitoActual.getAmbito())) {
                                                                                                                                                                                                System.err.println("Error: la variable < " + variable + " > no ha sido declarada");
                                                                                                                                                                                                parser.errores++;
                                                                                                                                                                                              }

                                                                                                                                                                                              if(fa._operadorIncrementoDecremento != null) {
                                                                                                                                                                                                String operador = fa._operadorIncrementoDecremento.getContenido();
                                                                                                                                                                                                Vector<String> operacion = new Vector();

                                                                                                                                                                                                if (operador.equals("++")) {
                                                                                                                                                                                                  operacion.add(variable);
                                                                                                                                                                                                  operacion.add("+");
                                                                                                                                                                                                  operacion.add("1");
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    operacion.add(variable);
                                                                                                                                                                                                    operacion.add("-");
                                                                                                                                                                                                    operacion.add("1");
                                                                                                                                                                                                }

                                                                                                                                                                                                parser.codigoIntermedio_asignacionAritmetica(variable, operacion);
                                                                                                                                                                                              } else {
                                                                                                                                                                                                  parser.codigoIntermedio_asignacionAritmetica(variable, parser.operacionAritmeticaTemp);
                                                                                                                                                                                              }

                                                                                                                                                                                              parser.operacionAritmeticaTemp.clear();

                                                                                                                                                                                              parser.codigoIntermedio_generarGOTO(m1.getEtiqueta());

                                                                                                                                                                                              parser.codigoIntermedio_generarEtiqueta();

                                                                                                                                                                                              parser.completarIF(n1.getLinea() - 2, m2.getEtiqueta());
                                                                                                                                                                                              parser.completarIF(n1.getLinea() - 1, parser.codigoIntermedio_getEtiquetaActual());
                                                                                                                                                                                           :}
      
      | FOR error parentesisDerecho llaveIzquierda codigos:cg llaveDerecha                                                                                                {:   System.out.println("ERROR");RESULT = new For(new parentesisDerecho(), new llaveIzquierda(), cg, new llaveDerecha());   :};


for_inicializacion ::= tipo:t variable:v for_inicializacion_coma:fi                                                {:  RESULT = new ForInicializacion(t,v,fi);   :}
                    | tipo:t nombreVariable:id igual operacion_aritmetica:o for_inicializacion_coma:fic            {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), o, fic);   :}
                    | tipo:t nombreVariable:id igual constChar:csc for_inicializacion_coma:fic                     {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic); :}
                    | tipo:t nombreVariable:id igual constStr:css for_inicializacion_coma:fic                      {:  RESULT = new ForInicializacion(t, new nombreVariable(id._nombreVariable, id.linea, id.columna), new igual(), new constStr(css._constStr, css.linea, css.columna), fic);   :}
                    | variable:v igual operacion_aritmetica:o for_inicializacion_coma:fic                          {:  RESULT = new ForInicializacion(v, new igual(), o, fic);   :}
                    | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_inicializacion_coma:fic        {:  RESULT = new ForInicializacion(v, new operadorAritmeticoIgual(), o, fic);:}
                    | variable:v igual constChar:csc for_inicializacion_coma:fic                                   {:  RESULT = new ForInicializacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);:}
                    | variable:v igual constStr:css for_inicializacion_coma:fic                                    {:  RESULT = new ForInicializacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);    :};

for_inicializacion2 ::= variable:v igual operacion_aritmetica:o for_inicializacion_coma:fic                     {:  RESULT = new ForInicializacion2(v, new igual(), o, fic);  :}
                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_inicializacion_coma:fic    {:  RESULT = new ForInicializacion2(v, new operadorAritmeticoIgual(), o, fic);   :}
                     | variable:v igual constChar:csc for_inicializacion_coma:fic                               {:  RESULT = new ForInicializacion2(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fic);  :}
                     | variable:v igual constStr:css for_inicializacion_coma:fic                                {:  RESULT = new ForInicializacion2(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fic);  :};

for_inicializacion_coma ::= coma for_inicializacion2:fic2                                                       {:  RESULT= new ForInicializacionComa(new coma(), fic2);  :}
                        |;

for_actualizacion ::= variable:v igual operacion_aritmetica:o for_actualizacion_coma:fac                     {:   RESULT = new ForActualizacion(v, new igual(), o, fac);    :}
                   | variable:v operadorAritmeticoIgual operacion_aritmetica:o for_actualizacion_coma:fac    {:   RESULT = new ForActualizacion(v, new operadorAritmeticoIgual(), o, fac);    :}
                   | variable:v igual constChar:csc for_actualizacion_coma:fac                               {:   RESULT = new ForActualizacion(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna), fac);    :}
                   | variable:v igual constStr:css for_actualizacion_coma:fac                                {:   RESULT = new ForActualizacion(v, new igual(), new constStr(css._constStr, css.linea, css.columna), fac);    :}
                   | variable:v operadorIncrementoDecremento:oid for_actualizacion_coma:fac                  {:   RESULT = new ForActualizacion(v, oid, fac); :}
                   | operadorIncrementoDecremento:oid variable:v for_actualizacion_coma:fac                  {:   RESULT = new ForActualizacion(oid, v, fac); :};

for_actualizacion_coma ::= coma for_actualizacion:fa                                                         {: RESULT = new ForActualizacionComa(new coma(), fa ); :}
                       |;

condicion ::= operacion_aritmetica:o1 operadorRelacional:or operacion_aritmetica:o2 condicion_operador_logico:col         {: RESULT = new Condicion(o1, new operadorRelacional((Token)or), o2, col);
                                                                                                                             String izquierdaTipo = o1._operacionAritmetica2._operacionAritmetica3._variable.getTipo().getClass().getSimpleName();
                                                                                                                             String derechaTipo = o2._operacionAritmetica2._operacionAritmetica3._entero == null ? o2._operacionAritmetica2._operacionAritmetica3._variable.getTipo().getClass().getSimpleName() :  new IntegerTipo().getClass().getSimpleName();
                                                                                                                             
                                                                                                                             if (!izquierdaTipo.equals(derechaTipo)) {
                                                                                                                               System.err.println("Error de tipos: no se puede convertir " + derechaTipo + " a " + izquierdaTipo);
                                                                                                                               parser.errores++;
                                                                                                                             }  :}
            | operacion_aritmetica:o1 operadorRelacional:or constChar:csc condicion_operador_logico:col                   {: RESULT = new Condicion(o1, new operadorRelacional((Token)or), new constChar(csc._constChar, csc.linea, csc.columna), col); :}
            | operacion_aritmetica:o1 operadorRelacional:or constStr:css condicion_operador_logico:col                    {: RESULT = new Condicion(o1, new operadorRelacional((Token)or), new constStr(css._constStr, css.linea, css.columna), col); :}
            | constChar:csc operadorRelacional:or operacion_aritmetica:o1 condicion_operador_logico:col                   {: RESULT = new Condicion(new constChar(csc._constChar, csc.linea, csc.columna), new operadorRelacional((Token)or), o1, col); :}
            | constStr:css operadorRelacional:or operacion_aritmetica:o1 condicion_operador_logico:col                    {: RESULT = new Condicion(new constStr(css._constStr, css.linea, css.columna), new operadorRelacional((Token)or), o1, col); :}
            | parentesisIzquierdo condicion:c parentesisDerecho condicion_operador_logico:col                             {: RESULT = new Condicion(new parentesisIzquierdo(), c, new parentesisDerecho(), col); :};

condicion_operador_logico ::= operadorLogico condicion:c                                                               {:  RESULT = new CondicionOperadorLogico( new operadorLogico(), c);  :}
                      |;

M ::= {: RESULT = new M(parser.codigoIntermedio_etiquetas); :};

N ::= {: RESULT = new N(parser.codigoIntermedio.size() - 1); :};

asignacion_variable ::= variable:v igual {: parser.generar = true; :} operacion_aritmetica:oa {: if (!parser.verificarSiLaVariableYaFueDeclarada(v.getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                                   System.err.println("Error: la variable < " + v.getNombreVariable()._nombreVariable + " > no ha sido declarada");
                                                                                                   parser.errores++;
                                                                                                 } else {
                                                                                                     parser.codigoIntermedio_asignacionAritmetica(v.getNombreVariable()._nombreVariable, parser.operacionAritmetica);
                                                                                                     parser.operacionAritmetica.clear();
                                                                                                 }
                                                                                                 parser.generar = false;
                                                                                              :}

                                                                                              asignacion_variable_coma:av {: RESULT = new AsignacionVariable(v, new igual(), oa, av); :}

                     | variable:v operadorAritmeticoIgual operacion_aritmetica:o asignacion_variable_coma:av           {: RESULT = new AsignacionVariable(v, new operadorAritmeticoIgual(), o, av);
                                                                                                                          if (!parser.verificarSiLaVariableYaFueDeclarada(v.getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                                                            System.err.println("Error: la variable < " + v.getNombreVariable()._nombreVariable + " > no ha sido declarada");
                                                                                                                            parser.errores++;
                                                                                                                          } :}
                     | variable:v igual constChar:csc asignacion_variable_coma:ac                                      {: RESULT = new AsignacionVariable(v, new igual(), new constChar(csc._constChar, csc.linea, csc.columna) , ac);
                                                                                                                          if (!parser.verificarSiLaVariableYaFueDeclarada(v.getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                                                            System.err.println("Error: la variable < " + v.getNombreVariable()._nombreVariable + " > no ha sido declarada");
                                                                                                                            parser.errores++;
                                                                                                                          } else {
                                                                                                                              parser.codigoIntermedio_asignacionChar(v.getNombreVariable()._nombreVariable, csc._constChar);
                                                                                                                          } :}
                     | variable:v igual constStr:css asignacion_variable_coma:ac                                       {: RESULT = new AsignacionVariable(v, new igual(), new constStr(css._constStr, css.linea, css.columna) , ac);
                                                                                                                          if (!parser.verificarSiLaVariableYaFueDeclarada(v.getNombreVariable()._nombreVariable, parser.ambitoActual.getAmbito())) {
                                                                                                                            System.err.println("Error: la variable < " + v.getNombreVariable()._nombreVariable + " > no ha sido declarada");
                                                                                                                            parser.errores++;
                                                                                                                          } else {
                                                                                                                              parser.codigoIntermedio_asignacionString(v.getNombreVariable()._nombreVariable, css._constStr);
                                                                                                                          } :} 
                     | error puntoYComa                                                                                {: RESULT = new AsignacionVariable(new puntoYComa()); :};

asignacion_variable_coma ::= coma asignacion_variable:av                                                               {: RESULT = new AsignacionVariableComa( new coma(), av);  :}
                        | puntoYComa;

incrementarDecrementarVariable ::= variable:v operadorIncrementoDecremento:oid puntoYComa                     {:  RESULT = new IncrementarDecrementarVariable(v, oid, new puntoYComa());  :}
                                 | operadorIncrementoDecremento:oid variable:v puntoYComa                     {:  RESULT = new IncrementarDecrementarVariable(oid, v, new puntoYComa());  :};

            
operacion_aritmetica ::= operacion_aritmetica:o1 operadorSuma:s operacion_aritmetica2:o2                   {: RESULT = new OperacionAritmetica(o1, new operadorSuma(), o2); 
                                                                                                            if (o1.getTipo() instanceof IntegerTipo && o2.getTipo() instanceof IntegerTipo){
                                                                                                                    RESULT.setTipo( new IntegerTipo());
                                                                                                                    if (parser.generar) {
                                                                                                                      String izquierda = o1._operacionAritmetica2._operacionAritmetica3._entero == null ? o1._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o1._operacionAritmetica2._operacionAritmetica3._entero._entero);
                                                                                                                      String derecha = o2._operacionAritmetica3._entero == null ? o2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o2._operacionAritmetica3._entero._entero);
                                                                                                                      String operador = "+";

                                                                                                                      if (parser.operacionAritmetica.isEmpty()) {
                                                                                                                        parser.operacionAritmetica.add(izquierda);
                                                                                                                        parser.operacionAritmetica.add(operador);
                                                                                                                        parser.operacionAritmetica.add(derecha);
                                                                                                                      } else {
                                                                                                                          parser.operacionAritmetica.add(operador);
                                                                                                                          parser.operacionAritmetica.add(derecha);
                                                                                                                      }
                                                                                                                    }
                                                                                                            }else{
                                                                                                                System.err.println("Error de tipos se esperaba un Entero");
                                                                                                                System.err.println("Linea: " + s.getLinea() );
                                                                                                                System.err.println("Columna: " + s.getColumna() );

                                                                                                                parser.errores++;
                                                                                                            } :}

                      | operacion_aritmetica:o1 operadorResta operacion_aritmetica2:o2                   {: RESULT = new OperacionAritmetica(o1, new operadorResta(), o2); 
                                                                                                            if (o1.getTipo() instanceof IntegerTipo && o2.getTipo() instanceof IntegerTipo){
                                                                                                                    RESULT.setTipo( new IntegerTipo());
                                                                                                                    if (parser.generar) {
                                                                                                                      String izquierda = o1._operacionAritmetica2._operacionAritmetica3._entero == null ? o1._operacionAritmetica2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o1._operacionAritmetica2._operacionAritmetica3._entero._entero);
                                                                                                                      String derecha = o2._operacionAritmetica3._entero == null ? o2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o2._operacionAritmetica3._entero._entero);
                                                                                                                      String operador = "-";

                                                                                                                      if (parser.operacionAritmetica.isEmpty()) {
                                                                                                                        parser.operacionAritmetica.add(izquierda);
                                                                                                                        parser.operacionAritmetica.add(operador);
                                                                                                                        parser.operacionAritmetica.add(derecha);
                                                                                                                      } else {
                                                                                                                          parser.operacionAritmetica.add(operador);
                                                                                                                          parser.operacionAritmetica.add(derecha);
                                                                                                                      }
                                                                                                                    }
                                                                                                            }else{
                                                                                                                System.err.println("Error de tipos se esperaba un Entero");
                                                                                                                System.err.println("Linea: " );

                                                                                                                parser.errores++;
                                                                                                            } :}

                      | operacion_aritmetica2:o2                                                         {: RESULT = new OperacionAritmetica(o2); 
                                                                                                            RESULT.setTipo( RESULT._operacionAritmetica2.getTipo()); :};

operacion_aritmetica2 ::= operacion_aritmetica2:o2 operadorMultiplicacion operacion_aritmetica3:o3    {: RESULT = new OperacionAritmetica2(o2, new operadorMultiplicacion(), o3);                                                                                                         
                                                                                                         if (o2.getTipo() instanceof IntegerTipo && o3.getTipo() instanceof IntegerTipo){
                                                                                                                RESULT.setTipo( new IntegerTipo());
                                                                                                                if (parser.generar) {
                                                                                                                  String izquierda = o2._operacionAritmetica3._entero == null ? o2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o2._operacionAritmetica3._entero._entero);
                                                                                                                  String derecha = o3._entero == null ? o3._variable._nombreVariable._nombreVariable :  Integer.toString(o3._entero._entero);
                                                                                                                  String operador = "*";

                                                                                                                  if (parser.operacionAritmetica.isEmpty()) {
                                                                                                                    parser.operacionAritmetica.add(izquierda);
                                                                                                                    parser.operacionAritmetica.add(operador);
                                                                                                                    parser.operacionAritmetica.add(derecha);
                                                                                                                  } else {
                                                                                                                      parser.operacionAritmetica.add(operador);
                                                                                                                      parser.operacionAritmetica.add(derecha);
                                                                                                                  }
                                                                                                                }
                                                                                                            }else{
                                                                                                                System.err.println("Error de tipos se esperaba un Entero");
                                                                                                                System.err.println("Linea: " );

                                                                                                                parser.errores++;
                                                                                                            } :}

                       | operacion_aritmetica2:o2 operadorDivision operacion_aritmetica3:o3           {: RESULT = new OperacionAritmetica2(o2, new operadorDivision(), o3); 
                                                                                                          if (o2.getTipo() instanceof IntegerTipo && o3.getTipo() instanceof IntegerTipo){
                                                                                                                RESULT.setTipo( new IntegerTipo());
                                                                                                                if (parser.generar) {
                                                                                                                  String izquierda = o2._operacionAritmetica3._entero == null ? o2._operacionAritmetica3._variable._nombreVariable._nombreVariable :  Integer.toString(o2._operacionAritmetica3._entero._entero);
                                                                                                                  String derecha = o3._entero == null ? o3._variable._nombreVariable._nombreVariable :  Integer.toString(o3._entero._entero);
                                                                                                                  String operador = "/";

                                                                                                                  if (parser.operacionAritmetica.isEmpty()) {
                                                                                                                    parser.operacionAritmetica.add(izquierda);
                                                                                                                    parser.operacionAritmetica.add(operador);
                                                                                                                    parser.operacionAritmetica.add(derecha);
                                                                                                                  } else {
                                                                                                                      parser.operacionAritmetica.add(operador);
                                                                                                                      parser.operacionAritmetica.add(derecha);
                                                                                                                  }
                                                                                                                }
                                                                                                            }else{
                                                                                                                System.err.println("Error de tipos se esperaba un Entero");
                                                                                                                System.err.println("Linea: " );

                                                                                                                parser.errores++;
                                                                                                            } :}
                      
                       | operacion_aritmetica3:o3                                                     {: RESULT = new OperacionAritmetica2(o3); 
                                                                                                         RESULT.setTipo(RESULT._operacionAritmetica3.getTipo()); 

                                                                                                         if (parser.generar && parser.operacionAritmetica.isEmpty()) {
                                                                                                           String valor = o3._entero == null ? o3._variable._nombreVariable._nombreVariable :  Integer.toString(o3._entero._entero);
                                                                                                           parser.operacionAritmetica.add(valor);
                                                                                                         }  :} ;

operacion_aritmetica3 ::= entero:e                                                                       {: RESULT = new OperacionAritmetica3(new entero(e._entero, e.linea, e.columna));   
                                                                                                            RESULT.setTipo(new IntegerTipo()); :}     
                                                                
                       | variable:v                                                                      {: RESULT = new OperacionAritmetica3(v);    
                                                                                                            RESULT.setTipo(v.getTipo()); :}
 
                       | llamado_funcion:lf                                                              {: RESULT = new OperacionAritmetica3(lf);    
                                                                                                            RESULT.setTipo(lf.getTipo());
                                                                                                            parser.llamadoAFuncionDerecha = lf._nombreVariable._nombreVariable; :} 

                       | parentesisIzquierdo operacion_aritmetica:o parentesisDerecho                    {: RESULT = new OperacionAritmetica3(new parentesisIzquierdo(), o, new parentesisDerecho());    
                                                                                                            RESULT.setTipo( o.getTipo()); :} ;